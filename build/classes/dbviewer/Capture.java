/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer;import java.awt.AWTException;import java.awt.BorderLayout;import java.awt.GraphicsDevice;import java.awt.GraphicsEnvironment;import java.awt.Rectangle;import java.awt.Robot;import java.awt.image.BufferedImage;import java.util.logging.Level;import java.util.logging.Logger;import javax.swing.ImageIcon;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JScrollPane;import panels.Frame4;import panels.Panel4;/** @author maggot */class Capture {  static JPanel jp = null;  static JFrame jf;  static final GraphicsEnvironment enviro = GraphicsEnvironment    .getLocalGraphicsEnvironment();  static final GraphicsDevice screen = enviro.getDefaultScreenDevice();  static JLabel lab;  static ImageIcon ic;  static JScrollPane jsp;  static Capture capture;  public static void main(String[] args) {    capture = new Capture();    help();    screenCapture();//    windowCapture();  }  public static void screenCapture() {    try {      final Robot robot = new Robot(screen);      int x = 0;      int y = 0;      int hgt = screen.getDisplayMode().getHeight();      int wid = screen.getDisplayMode().getWidth();      Rectangle rec = new Rectangle(x, y, wid, hgt);      final BufferedImage createScreenCapture = robot.createScreenCapture(rec);      jp = new Panel4("Capture");      lab = new JLabel("");      ic = new ImageIcon(createScreenCapture);      lab.setIcon(ic);      jsp = new JScrollPane(lab);      jp.add(jsp, BorderLayout.CENTER);      jf = new Frame4(jp);    } catch (AWTException ex) {      Logger.getLogger(Capture.class.getName()).log(Level.SEVERE, null, ex);    }//    Panel4T5CounterMaker.savePic(lab, "ScreenGrab.gif");  }  private static void windowCapture() {    //List all open Frames    ////System.out.print("" + " = " +toString());  }  @Override  public String toString() {    return getClass().getName() + "[screen = " + screen.toString()      + ", enviro = " + enviro.toString() + "]";  }  public static void help() {    //System.out.print("screen" + " = " + screen);    //System.out.print("screen.getIDstring()" + " = " + screen.getIDstring());    //System.out.print("screen.getFullScreenWindow()" + " = " + screen.getFullScreenWindow());    //System.out.print("getAvailableAcceleratedMemory()" + " = " + screen.getAvailableAcceleratedMemory());//        //System.out.print("screen.getBestConfiguration(null)" + " = " +screen.getBestConfiguration(null));    //System.out.print("screen.getConfigurations()" + " = " + screen.getConfigurations());    //System.out.print("screen.getDefaultConfiguration()" + " = " + screen.getDefaultConfiguration());    //System.out.print("screen.getDisplayMode()" + " = " + screen.getDisplayMode());    //System.out.print("screen.getDisplayModes()" + " = " + screen.getDisplayModes());    //System.out.print("screen.getFullScreenWindow()" + " = " + screen.getFullScreenWindow());    //System.out.print("screen.getType()" + " = " + screen.getType());    //System.out.print("screen.isDisplayChangeSupported()" + " = " + screen.isDisplayChangeSupported());    //System.out.print("screen.isFullScreenSupported()" + " = " + screen.isFullScreenSupported());    //System.out.print("screen.isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency.TRANSLUCENT)" + " = " + screen.isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency.TRANSLUCENT));    ////System.out.print("" + " = " +screen);    //System.out.print("environment" + " = " + enviro);    ////System.out.print("" + " = " +enviro.createGraphics(null));    //System.out.print("enviro.getAllFonts().toString()" + " = " + enviro.getAllFonts().toString());    //System.out.print("enviro.getAvailableFontFamilyNames().toString()" + " = " + enviro.getAvailableFontFamilyNames().toString());    //System.out.print("enviro.getAvailableFontFamilyNames(Locale.UK).toString()" + " = " + enviro.getAvailableFontFamilyNames(Locale.UK).toString());    //System.out.print("enviro.getCenterPoint().toString()" + " = " + enviro.getCenterPoint().toString());    //System.out.print("enviro.getDefaultScreenDevice().toString()" + " = " + enviro.getDefaultScreenDevice().toString());    //System.out.print("enviro.getMaximumWindowBounds().toString()" + " = " + enviro.getMaximumWindowBounds().toString());    //System.out.print("enviro.getScreenDevices().toString()" + " = " + enviro.getScreenDevices().toString());    //System.out.print("enviro.isHeadlessInstance()" + " = " + enviro.isHeadlessInstance());    ////System.out.print("" + " = " +enviro.preferLocaleFonts());    ////System.out.print("" + " = " +enviro.preferProportionalFonts());    ////System.out.print("" + " = " +enviro.registerFont(null));  }}