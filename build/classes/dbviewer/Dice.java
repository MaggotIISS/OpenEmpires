/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer;//~--- JDK imports ------------------------------------------------------------import java.awt.Container;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JTextField;//-----------------------------------------------/** */class Dice implements ActionListener {  // -----------------------------------------------  private static final String CRLF = System.getProperty("line.separator");  private static final String FSEP = System.getProperty("file.separator");  private static JButton jb;     // = new JButton()  private static JTextField jtf;    // = new JTextField("2");  /**   */  public Dice() {    JFrame jf = new JFrame();    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    jf.setSize(10, 80);    Container contents = jf.getContentPane();    jtf = new JTextField(8);    contents.add(jtf, "South");    jtf.addActionListener(this);    jb = new JButton("Roll");    contents.add(jb, "North");    jb.addActionListener(this);    // System.out.print("" + r + System.getProperty("line.separator"));    jf.setVisible(true);  }  // -----------------------------------------------  /**   Command line startup   @param args strings to start   */  public static void main(String[] args) {    Dice d = new Dice();    /*     byte max = 6;     for(int i = 0; i<max; i++) {     //int r = roll();     int r = roll(3);     //int r = roll(1,6);     //int r = roll(1,-6);     //int r = roll(1,20,0);     System.out.print("Roll " + i + " of " + max + " = " + r + CRLF);     }     */  }  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }  /**   */  @Override  public void actionPerformed(ActionEvent e) {    if (e.getActionCommand().equals("Roll")) {      int num = roll();      String reply = ("" + e.getActionCommand() + " = " + num);      //System.out.print(reply);      jtf.setText(reply);    }  }  // -----------------------------------------------  /**   roll 1-6   @return total   */  public static int roll() {    return (int) ((Math.random() * 6) + 1);  }  /**   roll d6 dice amount of times   @param dice number of die to roll   @return total   */  public static int roll(int dice) {    int num = 0;    int total = 0;    for (int i = 1; i <= dice; i++) {      num = (int) ((Math.random() * 6) + 1);      total += num;    }    return total;  }  /**   roll d6 dice amount of times and add adds (may be negative   @param dice number of die to roll   @param adds number to add   @return total   */  public static int roll(int dice, int adds) {    int sub = roll(dice);    return (sub + adds);  }  /**   roll dice amount of sided dice and add adds (may be negative)   @param dice  number of die to roll   @param sided sides of die   @param adds  number to add   @return total   */  public static int roll(int dice, int sided, int adds) {    int num = 0;    int total = 0;    for (int i = 1; i <= dice; i++) {      num = (int) ((Math.random() * sided) + 1);      total += num;    }    total += adds;    return total;  }}//~ Formatted by Jindent --- http://www.jindent.com