/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer;import java.awt.Container;import java.awt.Rectangle;import java.io.File;import java.io.FilenameFilter;import javax.swing.DefaultListModel;import javax.swing.JFrame;import javax.swing.JList;import javax.swing.JScrollPane;/** @author maggot.iiss */public class FilteredListing {  /**   NOT USED   */  public static final String JT = "D:/Java/JTrav/src/jtrav";  static String path = null;  static String ext = "java";  //private static String path = JT;  private static String exte = "java";  private static String[] files;  private static JList<String> jlist1 = new JList<>();  private static Container contents;  /**   @param args used   */  public static void main(String[] args) {    files = getFilteredListing(path, ext);    //  this just displays results    JFrame af = new JFrame();    Rectangle r = new Rectangle(0, 100, 300, 500);    af.setBounds(r);    contents = af.getContentPane();    DefaultListModel<String> dlm = new DefaultListModel<>();    for (int i = 0; i < files.length; i++) {      dlm.add(i, files[i]);    }    jlist1 = new JList<>(dlm);    JScrollPane jsp = new JScrollPane(jlist1);    contents.add(jsp);    af.setContentPane(contents);    af.validate();    af.setVisible(true);    checkVars();  }  /**   default constructor   */  public FilteredListing() {    super();  }  /**   @return name of class   */  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }  private static void checkVars() {//    //System.out.print("BMP = " + GlobalVariables.BMP);    //System.out.print("path = " + path);    //System.out.print("ext = " + ext);  }  /**   @param path path of folder   @param ext  extension to filter   @return filtered files of type ext from folder path   */  public static String[] getFilteredListing(String path, final String ext) {    setPath(path);////System.out.print(path);    setExtension(ext);////System.out.print(ext);    files = listFiltered();////System.out.print(files);    return files;  }  private static void setPath(String apath) {    //throw new UnsupportedOperationException("Not yet implemented");    path = apath;  }  private static void setExtension(String aext) {    //throw new UnsupportedOperationException("Not yet implemented");    ext = aext;  }  /**   @return selected files of type name in folder dir   */  public static String[] listFiltered() {    final FilenameFilter aFilter = (File dir, String name) -> name.endsWith(ext);    File f = new File(path);    return f.list(aFilter);  }}