/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer.globals;import java.io.IOException;import java.nio.file.CopyOption;import java.nio.file.FileAlreadyExistsException;import java.nio.file.FileSystemLoopException;import java.nio.file.FileVisitResult;import java.nio.file.FileVisitor;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.StandardCopyOption;import java.nio.file.attribute.BasicFileAttributes;import java.nio.file.attribute.FileTime;/** A {@code FileVisitor} that copies a file-tree ("cp -r") */public class TreeCopier implements FileVisitor<Path> {  /**   where to start   */  public final Path source;  /**   where to send copy   */  public final Path target;  /**   yes/no   */  public final boolean prompt;  /**   yes/no   */  public final boolean preserve;  /**   <p>   @param source   to use   @param target   to search   @param prompt   to display   @param preserve yes/no   */  public TreeCopier(Path source, Path target, boolean prompt, boolean preserve) {    this.source = source;    this.target = target;    this.prompt = prompt;    this.preserve = preserve;  }  /**   <p>   @param dir   to search   @param attrs to check   @return FileVisitResult   */  @Override  public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {    // before visiting entries in a directory we copy the directory    // (okay if directory already exists).    CopyOption[] options = (preserve) ? new CopyOption[]{      StandardCopyOption.COPY_ATTRIBUTES} : new CopyOption[0];    Path newdir = target.resolve(source.relativize(dir));    try {      Files.copy(dir, newdir, options);    } catch (FileAlreadyExistsException x) {      // ignore    } catch (IOException x) {      System.err.format("Unable to create: %s: %s%n", newdir, x);      return FileVisitResult.SKIP_SUBTREE;    }    return FileVisitResult.CONTINUE;  }  /**   <p>   @param file  to search   @param attrs to find   @return FileVisitResult   */  @Override  public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {    Copy.copyFile(file, target.resolve(source.relativize(file)), prompt,      preserve);    return FileVisitResult.CONTINUE;  }  /**   <p>   @param dir to search   @param exc IOException   @return FileVisitResult   */  @Override  public FileVisitResult postVisitDirectory(Path dir, IOException exc) {    // fix up modification time of directory when done    if (exc == null && preserve) {      Path newdir = target.resolve(source.relativize(dir));      try {        FileTime time = Files.getLastModifiedTime(dir);        Files.setLastModifiedTime(newdir, time);      } catch (IOException x) {        System.err.format("Unable to copy all attributes to: %s: %s%n", newdir,          x);      }    }    return FileVisitResult.CONTINUE;  }  /**   <p>   @param file to check   @param exc  FileSystemLoopException   @return FileVisitResult   */  @Override  public FileVisitResult visitFileFailed(Path file, IOException exc) {    if (exc instanceof FileSystemLoopException) {      System.err.println("cycle detected: " + file);    } else {      System.err.format("Unable to copy: %s: %s%n", file, exc);    }    return FileVisitResult.CONTINUE;  }}