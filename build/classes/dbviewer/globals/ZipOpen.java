/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer.globals;/** @version 1.30 17 Aug 1998 @author Cay Horstmann */import dbviewer.ExtensionFileFilter;import java.awt.BorderLayout;import java.awt.Container;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStreamReader;import java.util.zip.ZipEntry;import java.util.zip.ZipInputStream;import javax.swing.JComboBox;import javax.swing.JFileChooser;import javax.swing.JFrame;import javax.swing.JMenu;import javax.swing.JMenuBar;import javax.swing.JMenuItem;import javax.swing.JScrollPane;import javax.swing.JTextArea;/** @author maggot */public class ZipOpen {  /**   @param args strings to start   */  public static void main(String[] args) {    //System.out.print("args" + " = " + args);//    if (args[0].length() > 0) {    ZipTestFrame frame = new ZipTestFrame();    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    frame.setVisible(true);//    }  }}/** A frame with a text area to show the contents of a file inside a zip archive, a combo box to select different files in the archive, and a menu to load a new archive. */class ZipTestFrame extends JFrame {  public ZipTestFrame() {    setTitle("ZipTest");    setSize(DEFAULT_WIDTH, DEFAULT_HEIGHT);    // add the menu and the Open and Exit menu items    JMenuBar menuBar = new JMenuBar();    JMenu menu = new JMenu("File");    JMenuItem openItem = new JMenuItem("Open");    menu.add(openItem);    openItem.addActionListener(new OpenAction());    JMenuItem exitItem = new JMenuItem("Exit");    menu.add(exitItem);    exitItem.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent event) {        System.exit(0);      }    });    menuBar.add(menu);    setJMenuBar(menuBar);    // add the text area and combo box    fileText = new JTextArea();    fileCombo = new JComboBox();    JScrollPane jsp = new JScrollPane(fileText);    fileCombo.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent event) {        loadZipFile((String) fileCombo.getSelectedItem());      }    });    Container contentPane = getContentPane();    contentPane.add(fileCombo, BorderLayout.SOUTH);    contentPane.add(jsp, BorderLayout.CENTER);  }  /**   This is the listener for the File-Open menu item.   */  private class OpenAction implements ActionListener {    @Override    public void actionPerformed(ActionEvent evt) {      // prompt the user for a zip file      ExtensionFileFilter filter = new ExtensionFileFilter();      filter.addExtension(".zip");      filter.addExtension(".jar");      filter.setDescription("ZIP archives");      JFileChooser chooser = dbviewer.DBViewer.jfc;      chooser.setFileFilter(filter);      chooser.setCurrentDirectory(new File(dbviewer.globals.GlobalVariables.CB));      chooser.setSelectedFile(new File("SkyRig.zip"));      //chooser.setFileFilter(filter);      int r = chooser.showOpenDialog(ZipTestFrame.this);      if (r == JFileChooser.APPROVE_OPTION) {        zipname = chooser.getSelectedFile().getPath();        scanZipFile();      }    }  }  /**   Scans the contents of the zip archive and populates the combo box.   */  @SuppressWarnings("unchecked")  public void scanZipFile() {    fileCombo.removeAllItems();    try {      try (ZipInputStream zin = new ZipInputStream(new FileInputStream(zipname))) {        ZipEntry entry;        while ((entry = zin.getNextEntry()) != null) {          fileCombo.addItem(entry.getName());          zin.closeEntry();        }      }    } catch (IOException e) {    }  }  /**   Loads a file from the zip archive into the text area   @param name the name of the file in the archive   */  public void loadZipFile(String name) {    try {      try (ZipInputStream zin = new ZipInputStream(new FileInputStream(zipname))) {        ZipEntry entry;        fileText.setText("");        // find entry with matching name in archive        while ((entry = zin.getNextEntry()) != null) {          if (entry.getName().equals(name)) {            try (BufferedReader in = new BufferedReader(new InputStreamReader(              zin))) {              String line;              while ((line = in.readLine()) != null) {                fileText.append(line);                fileText.append("\n");              }            }          }          zin.closeEntry();        }      }    } catch (IOException e) {    }  }  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }  public static final int DEFAULT_WIDTH = 400;  public static final int DEFAULT_HEIGHT = 300;  private JComboBox fileCombo;  private JTextArea fileText;  private String zipname;}