/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package panels;import dbviewer.Debug;import dbviewer.globals.GlobalMethods;import java.awt.Color;import java.awt.Component;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.io.Serializable;import javax.swing.JButton;import javax.swing.JComboBox;import javax.swing.JLabel;import javax.swing.JPanel;/** <p> @author maggot.iiss */@SuppressWarnings("serial")public class Panel4LabelComboButton extends Panel4 implements Serializable {  //<editor-fold defaultstate="collapsed" desc="variables">  /**   rownames   */  public String[] rownames = //<editor-fold defaultstate="collapsed" desc="comment">    {      "Test", "Tester", "Tested"    };  //</editor-fold>  /**   enab = enabled   */  public Boolean[] enab =//<editor-fold defaultstate="collapsed" desc="comment">new Boolean[]    {      true, false, false    };  //</editor-fold>  private String title = "Testing";  private int count = 0;  /**   jpan JPanel   */  @SuppressWarnings("PackageVisibleField")  public static JPanel jpan = new JPanel();  private int wid = 420;  private int hgt = 500;  private JLabel[] jl;  private JComboBox<String>[] jcb;  private JButton[] jb;//  private Frame4DBView f4dbv = null;//  private Frame4ReflectionView f4rv = null;//  private Frame4TextFileView f4tfv = null;//  private Panel4Title p4info = null;//  private Panel4DBButtons p4dbb = null;//  private Panel4LabelComboButton p4lcb = null;  //</editor-fold>  /**   <p>   @param args strings to start   */  public static void main(String[] args) {    jp = new Panel4LabelComboButton();//    jp = new Panel4LabelComboButton(400, 400, "Name", new String[]{"1", "2", "3", "4"}, new Boolean[]{true, true, true, true});    jf = new Frame4(jp);  }  /**   Panel4LabelComboButton   */  public Panel4LabelComboButton() {    this(400, 400, "Name", new String[]{"1", "2", "3", "4"}, new Boolean[]{true,      true, true, true});//    super();////    jpan = new JPanel();//    jp = jpan;//    GlobalMethods.autoColor(jpan, Color.black, Color.LIGHT_GRAY);  }  /**   <p>   @param wid      to setSize   @param hgt      to setSize   @param name     to setName()   @param rownames String[] of row names   @param enab     boolean   */  @SuppressWarnings("unchecked")  public Panel4LabelComboButton(int wid, int hgt, String name, String[] rownames,    Boolean[] enab) {//    this();    setName(name);    setSize(wid, hgt);    jpan.setLayout(new GridLayout(rownames.length, 3));    GlobalMethods.autoColor(jpan, Color.black, Color.LIGHT_GRAY);    jl = new JLabel[rownames.length];    jcb = new JComboBox[rownames.length];    count = rownames.length;    jb = new JButton[rownames.length];    for (int i = 0; i < rownames.length; i++) {      //----------------------------------      jl[i] = new JLabel();      jl[i].setText(rownames[i]);      jl[i].setName(rownames[i]);      jl[i].setToolTipText(rownames[i]);      jl[i].addMouseListener(new MouseListenerImpl());      jl[i].setVisible(true);      jpan.add(jl[i]).setVisible(true);      GlobalMethods.autoColor(jl[i], Color.black, Color.LIGHT_GRAY);      //----------------------------------      jcb[i] = new JComboBox();      jcb[i].setToolTipText(jl[i].getText());      jcb[i].setName(jl[i].getText());      jcb[i].setEditable(true);      jcb[i].addMouseListener(new MouseListenerImpl());//      jcb[i].addActionListener(new ActionListenerImpl());      jcb[i].addKeyListener(new KeyListenerImpl());      jpan.add(jcb[i]).setVisible(true);      GlobalMethods.autoColor(jcb[i], Color.black, Color.LIGHT_GRAY);      //----------------------------------      jb[i] = new JButton();//      jb[i].addActionListener(new ActionListenerImpl());      jb[i].setName(rownames[i]);      jb[i].setText(jl[i].getText());      jb[i].setToolTipText(jl[i].getText());      if (enab != null) {        jb[i].setEnabled(enab[i]);      } else {        jb[i].setEnabled(true);      }      jpan.add(jb[i]).setVisible(true);      GlobalMethods.autoColor(jb[i], Color.black, Color.LIGHT_GRAY);      //----------------------------------    }    add(jpan);    GlobalMethods.autoColor(jpan, Color.black, Color.LIGHT_GRAY);  }  int getRowCount() {    count = rownames.length;    return count;  }  void setRowCount(int num) {    count = rownames.length;    count = num;  }  /**   @return the jcb   */  public JComboBox<String>[] getJcb() {    return jcb;  }  /**   @param jcb the jcb to set   */  public void setJcb(JComboBox<String>[] jcb) {    this.jcb = jcb;  }  /**   @return the jpan   */  public static JPanel getJpan() {    return jpan;  }  /**   @param jpan the jpan to set   */  public void setJpan(JPanel jpan) {    Panel4LabelComboButton.jpan = jpan;  }  /**   <p>   @param compnum number of component   @return selected item in combo   */  public String getSelectedItemFromCombo(int compnum) {    JComboBox comp;    Component[] comps = getJpan().getComponents();    comp = (JComboBox) comps[compnum];    return comp.getSelectedItem().toString();  }  /**   <p>   @param compnum number of component   @param item    to search for   @return specific item from indicated combo by component number   */  public String getItemFromCombo(int compnum, int item) {    JComboBox comp;    Component[] comps = getJpan().getComponents();    comp = (JComboBox) comps[compnum];    return comp.getItemAt(item).toString();  }  /**   <p>   @param compnum component number   @return string array of items in selected combo   */  public String[] getItemsFromCombo(int compnum) {    String[] strings = null;    Component[] comps = getJpan().getComponents();    JComboBox jcbs = (JComboBox) comps[compnum];    if (jcbs.toString().contains("JComboBox")) {      count = jcbs.getItemCount();      strings = new String[count];      for (int j = 0; j < count; j++) {        Debug.debug(j + " = " + jcbs.getItemAt(j).toString());        strings[j] = jcbs.getItemAt(j).toString();      }    }    return strings;  }  /**   <p>   @param i       number of Combo   @param ranknum numberr of rank to select   @return selection in specified ComboBox   */  public String setSelectedInCombo(int i, int ranknum) {    JComboBox comp;    Component[] comps = getJpan().getComponents();    comp = (JComboBox) comps[i];    comp.setSelectedIndex(ranknum);    return comp.getSelectedItem().toString();  }  /**   <p>   @return name of class   */  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }  //<editor-fold defaultstate="collapsed" desc="old ActionListenerImpl">  //  private static class ActionListenerImpl implements ActionListener {  //  //    public ActionListenerImpl() {  //    }  //  //    @Override  //    public void actionPerformed(ActionEvent e) {  //      Debug.debug("public ActionListenerImpl().actionPerformed(ActionEvent e)");  //      Debug.debug("e = " + e);  //      Debug.debug("e.getActionCommand() = " + e.getActionCommand());  //      Debug.debug("e.paramString() = " + e.paramString());  //      Debug.debug("e.toString() = " + e.toString());  //      Debug.debug("e.getClass().getSimpleName() = " + e.getClass().getSimpleName());  //    }  //  }  //</editor-fold>  private static class MouseListenerImpl implements MouseListener {    public MouseListenerImpl() {    }    @Override    public void mouseClicked(MouseEvent e) {    }    @Override    public void mousePressed(MouseEvent e) {    }    @Override    public void mouseReleased(MouseEvent e) {    }    @Override    public void mouseEntered(MouseEvent e) {    }    @Override    public void mouseExited(MouseEvent e) {    }  }  private static class KeyListenerImpl implements KeyListener {    public KeyListenerImpl() {    }    @Override    public void keyTyped(KeyEvent e) {    }    @Override    public void keyPressed(KeyEvent e) {      //<editor-fold defaultstate="collapsed" desc="DEBUG">      boolean DEBUG = false;   //   collapsed or opened      if (DEBUG) {    // true OR false;        Debug.debug("==================");        //System.out.print("\t");        //System.out.print("==================");        //System.out.print("e.paramString() = " + e.paramString());        //System.out.print("e.toString() = " + e.toString());        //System.out.print("==================");      }      //</editor-fold>    }    @Override    public void keyReleased(KeyEvent e) {      //<editor-fold defaultstate="collapsed" desc="DEBUG">      boolean DEBUG = false;   //   collapsed or opened      if (DEBUG) {    // true OR false;        Debug.debug("==================");        //System.out.print("\t");        //System.out.print("==================");        //System.out.print("e.paramString() = " + e.paramString());        //System.out.print("e.toString() = " + e.toString());        //System.out.print("==================");      }      //</editor-fold>    }  }  private static class ComboSelector implements ActionListener {    public ComboSelector() {    }    @Override    public void actionPerformed(ActionEvent arg0) {      Debug.debug("ComboSelector actionPerformed(ActionEvent arg0)");    }  }}