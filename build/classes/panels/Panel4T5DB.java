/*
 To change this license header, choose License Headers in Project Properties.
 To change this template file, choose Tools | Templates
 and open the template in the editor.
 */
package panels;

import dbviewer.globals.GlobalMethods;
import static dbviewer.globals.GlobalVariables.CRLF;
import static dbviewer.globals.GlobalVariables.CSV;
import static dbviewer.globals.GlobalVariables.FS;
import static dbviewer.globals.GlobalVariables.T5;
import java.awt.event.MouseEvent;
import java.io.File;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 <p>
 @author maggot
 */
public class Panel4T5DB extends Panel4 {

  private static String[] lines;
  private static String line;
  private static String[] bits;
  private static int start = 0, end = 0;
  private static String titles;
  private static int dash = 0;
  private static int[] pos;
  private static JFrame jf;
  private static Panel4 jp;
  private static String[] newsys;
  private static String s;
  static String[] uwpsys;
  private static String[] uwpsub;
  private final String[] newsub;
  private static String[] uwpsec;
  private static String[] uwp;
  private static MouseEvent me;
  private static String file;
  private final String[] newsec;

  /**
   <p>
   @param string strings to start
   */
  public static void main(String[] string) {
    jp = new Panel4T5DB();
    jf = new Frame4(jp);
    jp.showThis();
  }

  /**
   Creates new form Panel4T5DB
   */
  public Panel4T5DB() {
    uwpsys = new String[]{
      "Name", "Location", "SDAHPGLT", "Base", "Remarks",
      "Zone", "Gas", "Sector", "Subsector", "Subsectorn",
      "{Ix}", "(Ex)", "[Cx]", "Algn", "Pbg",
      "N", "W", "STAR1", "STAR2", "STAR3",
      "STAR4", "", "", ""
    };
    newsys = new String[]{
      "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "",
      "", "", "", ""};
    uwpsub = new String[]{"Subsectorn", "Sector", "Subsector", "Notes"};
    newsub = new String[]{"", "", "", ""};
    uwpsec = new String[]{"Sector", "Code", "X", "Y", "Factions",
      "Display Name", "Tapestry", "Systems", "Pop", "Notes"};
    newsec = new String[]{"", "", "", "", "", "", "", "", "", ""};
    uwp = new String[]{};
    initComponents();
    setCombo();
    jLabel1.setText(T5 + FS + "Spinward Marches" + ".sec");
  }

  /**
   This method is called from within the constructor to initialize the form.
   WARNING: Do NOT modify this code. The content of this method is always
   regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jComboBox1 = new javax.swing.JComboBox();
    jScrollPane2 = new javax.swing.JScrollPane();
    jta = new javax.swing.JTextArea();
    jLabel1 = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jtb = new javax.swing.JTextArea();
    jComboBox2 = new javax.swing.JComboBox();

    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "sec", "sub", "sys", "showNewBits", "showOldBits", "showPositions", "getMinMaxXY" }));
    jComboBox1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jComboBox1ActionPerformed(evt);
      }
    });

    jta.setColumns(20);
    jta.setRows(5);
    jta.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jtaMouseClicked(evt);
      }
    });
    jScrollPane2.setViewportView(jta);

    jLabel1.setForeground(java.awt.Color.green);
    jLabel1.setText("jLabel1");
    jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jLabel1MouseClicked(evt);
      }
    });

    jtb.setColumns(15);
    jtb.setRows(5);
    jtb.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jtbMouseClicked(evt);
      }
    });
    jScrollPane1.setViewportView(jtb);

    jComboBox2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jComboBox2ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane2)
          .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(0, 0, 0)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane1)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel1)
          .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(0, 0, 0)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 702, Short.MAX_VALUE)
          .addComponent(jScrollPane1)))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
    jta.setText("");
    switch (jComboBox1.getSelectedItem().toString()) {
//      case "secSave": {
//        secSave();
//        //showSectors();
//        break;
//      }
//      case "subSave": {
//        subSave();
//        break;
//      }
//      case "sysSave": {
//        //fixDB();
//        sysSave();
//        break;
//      }
      case "sec": {
        //showSectors();
        sec();
        break;
      }
      case "sub": {
        sub();
        break;
      }
      case "sys": {
        //fixDB();
        sys();
        break;
      }
      case "getMinMaxXY": {
        getMinMaxXY();
        break;
      }
      case "showNewBits": {
        showNewBits();
        break;
      }
      case "showOldBits": {
        showOldBits();
        break;
      }
      case "showPositions": {
        showPositions();
        break;
      }
      default: {
        JOptionPane.showMessageDialog(this, jComboBox1.getSelectedItem()
          .toString() + " = NOT YET!");
      }
    }
  }//GEN-LAST:event_jComboBox1ActionPerformed

  private void jtaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtaMouseClicked
    if (evt.getClickCount() > 2) {
      jta.setText("");
    }
  }//GEN-LAST:event_jtaMouseClicked

  private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
    loadSectorFile(new File(jLabel1.getText()));
  }//GEN-LAST:event_jLabel1MouseClicked

  private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
    jLabel1.setText(T5 + FS + jComboBox2.getSelectedItem().toString());
    jta.setText("");
    jLabel1MouseClicked(me);
//    fixDB();
  }//GEN-LAST:event_jComboBox2ActionPerformed

  private void jtbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbMouseClicked
    if (evt.getClickCount() > 2) {
      jtb.setText("");
    }
  }//GEN-LAST:event_jtbMouseClicked

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox jComboBox1;
  private static javax.swing.JComboBox jComboBox2;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JTextArea jta;
  private javax.swing.JTextArea jtb;
  // End of variables declaration//GEN-END:variables

  @SuppressWarnings("unchecked")
  private static void setCombo() {
    File f = new File(T5);
    String[] files = f.list();
    for (String file1 : files) {
      if (file1.endsWith(".sec")) {
        jComboBox2.addItem(file1);
      }
    }
//    jComboBox2.setSelectedItem("Spinward Marches.sec");
  }

  private void fixDB() {
    //jtb.setText("");
    showPositions();
    calcWorlds();
  }

  private void getMinMaxXY() {
    lines = GlobalMethods.loadTextFile(T5 + "/Names.txt").split(CRLF);
    int x = 0, y = 0, X = 0, Y = 0, tx = 0, ty = 0, tX = 0, tY = 0;
    for (int k = 0; k < lines.length; k++) {
      if (lines[k].startsWith("#")) {
        //jTextArea1.append(lines[k] + CRLF);
        String[] bits = lines[k].split(",");
        tx = Integer.parseInt(bits[1]);
        if (tx < x) {
          x = tx;
        }
        ty = Integer.parseInt(bits[2]);
        if (ty < y) {
          y = ty;
        }
        tX = Integer.parseInt(bits[1]);
        if (tX > X) {
          X = tX;
        }
        tY = Integer.parseInt(bits[2]);
        if (tY > Y) {
          Y = tY;
        }
      }
    }
    jtb.append("x" + " = " + x);
    jtb.append("  X" + " = " + X + CRLF);
    jtb.append("y" + " = " + y);
    jtb.append("  Y" + " = " + Y + CRLF);

  }

  private void showPositions() {
    jta.append("\t" + jLabel1.getText() + CRLF);
    lines = GlobalMethods.loadTextFile(jLabel1.getText()).split(CRLF);
    for (int i = 0; i < lines.length; i++) {
      start = 0;
      end = 0;
//      //jta.append(data[i] + CRLF);
      if (lines[i].startsWith("---- ")) {
        dash = i;
        bits = lines[i].split(" ");
        pos = new int[bits.length];
        titles = lines[i - 1];
        s = "";
        for (int j = 0; j < bits.length; j++) {
          if (j + 1 != bits.length) {
            s += bits[j] + " ";
            end = start + bits[j].length() + 1;
//            //jta.append(bits[j] + " ");
          } else {
            s += bits[j];
            end = start + bits[j].length();
//            //jta.append(bits[j]);
          }
          jta.append(start + "-" + end + " = " + s.substring(start, end).trim()
            + " = " + titles.substring(start, end).trim() + CRLF);
//          //jta.append(s.substring(start, end) + " ");
          pos[j] = start;
          start += bits[j].length() + 1;
        }
        jta.append(CRLF + titles + CRLF);
        jta.append(s + " = " + s.length() + CRLF);
        break;
      }
    }
    //showNewBits();
  }

  private void showOldBits() {
    jta.append("\t" + CSV + "uwp-worlds" + CRLF);
    for (int i = 0; i < uwpsys.length; i++) {
      jta.append("" + i + " = " + uwpsys[i] + CRLF);
    }
    jta.append(CRLF);

  }

  private void showNewBits() {
    showPositions();
    splitLines();
  }

  private void splitLine(String s) {
    for (int i = 0; i < pos.length; i++) {
      jta.append("\"" + s.substring(pos[i], pos[i] + bits[i].length()).trim()
        + "\"");
      if (i < pos.length - 1) {
        jta.append(",");
      }
    }
    jta.append(CRLF);
  }

  private void splitLines() {
    for (int i = dash + 1; i < lines.length; i++) {
      splitLine(lines[i]);
    }
  }

  private String getSubLet(String string) {
    String xy[] = {string.substring(0, 2), string.substring(2)};
    int x, y;
    x = Integer.parseInt(xy[0]);
    y = Integer.parseInt(xy[1]);
    String let = "";
    if (y < 11) {//A,B,C,D
      if (x < 9) {
        let = "A";
      } else if (x > 8 & x < 17) {
        let = "B";
      } else if (x > 16 & x < 25) {
        let = "C";
      } else if (x > 24 & x < 33) {
        let = "D";
      }
    }
    if (y > 10 & y < 21) {//E,F,G,H
      if (x < 9) {
        let = "E";
      } else if (x > 8 & x < 17) {
        let = "F";
      } else if (x > 16 & x < 25) {
        let = "G";
      } else if (x > 24 & x < 33) {
        let = "H";
      }
    } else if (y > 20 & y < 31) {//I,J,K,L
      if (x < 9) {
        let = "I";
      } else if (x > 8 & x < 17) {
        let = "J";
      } else if (x > 16 & x < 25) {
        let = "K";
      } else if (x > 24 & x < 33) {
        let = "L";
      }
    } else if (y > 30 & y < 41) {//M,N,O,P
      if (x < 9) {
        let = "M";
      } else if (x > 8 & x < 17) {
        let = "N";
      } else if (x > 16 & x < 25) {
        let = "O";
      } else if (x > 24 & x < 33) {
        let = "P";
      }
    }
    return let;
  }

  private String getSubSecName(String string, int j) {
    String ret = "Unnamed";
    for (int i = 0; i < dash; i++) {
      if (lines[i].contains("Subsector " + string)) {
        ret = lines[i].substring(14);
      }
    }
    return ret;
  }

  private void loadSectorFile(File file) {
    lines = GlobalMethods.getLinesFromFile(file);
    showSectorFile();
  }

  private void showSectorFile() {
    for (int i = 0; i < lines.length; i++) {
      jta.append("" + lines[i] + CRLF);
    }
  }

  private String getBit(int world, int part) {
    String[] bit = new String[]{
      lines[world].substring(5, 25),//Name//
      lines[world].substring(0, 5),//Location//
      lines[world].substring(25, 36),//UWP//
      lines[world].substring(92, 94),//Base//
      lines[world].substring(36, 56),//Remarks//
      lines[world].substring(0, 4),//Zone//
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4),////
      lines[world].substring(0, 4)////
    };
    return bit[part];
  }

  private void sec() {
    jta.setText("");
    jtb.setText("");
    File f = new File(T5);
    String[] allfiles = f.list();
    String secfiles = "";
    String[] allsec;
    String linextra = ",\"\"";
    for (int i = 0; i < allfiles.length; i++) {
      if (allfiles[i].endsWith(".sec")) {
        secfiles += "\"" + (allfiles[i].substring(0, allfiles[i].length() - 4)
          + "\"");
        for (int j = 1; j < uwpsec.length; j++) {
          secfiles += linextra;
        }
        secfiles += CRLF;
      }
    }
    for (int i = 0; i < uwpsec.length; i++) {
      jtb.append("\"" + uwpsec[i] + "\"");
      if (i < uwpsec.length - 1) {
        jtb.append(",");
      }
    }
    jtb.append(CRLF);
    allsec = secfiles.split(CRLF);
    for (String allsec1 : allsec) {
      bits = allsec1.split(",");
      //<editor-fold defaultstate="collapsed" desc="parts">
      for (int part = 0; part < bits.length; part++) {
        switch (part) {
          case 0: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 1: {
            bits[part] = "\"" + getBit(dash, 0).trim().substring(0, 4)
              .toUpperCase() + "\"";
            break;
          }
          case 2: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 3: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 4: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 5: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 6: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 7: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 8: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 9: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 10: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 11: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 12: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 13: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 14: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 15: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 16: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 17: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 18: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 19: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 20: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 21: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 22: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
          case 23: {
            bits[part] = "\"" + getBit(dash, part).trim() + "\"";
            break;
          }
        }
        //</editor-fold>
        jtb.append(allsec1 + CRLF);
      }
    }
    GlobalMethods.saveTextFile(T5, "uwp-sector", "", jtb.getText());
  }

  private void sub() {
    jta.setText("");
    jtb.setText("");
    for (int i = 0; i < jComboBox2.getItemCount(); i++) {//10; i++) {//
      jComboBox2.setSelectedIndex(i);
      calcSubs();
    }
    //GlobalMethods.saveTextFile(T5, "uwp-subsec", "", jtb.getText());
  }

  private void calcSubs() {
    File f = new File(jLabel1.getText());
  }

  private void sys() {
    jta.setText("");
    jtb.setText("");
    for (int i = 0; i < jComboBox2.getItemCount(); i++) {//10; i++) {//
      jComboBox2.setSelectedIndex(i);
      calcWorlds();
    }
  }

  private void calcWorlds() {
//    jtb.setText("");
//    for (int i = 0; i < uwpsys.length; i++) {
//      jtb.append("\"" + uwpsys[i].trim() + "\"");
//      if (i + 1 < uwpsys.length) {
//        jtb.append(",\t");
//      }
//    }
//    jtb.append(CRLF);
    try {
      String[] tmp = newsys;
      s = lines[dash + 1];
      for (int j = dash + 1; j < lines.length; j++) {
        for (int i = 0; i < tmp.length; i++) {
          //<editor-fold defaultstate="collapsed" desc="switch (i)">
          switch (i) {
            case 0: {//Name
              tmp[i] = lines[j].substring(bits[0].length(), bits[1].length());
              break;
            }
            case 1: {//Location
              tmp[i] = lines[j].substring(0, bits[0].length());
              break;
            }
            case 2: {//SDAHPGLT
              tmp[i] = lines[j].substring(pos[2], pos[2] + bits[2].length());
              break;
            }
            case 3: {//Base
              tmp[i] = lines[j].substring(pos[8], pos[8] + bits[8].length());
              break;
            }
            case 4: {//Remarks
              tmp[i] = lines[j].substring(pos[3], pos[3] + bits[3].length());
              break;
            }
            case 5: {//Zone
              tmp[i] = lines[j].substring(pos[9], pos[9] + bits[9].length());
              break;
            }
            case 6: {//Gas
              tmp[i] = "-";//lines[j].substring(pos[10], pos[10] + bits[10].length());
              ////System.out.println("\t" + " = " + lines[j].substring(pos[10] + 2, pos[10] + 3).equals("0"));
              if (!lines[j].substring(pos[10] + 2, pos[10] + 3).equals("0")) {
                tmp[i] = "G";
              }
              break;
            }
            case 7: {//Sector
              tmp[i] = lines[3].substring(2);
              break;
            }
            case 8: {//Subsector
              tmp[i] = getSubLet(tmp[1]);
              break;
            }
            case 9: {//Subsectorn
              tmp[i] = getSubSecName(getSubLet(tmp[1]), j);
              break;
            }
            case 10: {//{Ix}
              tmp[i] = lines[j].substring(pos[4], pos[4] + bits[4].length());
              break;
            }
            case 11: {//(Ex)
              tmp[i] = lines[j].substring(pos[5], pos[5] + bits[5].length());
              break;
            }
            case 12: {// [Cx]
              tmp[i] = tmp[i] = lines[j].substring(pos[6], pos[6] + bits[6]
                .length());

              break;
            }
            case 13: {//Algn
              tmp[i] = lines[j].substring(pos[12], pos[12] + bits[12].length());
              break;
            }
            case 14: {//Pbg
              tmp[i] = lines[j].substring(pos[10], pos[10] + bits[10].length());
              break;
            }
            case 15: {//N
              tmp[i] = lines[j].substring(pos[7], pos[7] + bits[7].length());
              break;
            }
            case 16: {//W
              tmp[i] = lines[j].substring(pos[11], pos[11] + bits[11].length());
              break;
            }
            case 17: {//STAR1
              tmp[i] = "";
              break;
            }
            case 18: {//STAR2
              tmp[i] = "";
              break;
            }
            case 19: {//STAR3
              tmp[i] = "";
              break;
            }
            case 20: {//STAR4
              tmp[i] = "";
              break;
            }
            case 21: {//
              tmp[i] = "";
              break;
            }
            case 22: {//
              tmp[i] = "";
              break;
            }
            case 23: {//
              tmp[i] = "";
              break;
            }
          }
          //</editor-fold>
          jtb.append("\"" + tmp[i].trim() + "\"");
          if (i + 1 < tmp.length) {
            jtb.append(",");
          }
        }
        jtb.append(CRLF);
        System.out.println("j" + " = " + j + " = " + jComboBox2
          .getSelectedItem().toString());
      }
    } catch (Exception e) {
    }
    System.out.println("END");
  }

}
