/*

 Copyright (C) 2014 Mark Ferguson



 This program is free software: you can redistribute it and/or modify

 it under the terms of the GNU General Public License as published by

 the Free Software Foundation, either version 3 of the License, or

 (at your option) any later version.



 This program is distributed in the hope that it will be useful,

 but WITHOUT ANY WARRANTY; without even the implied warranty of

 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 GNU General Public License for more details.



 You should have received a copy of the GNU General Public License

 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 */
package panels;

import dbviewer.globals.GlobalMethods;
import static dbviewer.globals.GlobalVariables.CRLF;
import java.awt.event.MouseEvent;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 <p>
 @author Mark Ferguson maggot.iiss@sky.com
 */
public class Panel4T5GunMaker extends javax.swing.JPanel {

  private static int wid = 200, hgt = 600;
  private static MouseEvent me;
  private static int tl;
  private static int btl;
  private static DefaultComboBoxModel<String> subtypemodel;
  private static DefaultComboBoxModel<String> descriptormodel;
  private static int type;
  private static int subtype;
  private static int descriptor;
  private static int burden;
  private static int stage;
  private static int user;

  /**
   <p>
   @param args strings to start
   */
  public static void main(String[] args) {
    JPanel jp = new Panel4T5GunMaker();
    JFrame jf = new Frame4(jp);
  }

  /**
   Creates new form Panel4GunMaker
   */
  public Panel4T5GunMaker() {
    initComponents();
    TypeMouseClicked(me);
  }

  /**
   This method is called from within the constructor to initialize the form.
   WARNING: Do NOT modify this code. The content of this method is always
   regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    Type = new javax.swing.JComboBox();
    SubType = new javax.swing.JComboBox();
    Descriptor = new javax.swing.JComboBox();
    Burden = new javax.swing.JComboBox();
    Stage = new javax.swing.JComboBox();
    User = new javax.swing.JComboBox();
    jPanel8 = new javax.swing.JPanel();
    randomBurden = new javax.swing.JLabel();
    randomStage = new javax.swing.JLabel();
    randomSubType = new javax.swing.JLabel();
    randomType = new javax.swing.JLabel();
    randomUser = new javax.swing.JLabel();
    randomDescriptor = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jta = new javax.swing.JTextArea();
    jPanel1 = new javax.swing.JPanel();
    labTL = new javax.swing.JLabel();
    TL = new javax.swing.JLabel();

    setOpaque(false);

    Type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gun", "Rifle", "Pistol", "Shotgun", "Machinegun", "Launcher", "Projector", "Designator" }));
    Type.setToolTipText("Type");
    Type.setName("Type"); // NOI18N
    Type.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        TypeMouseClicked(evt);
      }
    });

    SubType.setToolTipText("Subtype");
    SubType.setName("SubType"); // NOI18N
    SubType.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        SubTypeMouseClicked(evt);
      }
    });

    Descriptor.setToolTipText("Descriptor");
    Descriptor.setName("Descriptor"); // NOI18N
    Descriptor.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        DescriptorMouseClicked(evt);
      }
    });

    Burden.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Recoilless", "VRF", "Anti-Designator", "Disposable", "Heavy", "Light", "", "Medium", "Snub", "VHeavy", "VLight", "Body", "Magnum" }));
    Burden.setToolTipText("Burden");
    Burden.setName("Burden"); // NOI18N
    Burden.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        BurdenMouseClicked(evt);
      }
    });

    Stage.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Precision", "Remote", "Experimental", "Prototype", "Early", "Basic", " ", "Standard", "Modified", "Improved", "Advanced", "Alternate", "Obsolete", "Sniper", "Target", "Ultimate" }));
    Stage.setToolTipText("Stage");
    Stage.setName("Stage"); // NOI18N
    Stage.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        StageMouseClicked(evt);
      }
    });

    User.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Human", "Vargr", "Aslan", "K`kree", "Hiver", "Droyne", "/Gripper", "Vegan", "/Universal" }));
    User.setToolTipText("User");
    User.setName("User"); // NOI18N
    User.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        UserMouseClicked(evt);
      }
    });

    jPanel8.setOpaque(false);

    randomBurden.setForeground(java.awt.Color.green);
    randomBurden.setText("R");
    randomBurden.setToolTipText("Click to randomize right & below");
    randomBurden.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        randomBurdenMouseClicked(evt);
      }
    });

    randomStage.setForeground(java.awt.Color.green);
    randomStage.setText("R");
    randomStage.setToolTipText("Click to randomize right & below");
    randomStage.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        randomStageMouseClicked(evt);
      }
    });

    randomSubType.setForeground(java.awt.Color.green);
    randomSubType.setText("R");
    randomSubType.setToolTipText("Click to randomize right & below");
    randomSubType.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        randomSubTypeMouseClicked(evt);
      }
    });

    randomType.setForeground(java.awt.Color.green);
    randomType.setText("R");
    randomType.setToolTipText("Click to randomize right & below");
    randomType.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        randomTypeMouseClicked(evt);
      }
    });

    randomUser.setForeground(java.awt.Color.green);
    randomUser.setText("R");
    randomUser.setToolTipText("Click to randomize right & below");
    randomUser.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        randomUserMouseClicked(evt);
      }
    });

    randomDescriptor.setForeground(java.awt.Color.green);
    randomDescriptor.setText("R");
    randomDescriptor.setToolTipText("Click to randomize right & below");
    randomDescriptor.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        randomDescriptorMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
    jPanel8.setLayout(jPanel8Layout);
    jPanel8Layout.setHorizontalGroup(
      jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel8Layout.createSequentialGroup()
        .addGap(0, 0, 0)
        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(randomDescriptor, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(randomBurden)
            .addComponent(randomStage)
            .addComponent(randomType, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(randomSubType, javax.swing.GroupLayout.Alignment.TRAILING))
          .addComponent(randomUser))
        .addGap(0, 0, 0))
    );

    jPanel8Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {randomBurden, randomDescriptor, randomStage, randomSubType, randomType});

    jPanel8Layout.setVerticalGroup(
      jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel8Layout.createSequentialGroup()
        .addGap(6, 6, 6)
        .addComponent(randomType)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(randomSubType)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(randomDescriptor)
        .addGap(6, 6, 6)
        .addComponent(randomBurden)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(randomStage)
        .addGap(18, 18, 18)
        .addComponent(randomUser))
    );

    jPanel8Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {randomBurden, randomDescriptor, randomStage, randomSubType, randomType});

    jta.setColumns(20);
    jta.setRows(5);
    jta.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jtaMouseClicked(evt);
      }
    });
    jScrollPane1.setViewportView(jta);

    jPanel1.setOpaque(false);

    labTL.setForeground(java.awt.Color.green);
    labTL.setText("Min TL");
    labTL.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        labTLMouseClicked(evt);
      }
    });

    TL.setForeground(java.awt.Color.green);
    TL.setText("0");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGap(1, 1, 1)
        .addComponent(labTL)
        .addGap(18, 18, 18)
        .addComponent(TL)
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGap(0, 0, 0)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(labTL)
          .addComponent(TL))
        .addGap(0, 0, 0))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(User, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(Burden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(Descriptor, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(Stage, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(Type, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(SubType, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
          .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(0, 0, Short.MAX_VALUE))
      .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
    );

    layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Burden, Descriptor, Stage, SubType, Type, User});

    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(layout.createSequentialGroup()
            .addComponent(Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, 0)
            .addComponent(SubType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, 0)
            .addComponent(Descriptor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, 0)
            .addComponent(Burden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, 0)
            .addComponent(Stage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(6, 6, 6)
            .addComponent(User, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE))
    );

    layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Burden, Descriptor, Stage, SubType, Type, User});

  }// </editor-fold>//GEN-END:initComponents

  private void randomTypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_randomTypeMouseClicked
    jta.setText("");
    jta.append(GlobalMethods.comment("=", 20));
    type = (int) (Math.random() * Type.getModel().getSize());
    TypeMouseClicked(evt);
    Type.setSelectedIndex(type);
  }//GEN-LAST:event_randomTypeMouseClicked

  @SuppressWarnings("unchecked")
  private void TypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TypeMouseClicked
    subtypemodel = new DefaultComboBoxModel<>();
    switch (Type.getSelectedItem().toString()) {
      case "Projector": {//
        subtypemodel.addElement("Projector");
        subtypemodel.addElement("Projector");
        subtypemodel.addElement("Projector");
        subtypemodel.addElement("Projector");
        subtypemodel.addElement("Projector");
        subtypemodel.addElement("Projector");
        subtypemodel.addElement("Projector");
        subtypemodel.addElement("Projector");
        subtypemodel.addElement("Projector");
        subtypemodel.addElement("Projector");
        subtypemodel.addElement("Projector");
        break;
      }
      case "Gun": {//
        subtypemodel.addElement("Gun");
        subtypemodel.addElement("Gun");
        subtypemodel.addElement("Gatling");
        subtypemodel.addElement("Cannon");
        subtypemodel.addElement("Cannon");
        subtypemodel.addElement("AutoCannon");
        break;
      }
      case "Rifle": {//
        subtypemodel.addElement("Carbine");
        subtypemodel.addElement("Carbine");
        subtypemodel.addElement("Carbine");
        subtypemodel.addElement("Rifle");
        subtypemodel.addElement("Rifle");
        subtypemodel.addElement("Rifle");
        subtypemodel.addElement("Rifle");
        subtypemodel.addElement("Rifle");
        subtypemodel.addElement("Carbine");
        subtypemodel.addElement("Carbine");
        subtypemodel.addElement("Carbine");
        break;
      }
      case "Pistol": {//
        subtypemodel.addElement("Revolver");
        subtypemodel.addElement("Pistol");
        subtypemodel.addElement("Pistol");
        subtypemodel.addElement("Pistol");
        subtypemodel.addElement("Pistol");
        subtypemodel.addElement("Revolver");
        break;
      }
      case "Shotgun": {//
        subtypemodel.addElement("Shotgun");
        subtypemodel.addElement("Shotgun");
        subtypemodel.addElement("Shotgun");
        subtypemodel.addElement("Shotgun");
        subtypemodel.addElement("Shotgun");
        subtypemodel.addElement("Shotgun");
        break;
      }
      case "Machinegun": {//
        subtypemodel.addElement("Machinegun");
        subtypemodel.addElement("Machinegun");
        subtypemodel.addElement("Machinegun");
        subtypemodel.addElement("Machinegun");
        subtypemodel.addElement("Machinegun");
        subtypemodel.addElement("Machinegun");
        break;
      }
      case "Launcher": {//
        subtypemodel.addElement("Launcher");
        subtypemodel.addElement("Launcher");
        subtypemodel.addElement("Launcher");
        subtypemodel.addElement("Multi-Launcher");
        subtypemodel.addElement("Multi-Launcher");
        subtypemodel.addElement("Multi-Launcher");
        break;
      }
      case "Designator": {//
        subtypemodel.addElement("Designator");
        subtypemodel.addElement("Designator");
        subtypemodel.addElement("Designator");
        subtypemodel.addElement("Designator");
        subtypemodel.addElement("Designator");
        subtypemodel.addElement("Designator");
        subtypemodel.addElement("Designator");
        subtypemodel.addElement("Designator");
        subtypemodel.addElement("Designator");
        subtypemodel.addElement("Designator");
        subtypemodel.addElement("Designator");
        break;
      }
    }
    SubType.setModel(subtypemodel);
    subtype = (int) (Math.random() * SubType.getModel().getSize());
    if (subtypemodel.getSize() == 6) {
      subtype = GlobalMethods.roll1d();
      SubType.setSelectedIndex(subtype - 1);
    } else {
      subtype = GlobalMethods.roll2d();
      SubType.setSelectedIndex(subtype - 2);
    }
    SubTypeMouseClicked(evt);
    fillDetails(Type);
  }//GEN-LAST:event_TypeMouseClicked

  @SuppressWarnings("unchecked")
  private void SubTypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SubTypeMouseClicked
    descriptormodel = new DefaultComboBoxModel<>();
    switch (Type.getSelectedItem().toString()) {
      case "Gun": {
        descriptormodel.addElement("Anti-Flyer");
        descriptormodel.addElement("Anti-Tank");
        descriptormodel.addElement("Assault");
        descriptormodel.addElement("Fusion");
        descriptormodel.addElement("Gauss");
        descriptormodel.addElement("Plasma");
        break;
      }
      case "Rifle": {
        descriptormodel.addElement("");
        descriptormodel.addElement("Accelerator");
        descriptormodel.addElement("Assault");
        descriptormodel.addElement("Battle");
        descriptormodel.addElement("Combat");
        descriptormodel.addElement("(Poison) Dart");
        descriptormodel.addElement("Gauss");
        descriptormodel.addElement("Hunting");
        descriptormodel.addElement("Laser");
        descriptormodel.addElement("Splat");
        descriptormodel.addElement("Survival");
        break;
      }
      case "Pistol": {
        descriptormodel.addElement("");
        descriptormodel.addElement("Accelerator");
        descriptormodel.addElement("Laser");
        descriptormodel.addElement("Machine");
        descriptormodel.addElement("");
        descriptormodel.addElement("");
        break;
      }
      case "Shotgun": {
        descriptormodel.addElement("");
        descriptormodel.addElement("Assault");
        descriptormodel.addElement("Hunting");
        descriptormodel.addElement("Hunting");
        descriptormodel.addElement("Assault");
        descriptormodel.addElement("");
        break;
      }
      case "Machinegun": {
        descriptormodel.addElement("");
        descriptormodel.addElement("Anti-Flyer");
        descriptormodel.addElement("Assault");
        descriptormodel.addElement("Sub");
        descriptormodel.addElement("Sub");
        descriptormodel.addElement("");
        break;
      }
      case "Launcher": {
        descriptormodel.addElement("AT Missile");
        descriptormodel.addElement("AF Missile");
        descriptormodel.addElement("Grenade");
        descriptormodel.addElement("RAM Grenade");
        descriptormodel.addElement("Missile");
        descriptormodel.addElement("Rocket");
        break;
      }
      case "Projector": {
        descriptormodel.addElement("Poison Gas");
        descriptormodel.addElement("EMP or Rad");
        descriptormodel.addElement("Fire");
        descriptormodel.addElement("Flash");
        descriptormodel.addElement("Freeze");
        descriptormodel.addElement("Grav or Laser");
        descriptormodel.addElement("Mag");
        descriptormodel.addElement("Psi Amp");
        descriptormodel.addElement("Acid or Shock");
        descriptormodel.addElement("Sonic");
        descriptormodel.addElement("Stench");
        break;
      }
      case "Designator": {
        descriptormodel.addElement("Poison Gas");
        descriptormodel.addElement("EMP or Rad");
        descriptormodel.addElement("Fire");
        descriptormodel.addElement("Flash");
        descriptormodel.addElement("Freeze");
        descriptormodel.addElement("Grav or Laser");
        descriptormodel.addElement("Mag");
        descriptormodel.addElement("Psi Amp");
        descriptormodel.addElement("Acid or Shock");
        descriptormodel.addElement("Sonic");
        descriptormodel.addElement("Stench");
        break;
      }
    }
    Descriptor.setModel(descriptormodel);
    if (descriptormodel.getSize() == 6) {
      descriptor = GlobalMethods.roll1d();
      Descriptor.setSelectedIndex(descriptor - 1);
    } else {
      descriptor = GlobalMethods.roll2d();
      Descriptor.setSelectedIndex(descriptor - 2);
    }
    DescriptorMouseClicked(evt);
    fillDetails(SubType);
  }//GEN-LAST:event_SubTypeMouseClicked

  @SuppressWarnings("unchecked")
  private void DescriptorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DescriptorMouseClicked
    BurdenMouseClicked(evt);
    randomBurdenMouseClicked(evt);
    fillDetails(Descriptor);
  }//GEN-LAST:event_DescriptorMouseClicked

  private void randomSubTypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_randomSubTypeMouseClicked
//    subtype = GlobalMethods.roll1d() - 1;
//    if (evt.getClickCount() > 1) {
    subtype = (int) (Math.random() * SubType.getModel().getSize());
//    }
    SubType.setSelectedIndex(subtype);
    SubTypeMouseClicked(evt);
  }//GEN-LAST:event_randomSubTypeMouseClicked

  private void randomDescriptorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_randomDescriptorMouseClicked
//    descriptor = GlobalMethods.roll2d() - 2;
//    if (evt.getClickCount() > 1) {
    descriptor = (int) (Math.random() * Descriptor.getModel().getSize());
//    }
    Descriptor.setSelectedIndex(descriptor);
    DescriptorMouseClicked(evt);
    randomBurdenMouseClicked(evt);
  }//GEN-LAST:event_randomDescriptorMouseClicked

  private void randomBurdenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_randomBurdenMouseClicked
    burden = (int) (Math.random() * Burden.getModel().getSize());
    //<editor-fold defaultstate="collapsed" desc="btl">
    switch (burden) {
      case 1: {
        btl = 1;
        break;
      }
      case 2: {
        btl = 0;
        break;
      }
      case 3: {
        btl = 3;
        break;
      }
      case 4: {
        btl = 3;
        break;
      }
      case 5: {
        btl = 0;
        break;
      }
      case 6: {
        btl = 0;
        break;
      }
      case 7: {
        btl = 0;
        break;
      }
      case 8: {
        btl = 0;
        break;
      }
      case 9: {
        btl = 1;
        break;
      }
      case 10: {
        btl = 0;
        break;
      }
      case 11: {
        btl = 1;
        break;
      }
      case 12: {
        btl = 2;
        break;
      }
      case 13: {
        btl = 1;
        break;
      }
    }
    //</editor-fold>
    Burden.setSelectedIndex(burden);
    TL.setText("" + (tl + btl));
    randomStageMouseClicked(evt);
  }//GEN-LAST:event_randomBurdenMouseClicked

  @SuppressWarnings("unchecked")
  private void BurdenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BurdenMouseClicked
    randomStageMouseClicked(evt);
    StageMouseClicked(evt);
    fillDetails(Burden);
  }//GEN-LAST:event_BurdenMouseClicked

  private void randomStageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_randomStageMouseClicked
    stage = (int) (Math.random() * Stage.getModel().getSize());
    Stage.setSelectedIndex(stage);
    //randomUserMouseClicked(evt);
    calcTL();
  }//GEN-LAST:event_randomStageMouseClicked

  @SuppressWarnings("unchecked")
  private void StageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StageMouseClicked
    User.setSelectedIndex(0);
    UserMouseClicked(evt);
    fillDetails(Stage);
  }//GEN-LAST:event_StageMouseClicked

  private void randomUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_randomUserMouseClicked
    user = (int) (Math.random() * User.getModel().getSize());
    User.setSelectedIndex(user);
  }//GEN-LAST:event_randomUserMouseClicked

  @SuppressWarnings("unchecked")
  private void UserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserMouseClicked
//    randomUserMouseClicked(evt);
    User.setSelectedIndex(0);
    fillDetails(User);
  }//GEN-LAST:event_UserMouseClicked

  private void labTLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labTLMouseClicked
    jta.append(GlobalMethods.comment("=", 20));
    GlobalMethods.showTable(jta, "Categories", Categories);
    jta.append(CRLF);
    jta.append(CRLF);
    jta.append(GlobalMethods.comment("=", 20));
    GlobalMethods.showTable(jta, "EffectsArmorDamage", EffectsArmorDamage);
    jta.append(CRLF);
    jta.append(CRLF);
    jta.append(GlobalMethods.comment("=", 20));
    GlobalMethods.showTable(jta, "WeaponSkillStat", WeaponSkillStat);
    jta.append(CRLF);
    jta.append(CRLF);
    jta.append(GlobalMethods.comment("=", 20));
    GlobalMethods.showTable(jta, "WeaponRanges", WeaponRanges);
    jta.append(CRLF);
    jta.append(CRLF);
    jta.append(GlobalMethods.comment("=", 20));
    GlobalMethods.showTable(jta, "WeaponDescriptors", WeaponDescriptors);
    jta.append(CRLF);
    jta.append(CRLF);
    jta.append(GlobalMethods.comment("=", 20));
    GlobalMethods.showTable(jta, "BurdenStage", BurdenStage);
    jta.append(CRLF);
    jta.append(CRLF);
    jta.append(GlobalMethods.comment("=", 20));
    GlobalMethods.showTable(jta, "SpecialEffects", SpecialEffects);
    jta.append(CRLF);
    jta.append(CRLF);
    jta.append(GlobalMethods.comment("=", 20));
    GlobalMethods.showTable(jta, "Options", Options);
    jta.append(CRLF);
    jta.append(CRLF);
    jta.append(GlobalMethods.comment("=", 20));
    GlobalMethods.showTable(jta, "Controls", Controls);
    jta.append(CRLF);
    jta.append(CRLF);

  }//GEN-LAST:event_labTLMouseClicked

  private void jtaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtaMouseClicked
    if (evt.getClickCount() > 1) {
      jta.setText("");
    }
  }//GEN-LAST:event_jtaMouseClicked

  // Variables declaration - do not modify//GEN-BEGIN:variables
  public static javax.swing.JComboBox Burden;
  public static javax.swing.JComboBox Descriptor;
  public static javax.swing.JComboBox Stage;
  public static javax.swing.JComboBox SubType;
  public static javax.swing.JLabel TL;
  public static javax.swing.JComboBox Type;
  public static javax.swing.JComboBox User;
  public static javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel8;
  private javax.swing.JScrollPane jScrollPane1;
  public static javax.swing.JTextArea jta;
  private javax.swing.JLabel labTL;
  private javax.swing.JLabel randomBurden;
  private javax.swing.JLabel randomDescriptor;
  private javax.swing.JLabel randomStage;
  private javax.swing.JLabel randomSubType;
  private javax.swing.JLabel randomType;
  private javax.swing.JLabel randomUser;
  // End of variables declaration//GEN-END:variables

  private void calcTL() {
    String name = SubType.getSelectedItem().toString();
    //<editor-fold defaultstate="collapsed" desc="switch(name)">
    switch (name) {
      case "Gun": {
        tl = 6;
        break;
      }
      case "Gatling": {
        tl = 7;
        break;
      }
      case "Cannon": {
        tl = 6;
        break;
      }
      case "AutoCannon": {
        tl = 8;
        break;
      }
      case "Carbine": {
        tl = 5;
        break;
      }
      case "Rifle": {
        tl = 5;
        break;
      }
      case "Revolver": {
        tl = 4;
        break;
      }
      case "Pistol": {
        tl = 5;
        break;
      }
      case "Shotgun": {
        tl = 4;
        break;
      }
      case "Machinegun": {
        tl = 4;
        break;
      }
      case "Launcher": {
        tl = 6;
        break;
      }
      case "Multi-Launcher": {
        tl = 8;
        break;
      }
      case "Projector": {
        tl = 7;
        break;
      }
      case "Designator": {
        tl = 9;
        break;
      }
//      case "Grav or Laser": {
//        tl = 5;
//        break;
//      }
      default: {
        jta.append("Error with " + name);
      }
    }
    //</editor-fold>
    name = Descriptor.getSelectedItem().toString();
    //<editor-fold defaultstate="collapsed" desc="switch(name)">
    switch (name) {
      case "": {
        tl += 0;
        break;
      }
      case "Anti-Flyer": {
        tl += 4;
        break;
      }
      case "Anti-Tank": {
        tl += 0;
        break;
      }
      case "Assault": {
        tl += 2;
        break;
      }
      case "Fusion": {
        tl += 7;
        break;
      }
      case "Gauss": {
        tl += 7;
        break;
      }
      case "Plasma": {
        tl += 5;
        break;
      }
      case "Accelerator": {
        tl += 4;
        break;
      }
      case "Battle": {
        tl += 1;
        break;
      }
      case "Combat": {
        tl += 2;
        break;
      }
      case "(Poison) Dart": {
        tl += 1;
        break;
      }
      case "Hunting": {
        tl += 0;
        break;
      }
      case "Laser": {
        tl += 5;
        break;
      }
      case "Splat": {
        tl += 2;
        break;
      }
      case "Survival": {
        tl += 0;
        break;
      }
      case "Machine": {
        tl += 0;
        break;
      }
      case "Sub": {
        tl += -1;
        break;
      }
      case "AT Missile": {
        tl += 4;
        break;
      }
      case "AF Missile": {
        tl += 3;
        break;
      }
      case "Greanade": {
        tl += 1;
        break;
      }
      case "RAM Grenade": {
        tl += 1;
        break;
      }
      case "Missile": {
        tl += 2;
        break;
      }
      case "Rocket": {
        tl += -1;
        break;
      }
      case "Poison Gas": {
        tl += 0;
        break;
      }
      case "EMP or Rad": {
        tl += 1;
        break;
      }
      case "Fire": {
        tl += 3;
        break;
      }
      case "Flash": {
        tl += 1;
        break;
      }
      case "Freeze": {
        tl += 1;
        break;
      }
      case "Grav or Laser": {
        tl += 5;
        break;
      }
      case "Mag": {
        tl += 4;
        break;
      }
      case "Psi Amp": {
        tl += 4;
        break;
      }
      case "Acid or Shock": {
        tl += 0;
        break;
      }
      case "Sonic": {
        tl += 3;
        break;
      }
      case "Stench": {
        tl += 3;
        break;
      }
      default: {
        jta.append("Error with " + name);
      }
    }
    //</editor-fold>
    TL.setText("" + tl);
  }

  private void fillDetails(JComboBox<String> jcb) {
    String string = jcb.getName();
    jta.append(jcb.getName().toUpperCase() + " = " + jcb.getSelectedItem()
      .toString() + CRLF);
    switch (string) {
      case "Type": {
        break;
      }
      case "SubType": {
        break;
      }
      case "User": {
        break;
      }
      case "Stage": {
        break;
      }
      case "Burden": {
        break;
      }
      case "Descriptor": {
        break;
      }
      default: {
        jta.append(string + " not done yet");
      }
    }
    //jta.append("");

  }
  //<editor-fold defaultstate="collapsed" desc="Categories">
  static final String[] Categories = new String[]{
    "12",
    "CATEGORY", "CODE", "TYPE", "TL", "RANGE", "MASS", "qreBs", "H1", "D1",
    "MISC", "HITS(v1)", "Cr",
    "Artillery", "G", "Gun", "6", "4", "9", "-1", "*", "2", "-", "2", "5000",
    "Artillery", "Ga", "Gatling", "7", "4", "40", "-2", "*", "3", "-", "2",
    "8000",
    "Artillery", "C", "Cannon", "6", "6", "200", "-4", "*", "4", "-", "2",
    "10000",
    "Artillery", "aC", "Autocannon", "8", "6", "300", "-4", "*", "5", "-", "3",
    "30000",
    "Long Guns", "R", "Rifle", "5", "5", "4", "0", "Bullet", "2", "Unless Laser",
    "2", "500",
    "Long Guns", "C", "Carbine", "5", "4", "3", "1", "Bullet", "1",
    "Unless Laser", "1", "400",
    "Hand Guns", "P", "Pistol", "5", "2", "1.1", "0", "Bullet", "1",
    "Unless Laser", "1", "150",
    "Hand Guns", "R", "Revolver", "4", "2", "1.25", "0", "Bullet", "1",
    "Unless Laser", "1", "100",
    "Shotguns", "S", "Shotgun", "4", "2", "4", "0", "Bullet", "2", "-", "2",
    "300",
    "Machineguns", "Mg", "Machinegun", "6", "5", "8", "-1", "Bullet", "4", "-",
    "4", "3000",
    "Projectors", "Pj", "Projector", "9", "0", "1", "0", "*", "1", "-", "1",
    "300",
    "Designators", "D", "Designator", "7", "5", "10", "-1", "*", "1", "-", "1",
    "2000",
    "Launchers", "L", "Launcher", "6", "3", "10", "-1", "*", "1", "-", "0",
    "1000",
    "Launchers", "mL", "Multi-Launcher", "8", "5", "8", "-1", "*", "1", "-", "0",
    "3000"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="EffectsArmorDamage">
  static final String[] EffectsArmorDamage = new String[]{
    "4",
    "CODE", "TYPE", "EFFECT", "TYPE",
    "A", "Corrode", "Armor", "Hit",
    "B", "Bullet", "Armor", "Hit",
    "C", "Cut", "Armor", "Cut",
    "D", "Blast/Blow", "Armor", "Hit",
    "E", "EMP", "EMCage", "Fry",
    "F", "Frag", "Armor", "Hit",
    "G", "Gas", "Sealed", "Suff",
    "H", "Hot", "Insulation", "Heat",
    "I", "Infection", "Sealed", "Hit",
    "J", "Psi", "Psi Shield", "Stun",
    "K", "Burn", "Armor", "Hit",
    "L", "Elec", "Insulation", "Hit",
    "M", "Magnetic", "-", "Stun",
    "N", "Bang", "Soundproof", "Deaf",
    "O", "Stench", "Sealed", "Stun",
    "P", "Pain", "Armor+Sealed", "Stun",
    "Q", "Cold", "Insulation", "Freeze",
    "R", "Rad", "RadProof", "Hit",
    "S", "Sound", "SoundProof", "Stun",
    "T", "Poison", "Sealed", "Hit",
    "U", "Flash", "Flashproof", "Blind",
    "V", "Vacc", "Sealed", "Suff",
    "W", "Wound", "Armor", "Hit",
    "X", "Pen", "Armor", "Hit",
    "Y", "Grav", "", "Hit",
    "Z", "Tranq", "Sealed", "Stun"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="WeaponSkillStat">
  static final String[] WeaponSkillStat = new String[]{
    "3",
    "WEAPON USED", "SKILL", "CHARACTERISTIC",
    "Portable", "BattleDress", "Dexterity",
    "Fixed, Tank Mount", "Atillery", "Intelligence",
    "Laser,Fusion,Plasma", "Beams", "Dexterity",
    "Gun,Gatling,Cannon,Autocannon", "Artillery", "Intelligence",
    "Launcher", "Launcher", "Dexterity",
    "Acid,Fire,Gas or Stench", "Sprays", "C2",
    "Shock,EMP,Rad,Flash", "Exotics", "C2",
    "Freeze,Mag,Sonic,Grav", "Exotics", "C2",
    "Psi Amp", "Exotics", "Psi",
    "Edged Weapons", "Blades", "Strength",
    "Hand-to-Hand, Martial Arts", "Unarmed", "Strength",
    "Designator", "Forward Observer", "Dexterity",
    "Fires Bullets", "Slugthrower", "Dexterity"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="WeaponRanges">
  static final String[] WeaponRanges = new String[]{
    "4",
    "RANGE", "RANGE", "DISTANCE", "BENCHMARK",
    "0", "Contact", "Contact", "",
    "1", "VShort", "5m", "Coin",
    "2", "Short", "50m", "Card",
    "3", "Medium", "150m", "Book",
    "4", "Long", "500m", "Suitcase",
    "5", "VLong", "1000m", "Person",
    "6", "Distant", "5km", "Truck (Horizon?)",
    "7", "VDistant", "50km", "Tower",
    "8", "Orbital", "500km", "",
    "9", "Far Orbit", "5000km", ""
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="WeaponDescriptors">
  static final String[] WeaponDescriptors = new String[]{
    "13",
    "CATEGORY", "CODE", "DESCRIPTOR", "TL", "RANGE", "mMASS", "qreBs", "H2",
    "D2", "H3", "D3", "HITS(V1)", "mCr",
    "Artillery", "aF", "Anti-Flyer", "4", "6", "6.0", "0", "Frag", "1", "Blast",
    "3", "4", "3.0",
    "Artillery", "aT", "Anti-Tank", "0", "5", "8.0", "0", "Pen", "3", "Blast",
    "3", "6", "2.0",
    "Artillery", "A", "Assault", "2", "4", "0.8", "0", "Bang", "1", "Blast", "2",
    "3", "1.5",
    "Artillery", "F", "Fusion", "7", "4", "2.3", "0", "Pen", "4", "Burn", "4",
    "8", "6.0",
    "Artillery", "G", "Gauss", "7", "4", "0.9", "0", "Bullet", "3", "(blank)",
    "(blank)", "3", "2.0",
    "Artillery", "P", "Plasma", "5", "4", "2.5", "0", "Pen", "3", "Burn", "3",
    "6", "2.0",
    "Long Gun", "(blank)", "(blank)", "0", "0", "1.0", "0", "0", "(blank)",
    "(blank)", "(blank)", "(blank)", "(blank)",
    "Long Gun", "Ac", "Accelerator", "4", "0", "6.0", "0", "Bullet", "2",
    "(blank)", "(blank)", "2", "3.0",
    "Long Gun", "A", "Assault", "2", "4", "0.8", "0", "Bang", "1", "Blast", "2",
    "3", "1.5",
    "Long Gun", "B", "Battle", "1", "5", "1.0", "1", "Bullet", "1", "(blank)",
    "(blank)", "1", "0.8",
    "Long Gun", "C", "Combat", "2", "3", "0.9", "0", "Frag", "2", "(blank)",
    "(blank)", "2", "1.5",
    "Long Gun", "D", "Dart", "1", "4", "0.6", "0", "Tranq", "123", "(blank)",
    "(blank)", "123", "0.9",
    "Long Gun", "P", "Poison Dart", "1", "4", "1.0", "0", "Poison", "123",
    "(blank)", "(blank)", "123", "0.9",
    "Long Gun", "G", "Gauss", "7", "0", "0.9", "0", "Bullet", "3", "(blank)",
    "(blank)", "3", "2.0",
    "Long Gun", "H", "Hunting", "0", "3", "0.9", "-1", "Bullet", "1", "(blank)",
    "(blank)", "1", "1.2",
    "Long Gun", "L", "Laser", "5", "0", "1.2", "0", "Burn", "2", "Pen", "2", "4",
    "6.0",
    "Long Gun", "Sp", "Splat", "2", "4", "1.3", "1", "Bullet", "1", "(blank)",
    "(blank)", "1", "2.4",
    "Long Gun", "S", "Survival", "0", "2", "0.5", "0", "Bullet", "1", "(blank)",
    "(blank)", "1", "1.2",
    "Hand Gun", "(blank)", "(blank)", "0", "0", "1.0", "0", "0", "(blank)",
    "(blank)", "(blank)", "(blank)", "(blank)",
    "Hand Gun", "Ac", "Accelerator", "4", "0", "0.6", "0", "Bullet", "2",
    "(blank)", "(blank)", "2", "3.0",
    "Hand Gun", "L", "Laser", "5", "4", "1.2", "0", "Burn", "2", "Pen", "2", "4",
    "2.0",
    "Hand Gun", "M", "Machine", "0", "3", "1.2", "0", "Bullet", "2", "(blank)",
    "(blank)", "(blank)", "1.5",
    "Shotgun", "(blank)", "(blank)", "0", "0", "1.0", "0", "0", "(blank)",
    "(blank)", "(blank)", "(blank)", "(blank)",
    "Shotgun", "A", "Assault", "2", "4", "0.8", "0", "Bang", "1", "Blast", "2",
    "3", "2.0",
    "Shotgun", "H", "Hunting", "0", "3", "0.9", "0", "Bullet", "1", "(blank)",
    "(blank)", "1", "1.2",
    "Machinegun", "(blank)", "(blank)", "0", "0", "1.0", "0", "0", "(blank)",
    "(blank)", "(blank)", "(blank)", "(blank)",
    "Machinegun", "aF", "Anti-Flyer", "4", "6", "6.2", "0", "Frag", "1", "Blast",
    "3", "4", "3.0",
    "Machinegun", "A", "Assault", "2", "4", "0.8", "0", "Bang", "1", "Blast",
    "2", "3", "1.5",
    "Machinegun", "S", "Sub", "-1", "2", "0.3", "0", "Bullet", "-1", "(blank)",
    "(blank)", "-1", "0.9",
    "Spray Des/Proj", "A", "Acid", "0", "3", "1.0", "1", "Acid", "2", "Pen",
    "(blank)", "4", "x3.0",
    "Spray Des/Proj", "H", "Fire", "0", "1", "0.9", "0", "Burn", "123", "Pen",
    "123", "246", "2.0",
    "Spray Des/Proj", "P", "Poison Gas", "0", "2", "1.0", "0", "Gas", "123",
    "Poison", "123", "246", "3.0",
    "Spray Des/Proj", "S", "Stench", "3", "2", "0.4", "0", "Stench", "123",
    "(blank)", "(blank)", "123", "1.2",
    "Exotic Des/Proj", "Emp", "EMP", "1", "3", "1.0", "0", "EMP", "123",
    "(blank)", "(blank)", "1", "4.0",
    "Exotic Des/Proj", "F", "Flash", "-1", "2", "0.5", "0", "Flash", "123",
    "(blank)", "(blank)", "2", "1.5",
    "Exotic Des/Proj", "C", "Freeze", "1", "3", "1.0", "1", "Cold", "123",
    "(blank)", "(blank)", "2", "3.0",
    "Exotic Des/Proj", "G", "Grav", "5", "2", "3.0", "0", "Grav", "123",
    "(blank)", "(blank)", "3", "20.0",
    "Exotic Des/Proj", "L", "Laser", "5", "0", "1.2", "0", "Burn", "123", "Pen",
    "123", "246", "6.0",
    "Exotic Des/Proj", "M", "Mag", "4", "1", "2.0", "0", "EMP", "123", "Mag",
    "123", "246", "15.0",
    "Exotic Des/Proj", "Psi", "Psi Amp", "4", "2", "1.0", "0", "Psi", "123",
    "(blank)", "(blank)", "123", "9.0",
    "Exotic Des/Proj", "R", "Rad", "1", "4", "1.0", "2", "Rad", "123", "(blank)",
    "(blank)", "123", "8.0",
    "Exotic Des/Proj", "Sh", "Shock", "0", "2", "0.5", "0", "Elec", "123",
    "Pain", "123", "246", "2.0",
    "Exotic Des/Proj", "S", "Sonic", "3", "2", "0.6", "0", "Sound", "123",
    "Bang", "123", "246", "1.1",
    "Launcher", "aF", "AF Missile", "4", "7", "4.0", "0", "Frag", "2", "Blast",
    "3", "5", "3.0",
    "Launcher", "aT", "AT Missile", "3", "4", "1.0", "1", "Frag", "2", "Pen",
    "3", "5", "2.0",
    "Launcher", "Gr", "Grenade", "1", "4", "0.8", "0", "Frag", "2", "Blast", "2",
    "4", "1.0",
    "Launcher", "M", "Missile", "1", "6", "2.2", "0", "Frag", "2", "Pen", "2",
    "4", "5.0",
    "Launcher", "RAM", "RAM Grenade", "2", "6", "1.0", "0", "Frag", "2", "Blast",
    "2", "4", "3.0",
    "Launcher", "R", "Rocket", "-1", "5", "3.0", "0", "Frag", "2", "Pen", "2",
    "4", "1.0"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="BurdenStage">
  static final String[] BurdenStage = new String[]{
    "11",
    "LINE", "CODE", "DESCRIPTOR", "TL", "RANGE", "MASS", "qreBs", "MISC", "D",
    "COMMENT", "Cr",
    "Burden", "(blank)", "(blank)", "0", "0", "1.0", "0", "(blank)", "0",
    "(blank)", "1.0",
    "Burden", "aD", "Anti-Designator", "3", "1", "3.0", "+3", "(blank)", "1",
    "Not Pistols. Shotguns", "3.0",
    "Burden", "B", "Body", "2", "*1", "0.5", "-4", "(blank)", "-1",
    "Only Pistols.", "3.0",
    "Burden", "D", "Disposable", "3", "0", "0.9", "-1", "Q=-2", "0", "(blank)",
    "0.5",
    "Burden", "H", "Heavy", "0", "1", "1.3", "+3", "(blank)", "1", "(blank)",
    "2.0",
    "Burden", "Lt", "Light", "0", "-1", "0.7", "-1", "(blank)", "-1", "(blank)",
    "1.1",
    "Burden", "M", "Magnum", "1", "1", "1.1", "+1", "(blank)", "1",
    "OnlyPistols.", "1.1",
    "Burden", "M", "Medium", "0", "0", "1.0", "0", "(blank)", "0",
    "Not Pistols.", "1.0",
    "Burden", "R", "Recoilless", "1", "-1", "1.2", "0", "(blank)", "1",
    "(blank)", "3.0",
    "Burden", "Sn", "Snub", "1", "*2", "0.7", "-3", "(blank)", "1", "(blank)",
    "1.5",
    "Burden", "Vh", "Vheavy", "0", "*5", "4.0", "+4", "(blank)", "5", "(blank)",
    "5.0",
    "Burden", "Vl", "Vlight", "1", "-2", "0.6", "-2", "(blank)", "-1", "(blank)",
    "2.0",
    "Burden", "Vrf", "VRF", "2", "0", "14.0", "+5", "(blank)", "1",
    "Only Guns and Mgs", "9.0",
    "Stage", "(blank)", "(blank)", "0", "0", "1.0", "0", "(blank)", "0",
    "(blank)", "1.0",
    "Stage", "A", "Advanced", "3", "0", "0.8", "-2", "(blank)", "2", "(blank)",
    "2.0",
    "Stage", "Alt", "Alternate", "1", "1", "1.1", "0", "(blank)", "2", "(blank)",
    "1.1",
    "Stage", "B", "Basic", "0", "0", "1.3", "0", "(blank)", "0", "(blank)",
    "0.7",
    "Stage", "E", "Early", "-1", "-1", "1.7", "+1", "(blank)", "0", "EOU-2",
    "1.2",
    "Stage", "X", "Experimental", "-2", "-1", "2.0", "+3", "R=-2", "0",
    "(blank)", "4.0",
    "Stage", "Im", "Improved", "1", "0", "1.0", "0", "R=+2", "1", "EOU+2", "1.1",
    "Stage", "Mod", "Modified", "2", "0", "0.9", "0", "(blank)", "1", "(blank)",
    "1.2",
    "Stage", "Pr", "Precision", "6", "3", "4.0", "+2", "(blank)", "0",
    "Only Designators.", "5.0",
    "Stage", "P", "Prototype", "-1", "-1", "1.9", "+2", "(blank)", "0",
    "(blank)", "3.0",
    "Stage", "R", "Remote", "1", "0", "1.0", "0", "(blank)", "0", "Not Pistols.",
    "7.0",
    "Stage", "Sn", "Sniper", "1", "1", "1.1", "+1", "Q=+2", "0", "Only Rifles.",
    "2.0",
    "Stage", "St", "Standard", "1", "0", "1.0", "0", "(blank)", "1", "(blank)",
    "1.0",
    "Stage", "T", "Target", "0", "0", "1.1", "+1", "Q=+2", "0",
    "Only Rifles and Pistols.", "1.5",
    "Stage", "Ul", "Ultimate", "4", "0", "0.7", "-2", "R=+2", "2", "(blank)",
    "1.4",
    "Users", "(blank)", "(blank)", "0", "0", "1.0", "0", "EOU=0", "(blank)",
    "(blank)", "(blank)",
    "Users", "M", "Man", "0", "0", "1.0", "0", "0", "(blank)", "(blank)",
    "(blank)",
    "Users", "V", "Vargr", "0", "0", "1.0", "0", "-1", "(blank)", "(blank)",
    "(blank)",
    "Users", "A", "Aslan", "0", "0", "1.0", "0", "-2", "(blank)", "(blank)",
    "(blank)",
    "Users", "K", "K’kree", "0", "0", "1.3", "+2", "0", "(blank)", "(blank)",
    "(blank)",
    "Users", "S", "Sophont", "(blank)", "(blank)", "(blank)", "(blank)",
    "(blank)", "(blank)", "(blank)", "(blank)",
    "Users", "H", "Grasper", "0", "1.0", "0", "-1", "Inc. Hivers.", "(blank)",
    "(blank)", "(blank)",
    "Users", "P", "Paw", "0", "1.0", "0", "(blank)", "-1", "Inc. Aslan.",
    "(blank)", "(blank)",
    "Users", "G", "Gripper", "0", "1.0", "0", "(blank)", "-2", "(blank)",
    "(blank)", "(blank)",
    "Users", "T", "Tentacle", "0", "1.0", "0", "-2", "Inc. Vegans.", "(blank)",
    "(blank)", "(blank)",
    "Users", "(blank)", "S", "Socket", "0", "1.0", "0", "-2", "(blank)",
    "(blank)", "(blank)",
    "Users", "U", "Universal", "0", "1.1", "+1", "-1", "ANY manipulator.",
    "(blank)", "(blank)", "(blank)",
    "Portability", "(blank)", "0", "0", "1.0", "0", "(blank)", "(blank)",
    "(blank)", "(blank)", "(blank)",
    "Portability", "C", "Crewed", "0", "0", "1.0", "+1", "(blank)", "(blank)",
    "(blank)", "(blank)",
    "Portability", "F", "Fixed", "0", "+1", "1.0", "+4", "(blank)", "(blank)",
    "(blank)", "(blank)",
    "Portability", "P", "Portable", "0", "1", "1.0", "-2", "(blank)", "(blank)",
    "(blank)", "(blank)",
    "Portability", "V", "Vehicle Mount", "0", "+1", "1.0", "0", "(blank)",
    "(blank)", "(blank)", "(blank)",
    "Portability", "T", "Turret", "1", "0", "1.0", "0", "(blank)", "(blank)",
    "(blank)", "(blank)"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="Portability">
  static final String[] Portability = new String[]{
    "7",
    "LINE", "CODE", "DESCRIPTOR", "TL", "RANGE", "MASS", "qreBs",
    "Portability", "(blank)", "(blank)", "0", "0", "1.0", "0",
    "Portability", "C", "Crewed", "0", "0", "1.0", "1",
    "Portability", "F", "Fixed", "0", "1", "1.0", "4",
    "Portability", "P", "Portable", "0", "1", "1.0", "-2",
    "Portability", "V", "Vehicle Mount", "0", "1", "1.0", "0",
    "Portability", "T", "Turret Mount", "1", "0", "1.0", "0"};
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="SpecialEffects">
  static final String[] SpecialEffects = new String[]{
    "9",
    "LINE", "VALUE", "RECOIL", "LOUD", "FLASH", "HEAT", "VACC", "UW", "CQ",
    "Burden", "Recoilless", "No", "-", "-", "-", "-", "-", "No",
    "Burden", "Snub", "Yes", "-", "-", "-", "-", "R=1", "Yes",
    "Burden", "VHeavy", "Hi", "-", "-", "-", "-", "-", "-",
    "Burden", "VRF", "Hi", "-", "-", "-", "-", "No", "No",
    "Descriptor", "Accelerator", "No", "-", "-", "-", "-", "No", "-",
    "Descriptor", "Acid", "No", "-", "-", "-", "-", "R=0", "-",
    "Descriptor", "AF Missile", "No", "Loud", "Bright", "Hot", "-", "No", "No",
    "Descriptor", "AT Missile", "No", "Loud", "Bright", "Hot", "-", "No", "No",
    "Descriptor", "AT Rocket", "No", "Loud", "Bright", "Hot", "-", "No", "No",
    "Descriptor", "Dart", "No", "-", "-", "-", "-", "R=1", "-",
    "Descriptor", "EMP", "No", "-", "-", "-", "-", "-", "-",
    "Descriptor", "Fire", "No", "-", "Bright", "Hot", "-", "No", "-",
    "Descriptor", "Flash", "No", "-", "Bright", "-", "-", "R=3", "-",
    "Descriptor", "Freeze", "No", "-", "-", "-", "-", "R=0", "-",
    "Descriptor", "Fusion", "Hi", "-", "Bright", "Hot", "-", "R=2", "-",
    "Descriptor", "Gas", "No", "-", "-", "-", "No", "No", "-",
    "Descriptor", "Gauss", "Yes", "-", "Mag", "-", "-", "No", "-",
    "Descriptor", "Grav", "No", "-", "-", "-", "-", "-", "-",
    "Descriptor", "Grenade", "Yes", "-", "-", "-", "-", "R=1", "-",
    "Descriptor", "Laser", "No", "-", "Bright", "-", "-", "R=2", "-",
    "Descriptor", "Mag", "No", "-", "Mag", "-", "-", "-", "-",
    "Descriptor", "Missile", "No", "-", "Bright", "Hot", "-", "No", "-",
    "Descriptor", "Plasma", "Hi", "-", "Bright", "Hot", "-", "R=2", "-",
    "Descriptor", "Poison Dart", "No", "-", "-", "-", "-", "R=1", "-",
    "Descriptor", "Poison Gas", "No", "-", "-", "-", "No", "No", "-",
    "Descriptor", "Psi Amp", "No", "-", "-", "-", "-", "-", "-",
    "Descriptor", "Rad", "No", "-", "-", "-", "-", "R=1", "-",
    "Descriptor", "RAM", "No", "Loud", "Bright", "Hot", "-", "R=1", "-",
    "Descriptor", "Rocket", "No", "-", "Bright", "Hot", "-", "No", "-",
    "Descriptor", "Shock", "No", "-", "Bright", "Hot", "-", "R=0", "-",
    "Descriptor", "Sonic", "No", "Loud", "-", "-", "No", "R=1", "-",
    "Descriptor", "Splat", "Yes", "-", "-", "-", "-", "No", "-",
    "Descriptor", "Spray/Stench", "No", "-", "-", "-", "No", "No", "-",
    "Descriptor", "Tranq", "No", "-", "-", "-", "No", "No", "-",
    "Type", "AutoCannon", "Hi", "VLoud", "-", "-", "-", "No", "No",
    "Type", "Cannon", "Hi", "VLoud", "-", "-", "-", "No", "No",
    "Type", "Carbine", "Yes", "Loud*", "-", "-", "-", "No", "-1",
    "Type", "Designator", "Yes", "-", "-", "-", "-", "-", "-3",
    "Type", "Gatling", "Hi", "VLoud", "-", "-", "-", "No", "No",
    "Type", "Gun", "Hi", "VLoud", "-", "-", "-", "No", "-3",
    "Type", "Launcher", "No", "-", "-", "-", "-", "-", "-3",
    "Type", "Machinegun", "Yes", "Loud", "-", "-", "-", "No", "-3",
    "Type", "Multi-Launch", "No", "-", "-", "-", "-", "No", "-3",
    "Type", "Pistol", "Yes", "Loud*", "-", "-", "-", "No", "2",
    "Type", "Projector", "No", "-", "-", "-", "-", "-", "0",
    "Type", "Revolver", "Yes", "Loud*", "-", "-", "-", "No", "2",
    "Type", "Rifle", "Yes", "Loud*", "-", "-", "-", "No", "-5",
    "Type", "Shotgun", "Yes", "Loud", "-", "-", "-", "-", "-3",};
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="Options">
  static final String[] Options = new String[]{
    "4",
    "CODE", "OPTION", "EFFECT", "QREBS",
    "a", "Low Signature Visual Camouflaged", "Mod -2 for visual detection",
    "-1S",
    "b", "Low Signature Metal, Plastic Construction",
    "Mod -4 for metal detection", "-1S",
    "c", "Quiet, Silenced", "Converts Loud to Quiet", "-1E",
    "d", "Folding Stock. Collapsing Stock. Close Quarters",
    "Mod +2 for EOU in close quarters", "-2R",
    "e", "Stable Platform. Gyroscopic. Shoulder Stock For Pistols",
    "Reduces Difficulty 1D", "-1E",
    "f", "Flash Suppressor Visual", "Mod -4 visual detection in darkness", "-1B",
    "g", "Hot Enviroment Adapted.  Insulated",
    "Mod +3 Reliability in hot environment", "-3E",
    "h", "Corrosive Environment Adapted. Anti Corrosion Coating",
    "Mod +3 Reliability in Corrosive environment", "-3E",
    "i", "Cold Enviroment Adapted.  Insulated",
    "Mod +3 Reliability in Cold environment", "-3E",
    "j", "Amplificaton or Magnification Sights", "Increase max Range +1*", "-2E",
    "k", "", "", "",
    "l", "", "", "",
    "m", "", "", "",
    "n", "", "", "",
    "o", "Locked To Key", "Only useable with Key", "",
    "p", "Locked To User", "Only useable by Current ID`d Owner", "",
    "q", "", "", "",
    "r[]", "Sight Input Is [VHSTAP]", "", "",//V=Vision:H=Sound:S=Smell:T=Touch:A=Awareness:P=Perception
    "s[]", "Sight Display Output Is [VHSTAP]", "", "",//V=Vision:H=Sound:S=Smell:T=Touch:A=Awareness:P=Perception
    "t", "", "", "",
    "u", "", "", "",
    "v", "", "", "",
    "w", "", "", "",
    "x", "Sensor Acquisition and Tracking Of Target",
    "Specify Sensor. Guns only", "",
    "y", "", "", "",
    "z", "", "", ""
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="Controls">
  static final String[] Controls = new String[]{
    "7",
    "TYPE", "OFF", "SINGLE", "BURST", "FULL", "P1P2P3", "OVERRIDE",
    "Gun", "Off", "Single", "-", "-", "-", "Override",
    "Gatling", "Off", "-", "Burst", "Full", "-", "Override",
    "Cannon", "Off", "Single", "-", "-", "-", "Override",
    "AutoCannon", "Off", "-", "Burst", "Full", "-", "Override",
    "Rifle / Carbine", "Off", "Single", "-", "-", "-", "-",
    "Pistol / Revolver", "Off", "Single", "-", "-", "-", "-",
    "Shotgun", "Off", "Single", "-", "-", "-", "-",
    "Machinegun", "Off", "-", "Burst", "Full", "-", "-",
    "Launcher", "Off", "Single", "-", "-", "-", "Override",
    "Multi-Launcher", "Off", "Single", "Burst", "-", "-", "Override",
    "Designator", "Off", "-", "-", "Full", "123", "Override",
    "Projector", "Off", "Single", "-", "-", "-", "Override",
    "DESCRIPTOR", "OFF", "SINGLE", "BURST", "FULL", "P1P2P3", "OVERRIDE",
    "Accelerator", "Off", "-", "Burst", "-", "123", "-",
    "Acid", "Off", "-", "-", "-", "-", "-",
    "AF / AT Missile", "Off", "-", "-", "-", "-", "-",
    "Anti-Flyer", "Off", "-", "Burst", "Full", "-", "-",
    "Anti-Tank", "Off", "-", "-", "-", "-", "-",
    "Assault", "Off", "-", "Burst", "-", "-", "-",
    "Battle", "Off", "-", "-", "-", "-", "-",
    "Combat", "Off", "-", "-", "Full", "-", "-",
    "Dart", "Off", "Single", "-", "-", "123", "-",
    "EMP", "Off", "-", "-", "-", "123", "-",
    "Fire", "Off", "-", "-", "-", "123", "-",
    "Flash", "Off", "-", "-", "-", "123", "-",
    "Freeze", "Off", "-", "-", "-", "123", "-",
    "Fusion", "Off", "-", "-", "-", "-", "-",
    "Gauss", "Off", "-", "Burst", "-", "-", "-",
    "Grav", "Off", "-", "-", "-", "-", "-",
    "Grenade", "Off", "Single", "-", "-", "-", "-",
    "Hunting", "Off", "-", "-", "-", "-", "-",
    "Laser", "Off", "-", "Burst", "-", "123", "-",
    "Mag", "Off", "-", "-", "-", "123", "-",
    "Missile", "Off", "Single", "-", "-", "-", "-",
    "Plasma", "Off", "-", "-", "-", "-", "-",
    "Poison Gas", "Off", "-", "-", "-", "123", "-",
    "Psi Amp", "Off", "-", "-", "-", "123", "-",
    "Rad", "Off", "-", "-", "-", "123", "-",
    "RAM", "Off", "-", "-", "-", "-", "-",
    "Rocket", "Off", "-", "-", "-", "-", "-",
    "Shock", "Off", "Single", "-", "**", "-", "-",
    "Sonic", "Off", "Single", "-", "**", "-", "-",
    "Splat", "Off", "-", "-", "-", "-", "-",
    "Stench", "Off", "-", "-", "-", "123", "-",
    "Sub", "Off", "Single", "Burst", "Full", "-", "-",
    "Survival", "Off", "-", "-", "-", "-", "-"
  };
  //</editor-fold>

//<editor-fold defaultstate="collapsed" desc="CreatingGuns">
//    "", "Calculate", "Portability",
//    "", "Min", "Mass", "Max", "Mass", "Portability",
//    "", "20", "(blank)",
//    "", "Hi", "Recoil", "and", "<", "40", "P", "Portable",
//    "", "20", "200", "C", "Crewed", "*",
//    "", "200", "500", "T", "Turret",
//    "", "500", "1000", "V", "Vehicle", "Mount",
//    "", "1,000", "100,000", "F", "Fixed",
//  private static final String[] CreatingGuns = new String[]{
//    "7",
//    "TYPE", "TYPETL", "SUBTYPE", "SUBTYPETL", "DESCRIPTOR", "DESCRIPTORTL", "1D",
//    "", "", "", "", "", "", "",
//    "", "", "", "", "", "", "",
//    "", "", "", "", "", "", "",
//    "", "", "", "", "", "", "",
//    "", "", "", "", "", "", "",
//    "", "", "", "", "", "", "",
//    "", "", "", "", "", "", "",
//    "", "", "", "", "", "", "",
//    "", "", "", "", "", "", "",
//    "", "", "", "", "", "", "",
//    "", "", "", "", "", "", "",
//    "", "", "", "", "", "", "",
//    "", "", "", "", "", "", "",
//    "", "", "", "", "", "", "",};
  /*
   0-7 for Type
   1-6 or 2-12 for SubType
   1-6 or 2-12 for Descriptor
   2-12 for Burden
   2-12 for Stage
   2-12 for User
   add Portability
   TL = SubType Descriptor Burden Stage





   */
  //</editor-fold>
}
