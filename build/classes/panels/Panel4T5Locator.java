package panels;

import dbviewer.ConsoleWindow;
import dbviewer.DBPublic;
import static dbviewer.DBViewer.cw;
import dbviewer.T5JumpCalc;
import dbviewer.globals.GlobalMethods;
import static dbviewer.globals.GlobalMethods.getLinesFromTable;
import static dbviewer.globals.GlobalMethods.getStringFromTable;
import static dbviewer.globals.GlobalMethods.getTableTitles;
import static dbviewer.globals.GlobalMethods.rollUPP;
import static dbviewer.globals.GlobalVariables.CRLF;
import static dbviewer.globals.GlobalVariables.FS;
import static dbviewer.globals.GlobalVariables.T5;
import static dbviewer.globals.GlobalVariables._JS;
import static dbviewer.globals.GlobalVariables._SEC;
import dbviewer.globals.ObjectAnalyzer;
//import fx.xtestmap.TestMap;
//import fx.xweb.RenameFX;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import static java.awt.image.BufferedImage.TYPE_INT_ARGB;
import static java.awt.image.BufferedImage.TYPE_INT_RGB;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.NumberFormat;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Properties;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
//import javafx.scene.control.SelectionModel;
import javax.imageio.ImageIO;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListModel;
import javax.swing.event.ChangeEvent;
//import javax.swing.event.ChangeListener;
//import javax.swing.event.ListDataListener;
import javax.swing.filechooser.FileFilter;
//import linkpictext.Panel4Add;
import static panels.Panel4T5CounterMaker.ta4Read;
import static panels.Panel4T5Scripting.showFullNames;
import static panels.Panel4T5Scripting.writeXML;
import starters.MyChart;
//import web.bits2page.Bits2Page;
import empires.Empire;
//import web.version2.F4v2;

/**
 * @author maggot
 */
public class Panel4T5Locator extends Panel4 {

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jta4Sec = new javax.swing.JTextArea();
    jta4Line = new javax.swing.JTextArea();
    jta4Sys = new javax.swing.JTextArea();
    jta4Info = new javax.swing.JTextArea();
    jta4Near = new javax.swing.JTextArea();
    jta4Orb = new javax.swing.JTextArea();
    jta4Dest = new javax.swing.JTextArea();
    jta4Str = new javax.swing.JTextArea();
    jta4HTML = new javax.swing.JTextArea();
    jta4Sectors = new javax.swing.JTextArea();
    jta4UWP = new javax.swing.JTextArea();
    panel4T5World = new javax.swing.JPanel();
    jta4Bases = new javax.swing.JTextArea();
    panel4WorldPic = new javax.swing.JPanel();
    jta4Sub = new javax.swing.JTextArea();
    jcb4Sec = new javax.swing.JComboBox();
    jcb4Sub = new javax.swing.JComboBox<>();
    jcb4Sys = new javax.swing.JComboBox<>();
    jcb4Star = new javax.swing.JComboBox();
    panel4Sec = new panels.Panel4Grid3x3();
    panel4Sub = new panels.Panel4Grid6x6();
    panel4Sys = new panels.Panel4T5BitSub();
    jScrollPane1 = new javax.swing.JScrollPane();
    jsp4Maps = new javax.swing.JScrollPane();
    panel4Maps = new panels.Panel4T5BitSub();
    panel4Strength = new javax.swing.JPanel();
    SDBs = new javax.swing.JLabel();
    defbats = new javax.swing.JLabel();
    Troops = new javax.swing.JLabel();
    troopunits = new javax.swing.JLabel();
    squadrons = new javax.swing.JLabel();
    sdbs1 = new javax.swing.JLabel();
    Rons = new javax.swing.JLabel();
    CF = new javax.swing.JLabel();
    panel4T5PBG = new javax.swing.JPanel();
    jLabel5 = new javax.swing.JLabel();
    jLabel6 = new javax.swing.JLabel();
    jLabel7 = new javax.swing.JLabel();
    jLabel8 = new javax.swing.JLabel();
    jLabel9 = new javax.swing.JLabel();
    jLabel10 = new javax.swing.JLabel();
    jLabel11 = new javax.swing.JLabel();
    jLabel12 = new javax.swing.JLabel();
    panel4Pic = new javax.swing.JPanel();
    js4Dist = new javax.swing.JSlider();
    jsp4Jump = new javax.swing.JScrollPane();
    jl4Jump = new javax.swing.JList();
    jsp4All = new javax.swing.JScrollPane();
    jta4All = new javax.swing.JTextArea();
    panel4Jump = new javax.swing.JPanel();
    jLabel3 = new javax.swing.JLabel();
    jComboBox19 = new javax.swing.JComboBox();
    jCheckBox2 = new javax.swing.JCheckBox();
    jCheckBox1 = new javax.swing.JCheckBox();
    jcb4All = new javax.swing.JComboBox<>();
    jtf4UWP = new javax.swing.JTextField();
    jcb4Lang = new javax.swing.JComboBox<>();
    jtf4Word = new javax.swing.JTextField();
    jcb4Options = new javax.swing.JComboBox<>();
    jPanel1 = new javax.swing.JPanel();
    sC = new javax.swing.JLabel();
    sB = new javax.swing.JLabel();
    sS = new javax.swing.JLabel();
    jtf4Find = new javax.swing.JTextField();
    jComboBox1 = new javax.swing.JComboBox<>();
    jButton1 = new javax.swing.JButton();
    jcb4Career = new javax.swing.JComboBox();
    js4Terms = new javax.swing.JSpinner();
    jtf4UPP = new javax.swing.JTextField();
    jButton2 = new javax.swing.JButton();
    jLabel4 = new javax.swing.JLabel();
    Sex = new javax.swing.JCheckBox();
    label1 = new java.awt.Label();
    jComboBox2 = new javax.swing.JComboBox<>();
    jButton3 = new javax.swing.JButton();
    jcb4Rank = new javax.swing.JComboBox<>();

    jLabel1.setText("X");

    jLabel2.setText("Y");

    jta4Sec.setColumns(15);
    jta4Sec.setRows(5);
    jta4Sec.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jta4SecMouseClicked(evt);
      }
    });

    jta4Line.setColumns(15);
    jta4Line.setRows(5);

    jta4Sys.setColumns(15);
    jta4Sys.setRows(5);

    jta4Info.setColumns(15);
    jta4Info.setRows(5);

    jta4Near.setColumns(20);
    jta4Near.setRows(5);
    jta4Near.setTabSize(5);

    jta4Orb.setColumns(20);
    jta4Orb.setRows(5);
    jta4Orb.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jta4OrbMouseClicked(evt);
      }
    });

    jta4Dest.setColumns(20);
    jta4Dest.setRows(5);

    jta4Str.setColumns(20);
    jta4Str.setRows(5);

    jta4HTML.setColumns(20);
    jta4HTML.setRows(5);
    jta4HTML.setText("<!DOCTYPE html>\n<html>\n  <head>\n    <title>TITLE</title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n  </head>\n  <body>\n\n<br>\natlas<br>\ncandy<br>\nposter<br>\nprint<br>\n<br>\n<a href=\"http://www.travellermap.com/?x=-98&y=73&scale=100&options=0&style=atlas\">\nhttp://www.travellermap.com/?x=-98&y=73&scale=100&options=0&style=atlas<br>\n<br>\n<br>\n\n<iframe\nsrc=\"http://travellermap.com/iframe.htm?sector=SEC&hex=HEX\"\nstyle=\"width: WID; height: HGT; border: BORDER;\">\n</iframe>\n\n<br>\n<img src=\"http://www.travellermap.com/?x=-98&y=73&scale=80&options=0&style=atlas\">\n<br>\n\n<img src=\"http://travellermap.com/api/jumpmap?sector=SEC&hex=HEX&jump=JUMP&scale=SCALE&options=OPTIONS&style=atlas\">\n<br>\n\n<img src=\"http://travellermap.com/api/jumpmap?sector=SEC&hex=HEX&jump=JUMP&scale=SCALE&options=OPTIONS&style=candy\">\n<br>\n\n<img src=\"http://travellermap.com/api/jumpmap?sector=SEC&hex=HEX&jump=JUMP&scale=SCALE&options=OPTIONS&style=poster\">\n<br>\n\n<a href=\"<img src=\"http://travellermap.com/api/jumpmap?sector=SEC&hex=HEX&jump=JUMP&scale=SCALE&options=OPTIONS&style=print\">\n<img src=\"http://travellermap.com/api/jumpmap?sector=SEC&hex=HEX&jump=JUMP&scale=SCALE&options=OPTIONS&style=STYLE\">\n<br>\n\n<a href=\"http://www.travellermap.com/world?sector=SEC&hex=HEX\">\nhttp://www.travellermap.com/world?sector=SEC&hex=HEX\n<br>\n\n<a href=\"http://travellermap.com/api/poster?sector=SPIN&scale=SCALE&options=OPTIONS&style=STYLE\">\nhttp://travellermap.com/api/poster?sector=SPIN&scale=SCALE&options=OPTIONS&style=STYLE\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/image\">\nhttp://travellermap.com/data/SEC/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/A/image\">\nhttp://travellermap.com/data/SEC/A/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/B/image\">\nhttp://travellermap.com/data/SEC/B/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/C/image\">\nhttp://travellermap.com/data/SEC/C/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/D/image\">\nhttp://travellermap.com/data/SEC/D/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/E/image\">\nhttp://travellermap.com/data/SEC/E/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/F/image\">\nhttp://travellermap.com/data/SEC/F/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/G/image\">\nhttp://travellermap.com/data/SEC/G/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/H/image\">\nhttp://travellermap.com/data/SEC/H/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/I/image\">\nhttp://travellermap.com/data/SEC/I/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/J/image\">\nhttp://travellermap.com/data/SEC/J/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/K/image\">\nhttp://travellermap.com/data/SEC/K/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/L/image\">\nhttp://travellermap.com/data/SEC/L/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/M/image\">\nhttp://travellermap.com/data/SEC/M/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/N/image\">\nhttp://travellermap.com/data/SEC/N/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/O/image\">\nhttp://travellermap.com/data/SEC/O/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/P/image\">\nhttp://travellermap.com/data/SEC/P/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/image\">\nhttp://travellermap.com/data/SEC/image\n<br>\n\n<a href=\"http://travellermap.com/api/coordinates?sx=SX&sy=SY\">\nhttp://travellermap.com/api/coordinates?sx=SX&sy=SY\n<br>\n\n<a href=\"http://travellermap.com/api/coordinates?sx=SX&sy=SY&hx=HX&hy=HY\">\nhttp://travellermap.com/api/coordinates?sx=SX&sy=SY&hx=HX&hy=HY\n<br>\n\n<a href=\"http://travellermap.com/api/coordinates?sector=SEC&hex=HEX\">\nhttp://travellermap.com/api/coordinates?sector=SEC&hex=HEX\n<br>\n\n<a href=\"http://travellermap.com/api/coordinates?sector=SEC\">\nhttp://travellermap.com/api/coordinates?sector=SEC\n<br>\n\n<a href=\"http://travellermap.com/api/credits?sector=SEC&scale=SCALE&options=OPTIONS &style=STYLE\">\nhttp://travellermap.com/api/credits?sector=SEC&scale=SCALE&options=OPTIONS &style=STYLE\n<br>\n\n<a href=\"http://travellermap.com/api/credits?sector=SEC&hex=HEX\">\nhttp://travellermap.com/api/credits?sector=SEC&hex=HEX\n<br>\n\n<a href=\"http://travellermap.com/api/credits?sx=SX&sy=SY\">\nhttp://travellermap.com/api/credits?sx=SX&sy=SY\n<br>\n\n<a href=\"http://travellermap.com/api/credits?sx=SX&sy=SY&hx=HX&hy=HY\">\nhttp://travellermap.com/api/credits?sx=SX&sy=SY&hx=HX&hy=HY\n<br>\n\n<a href=\"http://travellermap.com/api/credits?x=X&y=Y\">\nhttp://travellermap.com/api/credits?x=X&y=Y\n<br>\n\n<a href=\"http://www.travellermap.com/api/credits?x=-110&y=-70\">\nhttp://www.travellermap.com/api/credits?x=-110&y=-70\n<br>\n\n<a href=\"http://travellermap.com/api/sec?sector=SEC\">\nhttp://travellermap.com/api/sec?sector=SEC\n<br>\n\n<a href=\"http://travellermap.com/api/sec?sector=SEC&hex=HEX\">\nhttp://travellermap.com/api/sec?sector=SEC&hex=HEX\n<br>\n\n<a href=\"http://travellermap.com/api/sec?sx=SX&sy=SY\">\nhttp://travellermap.com/api/sec?sx=SX&sy=SY\n<br>\n\n<a href=\"http://travellermap.com/api/metadata?sector=SEC\">\nhttp://travellermap.com/api/metadata?sector=SEC\n<br>\n\n<a href=\"http://travellermap.com/api/metadata?sx=SX&sy=SY\">\nhttp://travellermap.com/api/metadata?sx=SX&sy=SY\n<br>\n\n<a href=\"http://www.travellermap.com/api/metadata?sector=SEC\">\nhttp://www.travellermap.com/api/metadata?sector=SEC\n<br>\n\n<a href=\"http://www.travellermap.com/api/msec?sector=SEC\">\nhttp://www.travellermap.com/api/msec?sector=SEC\n<br>\n\n<a href=\"http://www.travellermap.com/api/universe?era=ERA\">\nhttp://www.travellermap.com/api/universe?era=ERA\n<br>\n\n<a href=\"http://www.travellermap.com/api/tile?x=-24.5&y=Y8&scale=SCALE&options=OPTIONS &style=STYLE\">\nhttp://www.travellermap.com/api/tile?x=-24.5&y=Y8&scale=SCALE&options=OPTIONS &style=STYLE\n<br>\n\n<a href=\"http://travellermap.com/api/poster?sector=SEC\">\nhttp://travellermap.com/api/poster?sector=SEC\n<br>\n\n<a href=\"http://travellermap.com/api/poster?sector=SEC\">\nhttp://travellermap.com/api/poster?sector=SEC\n<br>\n\n<a href=\"http://travellermap.com/api/jumpmap?x=X&y=Y\">\nhttp://travellermap.com/api/jumpmap?x=X&y=Y\n<br>\n\n<a href=\"http://travellermap.com/api/jumpmap?sx=SX&-1=sy&hx=HX&hy=HY\">\nhttp://travellermap.com/api/jumpmap?sx=SX&-1=sy&hx=HX&hy=HY\n<br>\n\n<a href=\"http://travellermap.com/api/jumpmap?sector=SEC&hex=HEX\">\nhttp://travellermap.com/api/jumpmap?sector=SEC&hex=HEX\n<br>\n\n<a href=\"http://travellermap.com/api/msec?sector=SEC\">\nhttp://travellermap.com/api/msec?sector=SEC\n<br>\n\n<a href=\"http://travellermap.com/api/msec?sx=SX&sy=SY\">\nhttp://travellermap.com/api/msec?sx=SX&sy=SY\n<br>\n\n<a href=\"http://travellermap.com/api/jumpworlds?x=X&y=Y\">\nhttp://travellermap.com/api/jumpworlds?x=X&y=Y\n<br>\n\n<a href=\"http://travellermap.com/api/jumpworlds?sx=SX&sy=SY&hx=HX&hy=HY\">\nhttp://travellermap.com/api/jumpworlds?sx=SX&sy=SY&hx=HX&hy=HY\n<br>\n\n<a href=\"http://travellermap.com/api/jumpworlds?sector=SEC\n&hex=HEX\">http://travellermap.com/api/jumpworlds?sector=SEC&hex=HEX\n<br>\n\n<a href=\"http://travellermap.com/api/search?q=NAME\">\nhttp://travellermap.com/api/search?q=NAME\n<br>\n\n<a href=\"http://travellermap.com/api/universe\">\nhttp://travellermap.com/api/universe\n<br>\n\n<a href=\"http://www.travellermap.com/api/coordinates?sector=SEC&hex=HEX\">\nhttp://www.travellermap.com/api/coordinates?sector=SEC&hex=HEX\n<br>\n\n<a href=\"http://travellermap.com/data\">\nhttp://travellermap.com/data\n<br>\n\n<a href=\"http://travellermap.com/data/SEC\">\nhttp://travellermap.com/data/SEC\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/tab\">\nhttp://travellermap.com/data/SEC/tab\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/sec\">\nhttp://travellermap.com/data/SEC/sec\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/metadata\">\nhttp://travellermap.com/data/SEC/metadata\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/msec\">\nhttp://travellermap.com/data/SEC/msec\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/image\">\nhttp://travellermap.com/data/SEC/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/coordinates\">\nhttp://travellermap.com/data/SEC/coordinates\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/credits\">\nhttp://travellermap.com/data/SEC/credits\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/A\">\nhttp://travellermap.com/data/SEC/A\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/B\">\nhttp://travellermap.com/data/SEC/B\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/C\">\nhttp://travellermap.com/data/SEC/C\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/D\">\nhttp://travellermap.com/data/SEC/D\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/E\">\nhttp://travellermap.com/data/SEC/E\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/F\">\nhttp://travellermap.com/data/SEC/F\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/G\">\nhttp://travellermap.com/data/SEC/G\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/H\">\nhttp://travellermap.com/data/SEC/H\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/I\">\nhttp://travellermap.com/data/SEC/I\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/J\">\nhttp://travellermap.com/data/SEC/J\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/K\">\nhttp://travellermap.com/data/SEC/K\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/L\">\nhttp://travellermap.com/data/SEC/L\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/M\">\nhttp://travellermap.com/data/SEC/M\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/N\">\nhttp://travellermap.com/data/SEC/N\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/O\">\nhttp://travellermap.com/data/SEC/O\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/P\">\nhttp://travellermap.com/data/SEC/P\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/C/tab\">\nhttp://travellermap.com/data/SEC/C/tab\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/C/sec\">\nhttp://travellermap.com/data/SEC/C/sec\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/C/image\">\nhttp://travellermap.com/data/SEC/C/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/HEX/coordinates\">\nhttp://travellermap.com/data/SEC/HEX/coordinates\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/HEX/credits\">\nhttp://travellermap.com/data/SEC/HEX/credits\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/HEX/jump/9\">\nhttp://travellermap.com/data/SEC/HEX/jump/9\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/HEX/jump/9/image\">\nhttp://travellermap.com/data/SEC/HEX/jump/9/image\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/coordinates\">\nhttp://travellermap.com/data/SEC/coordinates\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/HEX/coordinates\">\nhttp://travellermap.com/data/SEC/HEX/coordinates\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/credits\">\nhttp://travellermap.com/data/SEC/credits\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/HEX/credits\">\nhttp://travellermap.com/data/SEC/HEX/credits\n<br>\n\n<a href=\"http://travellermap.com/data/SEC\">\nhttp://travellermap.com/data/SEC\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/sec\">\nhttp://travellermap.com/data/SEC/sec\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/tab\">\nhttp://travellermap.com/data/SEC/tab\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/C\">\nhttp://travellermap.com/data/SEC/C\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/C/sec\">\nhttp://travellermap.com/data/SEC/C/sec\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/C/tab\">\nhttp://travellermap.com/data/SEC/C/tab\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/metadata\">\nhttp://travellermap.com/data/SEC/metadata\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/msec\">\nhttp://travellermap.com/data/SEC/msec\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/HEX/jump/9\">\nhttp://travellermap.com/data/SEC/HEX/jump/9\n<br>\n\n<a href=\"http://travellermap.com/data/SEC/HEX/jump/9/image\">\nhttp://travellermap.com/data/SEC/HEX/jump/9/image\n<br>\n\n<a href=\"http://travellermap.com/data\">\nhttp://travellermap.com/data\n</a href>\n<br>\n<br>\n<br>\n<br>\n");

    jta4Sectors.setColumns(20);
    jta4Sectors.setRows(5);
    jta4Sectors.setText("A'yosea\nAblaz\nAbresh\nAed\nAfawahisa\nAfdranz\nAftailr\nAhkiweahi'\nAktifao\nAldebaran\nAlpha Crucis\nAmderstun\nAmdukan\nAngfutsag\nAnshnzhins\nAntares\nAntsrish\nAphlent\nAplie\nAstron\nAtaurre\nAvereguar\nAviel\nAzaz\nAzhpliabl\nBanners\nBar'kakr\nBiaqrpraze\nBlaskon\nBleblqansh\nBliaazh\nBliardlie\nBliatsiebl\nBrelia\nBrianch\nBrieplanz\nCanopus\nCentrax\nChetliashal\nChiajavlazh\nChiep Zhez\nChit Botshti\nChtatiate\nChtetaravl\nChtierabl\nChtijashal\nCore\nCorridor\nCrucis Margin\nDagudashaag\nDaibei\nDalchie Jdatl\nDark Nebula\nDarret\nDatsatl\nDelphi\nDeneb\nDfotseth\nDhuerorrg\nDiaspora\nDifralfler\nDlavvreplents\nDliaprqriez\nDliea\nDliebriatia\nDoklzots\nDrachabre\nDrakken\nDriaflfiazlats\nDriasera\nDriebliepl\nDrierii\nDriklfetvipr\nEahyaw\nEaliyasiyw\nEble\nEblia\nEe\nEekrookrigz\nEiaplial\nEie\nEkrbriansh\nElyetleisiyea\nEmpty Quarter\nEnchakl\nEose'o\nEsai'yo\nEtakhasoa\nEtlnchofr\nEvred\nExtolian\nExtremus\nEzhebl\nFa Dzaets\nFahreahluis\nFaoheiroi'iyhao\nFar Frontiers\nFavkranish\nFebiaiadl\nFeflolents\nFiaftashe\nFinggvakhou\nFlablenti\nFlaflzhevrients\nFolgore\nForeven\nFornast\nFrajbriekrensh\nFraklbizh\nFretvlobrpriet\nFrizhkladlncha\nFtaoiyekyu\nFtyer\nFulani\nGashikan\nGateway\nGenfert\nGh!hken\nGhoekhnael\nGlimmerdrift Reaches\nGn'hk'r\nGnaa Iimb'kr\nGrikr!ng\nGur\nGushemege\nGvurrdon\nGzaefueg\nGzektixk\nGzirr!k'l\nHadji\nHanstone\nHarbinger\nHarea\nHeakhafaw\nHfiywitir\nHinterworlds\nHkakhaeaw\nHlakhoi\nHolowon\nIa\nIanse\nIanshaplzdier\nIate\nIchnzhipr\nIdekl\nIebtladl\nIekrqre\nIenjaz\nIenza\nIeviash\nIjar\nIjidl\nIlelish\nIngukrax\nInshzish\nIphigenaia\nIrlaftalea\nIrugangog\nItsfiebl\nItvikiastaf\nIwahfuah\nJdeblinsiqr\nJdencheplia\nJdibrirvianj\nJdodiafldla\nJiechnzhitsonj\nK'trekreer\nKaa G!'kul\nKarleaya\nKatoonah\nKazhekliepr\nKefiykhta\nKepridlnchots\nKernzhez'a\nKfazz Ghik\nKhaeaw\nKharrthon\nKhoellighz\nKhuaryakh\nKiafldliezhjol\nKidunal\nKilong\nKlajipl\nKliadli\nKnaeleng\nKolire\nKoog\nKozhdanzhinz\nKring Noor\nKsinanirz\nKteex!\nKtiin'gzat\nLancask\nLangere\nLegend\nLeonidae\nLey Sector\nLishun\nListanaya\nLoplia\nLorspane\nLotsar\nLuretiir!girr\nMagyar\nMalorn\nMassilia\nMavuzog\nMbil!!gh\nMendan\nMeshan\nMighabohk\nMikhail\nMuarne\nMugheen't\nN!!krumbiix\nNadir\nNchadla\nNchefrij\nNevlieri\nNeworld\nNezhatliebr\nNgathksirz\nNiabrefvronz\nNialkridla\nNiechnchialbli\nNili\nNooq\nNseianzh\nNshofref\nNtetszif\nNuughe\nNzhajdibr\nNzhenzie\nNzhernzhi\nNzhiaapl\nNzievi\nOeghz Vaerrghr\nOhieraoi\nOiah\nOld Expanses\nPeklprozqratl\nPhlange\nPhlask\nPivchavia\nPlablshashchesh\nPliabriebl\nPliajenzh\nPliantiblbra\nPloblvla\nPlontarbli\nPofdriblnchitl\nPorlock\nPraklfrintsniadl\nPranzaklbraz\nPrashtsintsanch\nPreiel\nPrinjobliedl\nProanz\nProvence\nQlivinchezh\nQrecha\nQrefrnzhariefl\nRaakaan\nRavrazhe\nReaver's Deep\nReft Sector\nRfigh\nRiadrazh\nRiafrtafrpriafr\nRicenden\nRiekllezha\nRiftspan Reaches\nRimReach\nRuupiin\nRzakki\nSavria\nSetjefrshiatl\nShenzhtsenzh\nSheqraflal\nShiadldriadash\nShiazhanche\nShiblbropli\nSiantsaia\nSidiadl\nSieriatsklinzh\nSolomani Rim\nSpangele\nSpica\nSpinward Marches\nSporelex\nStaihaia'yo\nStar's End\nStiaklentsiefl\nStiatlchepr\nStienzarikl\nStinj Tianz\nStorr\nStotsshiflezh\nTahahroal\nTar'G'kell'p\nTatlnjaie\nTavrbovliepl\nTeahloarifu\nTenshlatsvo\nTensk\nThe Beyond\nTheron\nTheta Borealis\nTienspevnekr\nTlabraplzhied\nTlapltsia'o\nTledrbreplebr\nTlensbladrzhianzh\nTlialiedla\nTliblnzheflets\nTlinchjiee\nTlyasea\nTouchstone\nTracerie\nTreece\nTrenchans\nTrojan Reach\nTsadra\nTsadra Davr\nTsafrnchia\nTsebntsiatldlants\nTselidl\nTuglikki\nUistilrao\nUkaarriit!!b\nUn'k!!k'ng\nUsoirarloiau\nUstral Quadrant\nUuk\nUytal\nVanguard Reaches\nVedrabr\nVeg Fergakh\nVerge\nViajlefliez\nViashchieshiadl\nVietrienzhits\nVikrvidrvria\nVland\nVlofrkla\nVoblezitl\nVravrzha\nWaroatahe\nWindhorn\nWrence\nWrenton\nX'kug\nXaagr\nXeeleer\nYahehwe\nYejiariebr\nYiklerzdanzh\nYikvrior\nZabrziklezh\nZao Kfeng Ig Grilokh\nZarushagar\nZdafeflzadr\nZdechrebrvle\nZdiedeiant\nZdielbeppria\nZdienzfiaia\nZdietablie\nZe'shavrav\nZentse\nZenzhej\nZhechinje\nZhejnzhiikl\nZhenzhbrivtlo\nZhetsefr\nZhevreklnchi\nZhiaqrqiats\nZhiatienjiaz\nZhiejqrinzho\nZhiensh\nZhodane\nZiafrplians\nZietsebl\nZietssha\nZii\nZortakh\n");

    jta4UWP.setColumns(20);
    jta4UWP.setRows(5);

    javax.swing.GroupLayout panel4T5WorldLayout = new javax.swing.GroupLayout(panel4T5World);
    panel4T5World.setLayout(panel4T5WorldLayout);
    panel4T5WorldLayout.setHorizontalGroup(
      panel4T5WorldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 58, Short.MAX_VALUE)
    );
    panel4T5WorldLayout.setVerticalGroup(
      panel4T5WorldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 54, Short.MAX_VALUE)
    );

    jta4Bases.setColumns(20);
    jta4Bases.setRows(5);

    panel4WorldPic.setBackground(new java.awt.Color(0, 0, 0));
    panel4WorldPic.setPreferredSize(new java.awt.Dimension(100, 100));
    panel4WorldPic.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        panel4WorldPicMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout panel4WorldPicLayout = new javax.swing.GroupLayout(panel4WorldPic);
    panel4WorldPic.setLayout(panel4WorldPicLayout);
    panel4WorldPicLayout.setHorizontalGroup(
      panel4WorldPicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 100, Short.MAX_VALUE)
    );
    panel4WorldPicLayout.setVerticalGroup(
      panel4WorldPicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 100, Short.MAX_VALUE)
    );

    jta4Sub.setColumns(20);
    jta4Sub.setRows(5);

    setBackground(new java.awt.Color(0, 0, 0));
    setForeground(java.awt.Color.green);

    jcb4Sec.setToolTipText("Double Click to Download");
    jcb4Sec.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jcb4Sec.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jcb4SecMouseClicked(evt);
      }
    });
    jcb4Sec.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jcb4SecActionPerformed(evt);
      }
    });

    jcb4Sub.setToolTipText("Double click to Save details");
    jcb4Sub.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jcb4Sub.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jcb4SubMouseClicked(evt);
      }
    });
    jcb4Sub.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jcb4SubActionPerformed(evt);
      }
    });

    jcb4Sys.setToolTipText("Double click to locate Capital (if any)");
    jcb4Sys.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jcb4Sys.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jcb4SysMouseClicked(evt);
      }
    });
    jcb4Sys.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jcb4SysActionPerformed(evt);
      }
    });

    jcb4Star.setToolTipText("Double click to Load details");
    jcb4Star.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jcb4Star.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jcb4StarMouseClicked(evt);
      }
    });
    jcb4Star.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jcb4StarActionPerformed(evt);
      }
    });

    panel4Sec.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    panel4Sec.setMaximumSize(new java.awt.Dimension(207, 255));
    panel4Sec.setMinimumSize(new java.awt.Dimension(207, 255));
    panel4Sec.setPreferredSize(new java.awt.Dimension(207, 255));

    panel4Sub.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    panel4Sub.setMaximumSize(new java.awt.Dimension(193, 255));
    panel4Sub.setMinimumSize(new java.awt.Dimension(193, 255));
    panel4Sub.setOpaque(true);
    panel4Sub.setPreferredSize(new java.awt.Dimension(193, 255));

    panel4Sys.setBackground(new java.awt.Color(255, 255, 255));
    panel4Sys.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    panel4Sys.setMaximumSize(new java.awt.Dimension(200, 255));
    panel4Sys.setMinimumSize(new java.awt.Dimension(200, 255));
    panel4Sys.setOpaque(true);
    panel4Sys.setPreferredSize(new java.awt.Dimension(200, 255));
    panel4Sys.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseMoved(java.awt.event.MouseEvent evt) {
        panel4SysMouseMoved(evt);
      }
    });
    panel4Sys.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        panel4SysMouseClicked(evt);
      }
    });

    jsp4Maps.setPreferredSize(new java.awt.Dimension(600, 600));

    panel4Maps.setToolTipText("Pink = 10D ~ Grav Limit   Blue = 100D Jump Limit   Gray = 1000D Maneuver Limit");
    panel4Maps.setPreferredSize(new java.awt.Dimension(600, 600));
    panel4Maps.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        panel4MapsMouseClicked(evt);
      }
    });
    jsp4Maps.setViewportView(panel4Maps);

    jScrollPane1.setViewportView(jsp4Maps);

    panel4Strength.setBackground(new java.awt.Color(0, 0, 0));
    panel4Strength.setForeground(java.awt.Color.lightGray);

    SDBs.setDisplayedMnemonic('S');
    SDBs.setForeground(java.awt.Color.green);
    SDBs.setText("SDBs");
    SDBs.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        SDBsMouseClicked(evt);
      }
    });

    defbats.setForeground(java.awt.Color.green);
    defbats.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    defbats.setText("X");
    defbats.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        defbatsMouseClicked(evt);
      }
    });

    Troops.setDisplayedMnemonic('T');
    Troops.setForeground(java.awt.Color.green);
    Troops.setText("Troops");
    Troops.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        TroopsMouseClicked(evt);
      }
    });

    troopunits.setForeground(java.awt.Color.green);
    troopunits.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    troopunits.setText("X");
    troopunits.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        troopunitsMouseClicked(evt);
      }
    });

    squadrons.setForeground(java.awt.Color.green);
    squadrons.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    squadrons.setText("X");
    squadrons.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        squadronsMouseClicked(evt);
      }
    });

    sdbs1.setForeground(java.awt.Color.green);
    sdbs1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    sdbs1.setText("X");
    sdbs1.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        sdbs1MouseClicked(evt);
      }
    });

    Rons.setDisplayedMnemonic('M');
    Rons.setForeground(java.awt.Color.green);
    Rons.setText("Max Rons");
    Rons.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        RonsMouseClicked(evt);
      }
    });

    CF.setDisplayedMnemonic('D');
    CF.setForeground(java.awt.Color.green);
    CF.setText("Def. CF");
    CF.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        CFMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout panel4StrengthLayout = new javax.swing.GroupLayout(panel4Strength);
    panel4Strength.setLayout(panel4StrengthLayout);
    panel4StrengthLayout.setHorizontalGroup(
      panel4StrengthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panel4StrengthLayout.createSequentialGroup()
        .addGap(0, 0, 0)
        .addGroup(panel4StrengthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(Rons)
          .addComponent(SDBs)
          .addComponent(Troops)
          .addComponent(CF))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(panel4StrengthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(defbats, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(troopunits, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(squadrons, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(sdbs1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(0, 0, 0))
    );
    panel4StrengthLayout.setVerticalGroup(
      panel4StrengthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panel4StrengthLayout.createSequentialGroup()
        .addGap(0, 0, 0)
        .addGroup(panel4StrengthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(SDBs)
          .addComponent(sdbs1))
        .addGap(0, 0, 0)
        .addGroup(panel4StrengthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(squadrons)
          .addComponent(Rons))
        .addGroup(panel4StrengthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(CF)
          .addComponent(defbats))
        .addGap(0, 0, 0)
        .addGroup(panel4StrengthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(Troops)
          .addComponent(troopunits))
        .addGap(0, 0, 0))
    );

    panel4T5PBG.setBackground(new java.awt.Color(0, 0, 0));
    panel4T5PBG.setForeground(java.awt.Color.lightGray);
    panel4T5PBG.setOpaque(false);

    jLabel5.setForeground(java.awt.Color.green);
    jLabel5.setText("Pop");
    jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jLabel5MouseClicked(evt);
      }
    });

    jLabel6.setForeground(java.awt.Color.green);
    jLabel6.setText("Belts");
    jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jLabel6MouseClicked(evt);
      }
    });

    jLabel7.setForeground(java.awt.Color.green);
    jLabel7.setText("GGs");
    jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jLabel7MouseClicked(evt);
      }
    });

    jLabel8.setForeground(java.awt.Color.lightGray);
    jLabel8.setText("0");

    jLabel9.setForeground(java.awt.Color.lightGray);
    jLabel9.setText("0");

    jLabel10.setForeground(java.awt.Color.lightGray);
    jLabel10.setText("0");

    jLabel11.setForeground(java.awt.Color.green);
    jLabel11.setText("W");
    jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jLabel11MouseClicked(evt);
      }
    });

    jLabel12.setForeground(java.awt.Color.lightGray);
    jLabel12.setText("0");

    javax.swing.GroupLayout panel4T5PBGLayout = new javax.swing.GroupLayout(panel4T5PBG);
    panel4T5PBG.setLayout(panel4T5PBGLayout);
    panel4T5PBGLayout.setHorizontalGroup(
      panel4T5PBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panel4T5PBGLayout.createSequentialGroup()
        .addGap(2, 2, 2)
        .addGroup(panel4T5PBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel5)
          .addComponent(jLabel6)
          .addComponent(jLabel7)
          .addComponent(jLabel11))
        .addGap(18, 18, 18)
        .addGroup(panel4T5PBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel12)
          .addComponent(jLabel8)
          .addComponent(jLabel9)
          .addComponent(jLabel10))
        .addGap(0, 0, 0))
    );
    panel4T5PBGLayout.setVerticalGroup(
      panel4T5PBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panel4T5PBGLayout.createSequentialGroup()
        .addGroup(panel4T5PBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel5)
          .addComponent(jLabel8))
        .addGap(0, 0, 0)
        .addGroup(panel4T5PBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel6)
          .addComponent(jLabel9))
        .addGap(0, 0, 0)
        .addGroup(panel4T5PBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel7)
          .addComponent(jLabel10))
        .addGap(0, 0, 0)
        .addGroup(panel4T5PBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel11)
          .addComponent(jLabel12)))
    );

    panel4Pic.setBackground(new java.awt.Color(0, 0, 0));
    panel4Pic.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    panel4Pic.setToolTipText("Cilck saves in T5");
    panel4Pic.setPreferredSize(new java.awt.Dimension(200, 100));
    panel4Pic.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseMoved(java.awt.event.MouseEvent evt) {
        panel4PicMouseMoved(evt);
      }
    });
    panel4Pic.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        panel4PicMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout panel4PicLayout = new javax.swing.GroupLayout(panel4Pic);
    panel4Pic.setLayout(panel4PicLayout);
    panel4PicLayout.setHorizontalGroup(
      panel4PicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );
    panel4PicLayout.setVerticalGroup(
      panel4PicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 97, Short.MAX_VALUE)
    );

    js4Dist.setBackground(new java.awt.Color(0, 0, 0));
    js4Dist.setForeground(java.awt.Color.green);
    js4Dist.setMajorTickSpacing(1);
    js4Dist.setMaximum(9);
    js4Dist.setPaintLabels(true);
    js4Dist.setPaintTicks(true);
    js4Dist.setSnapToTicks(true);
    js4Dist.setToolTipText("+/- Jump Number");
    js4Dist.setValue(1);
    js4Dist.setPreferredSize(new java.awt.Dimension(200, 40));
    js4Dist.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        js4DistStateChanged(evt);
      }
    });

    jl4Jump.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jl4Jump.setModel(new javax.swing.AbstractListModel() {
      String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
      public int getSize() { return strings.length; }
      public Object getElementAt(int i) { return strings[i]; }
    });
    jl4Jump.setToolTipText("Click to view, Double click to Jump");
    jl4Jump.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jl4JumpMouseClicked(evt);
      }
      public void mousePressed(java.awt.event.MouseEvent evt) {
        jl4JumpMousePressed(evt);
      }
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        jl4JumpMouseReleased(evt);
      }
    });
    jl4Jump.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
      public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
        jl4JumpValueChanged(evt);
      }
    });
    jsp4Jump.setViewportView(jl4Jump);

    jta4All.setColumns(20);
    jta4All.setRows(5);
    jta4All.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jta4All.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jta4AllMouseClicked(evt);
      }
    });
    jsp4All.setViewportView(jta4All);

    panel4Jump.setOpaque(false);
    panel4Jump.setPreferredSize(new java.awt.Dimension(200, 102));

    jLabel3.setBackground(new java.awt.Color(0, 0, 0));
    jLabel3.setDisplayedMnemonic('C');
    jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel3.setForeground(java.awt.Color.green);
    jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel3.setText("Cost");
    jLabel3.setToolTipText("Click changes Cr");
    jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jLabel3.setOpaque(true);
    jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jLabel3MouseClicked(evt);
      }
    });

    jComboBox19.setBackground(new java.awt.Color(0, 0, 0));
    jComboBox19.setEditable(true);
    jComboBox19.setForeground(new java.awt.Color(255, 255, 255));
    jComboBox19.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100", "200", "300", "400", "500", "600", "700", "800", "900", "1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700", "1800", "1900", "2000", "2100", "2200", "2300", "2400", "2500" }));
    jComboBox19.setToolTipText("Starship size in dtons");
    jComboBox19.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jComboBox19MouseClicked(evt);
      }
    });
    jComboBox19.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jComboBox19ActionPerformed(evt);
      }
    });

    jCheckBox2.setBackground(new java.awt.Color(0, 0, 0));
    jCheckBox2.setForeground(java.awt.Color.green);
    jCheckBox2.setText("Unrefined");
    jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBox2ActionPerformed(evt);
      }
    });

    jCheckBox1.setBackground(new java.awt.Color(0, 0, 0));
    jCheckBox1.setForeground(java.awt.Color.green);
    jCheckBox1.setText("dT");
    jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBox1ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout panel4JumpLayout = new javax.swing.GroupLayout(panel4Jump);
    panel4Jump.setLayout(panel4JumpLayout);
    panel4JumpLayout.setHorizontalGroup(
      panel4JumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panel4JumpLayout.createSequentialGroup()
        .addGroup(panel4JumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
          .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(panel4JumpLayout.createSequentialGroup()
            .addComponent(jComboBox19, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addGap(0, 0, 0))
    );
    panel4JumpLayout.setVerticalGroup(
      panel4JumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panel4JumpLayout.createSequentialGroup()
        .addGroup(panel4JumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jComboBox19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jCheckBox1)
          .addComponent(jCheckBox2))
        .addGap(0, 0, 0)
        .addComponent(jLabel3)
        .addGap(0, 0, 0))
    );

    jcb4All.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "jta4All", "jta4Sec", "jta4Sub", "jta4Sys", "jta4Line", "jta4Info", "jta4Near", "jta4Orb", "jta4Dest", "jta4Str", "jta4HTML", "jta4UWP", "jta4Bases" }));
    jcb4All.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jcb4All.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jcb4AllActionPerformed(evt);
      }
    });

    jtf4UWP.setToolTipText("Enter UWP or UPP & click");
    jtf4UWP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jtf4UWP.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jtf4UWPMouseClicked(evt);
      }
    });
    jtf4UWP.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jtf4UWPActionPerformed(evt);
      }
    });

    jcb4Lang.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vilani", "Zhodani", "Vargr", "Aslan", "Droyne", "Other" }));
    jcb4Lang.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jcb4Lang.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jcb4LangMouseClicked(evt);
      }
    });
    jcb4Lang.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jcb4LangActionPerformed(evt);
      }
    });

    jtf4Word.setToolTipText("Click gets word, CRL+C copies");
    jtf4Word.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jtf4Word.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jtf4WordMouseClicked(evt);
      }
    });
    jtf4Word.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        jtf4WordKeyPressed(evt);
      }
    });

    jcb4Options.setMaximumRowCount(10);
    jcb4Options.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "_Choose", "Squadrons", "Troops", "Counter", "Scripting", "Launch", "Box", "Backup", "LPT", "XML", "Empire" }));
    jcb4Options.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jcb4Options.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jcb4OptionsMouseClicked(evt);
      }
    });
    jcb4Options.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jcb4OptionsActionPerformed(evt);
      }
    });

    jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

    sC.setText("sc");
    sC.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        sCMouseClicked(evt);
      }
    });

    sB.setText("sb");
    sB.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        sBMouseClicked(evt);
      }
    });

    sS.setText("ss");
    sS.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        sSMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(sC, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
      .addComponent(sB, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
      .addComponent(sS, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addComponent(sC)
        .addGap(0, 0, 0)
        .addComponent(sB)
        .addGap(0, 0, 0)
        .addComponent(sS)
        .addGap(0, 0, 0))
    );

    jtf4Find.setText("1910");
    jtf4Find.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jtf4Find.setEnabled(false);
    jtf4Find.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jtf4FindMouseClicked(evt);
      }
    });

    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0-Hex", "1-Name", "2-UWP", "  Starport", "  Size", "  Atmosphere", "  Hydrosphere", "  Population", "  Government", "  Law Level", "  Tech Level", "3-Remarks", "4-Importance", "5-Economic", "  Resources", "  Labour", "  Infrastructure", "  Efficiency", "6-Cultural", "  Homogeneity", "  Acceptance", "  Strangeness", "  Symbols", "7-Nobles", "    B-Knight", "    c-Baronet", "    C-Baron", "    D-Marquis", "    e-Viscount", "    E-Count", "    f-Duke", "    F-Duke", "    G-Archduke", "    H-Emperor", "8-Bases", "9-Zones", "  Green", "  Amber", "  Red", "10-PBG", "  No pop", "  Low pop", "  Med pop", "  HIGH POP", "11-Worlds", "12-Allegiance", "13-Stellar", "  Color", "  Decimal", "  Star Size", "  Amount" }));
    jComboBox1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jComboBox1.setEnabled(false);
    jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jComboBox1MouseClicked(evt);
      }
    });
    jComboBox1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jComboBox1ActionPerformed(evt);
      }
    });

    jButton1.setText("Cap");
    jButton1.setToolTipText("Locate Subsector capital (or most important)");
    jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        jButton1MousePressed(evt);
      }
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        jButton1MouseReleased(evt);
      }
    });
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });

    jcb4Career.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Navy", "Navy Officer", "Marine", "Marine Officer", "Army", "Army Officer", "Other", "Merchant", "-Choose-" }));
    jcb4Career.setToolTipText("Click and Hold Down!");
    jcb4Career.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jcb4Career.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jcb4CareerMouseClicked(evt);
      }
    });
    jcb4Career.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jcb4CareerActionPerformed(evt);
      }
    });

    js4Terms.setModel(new javax.swing.SpinnerNumberModel());
    js4Terms.setToolTipText("Terms");
    js4Terms.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    js4Terms.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        js4TermsStateChanged(evt);
      }
    });
    js4Terms.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        js4TermsMouseClicked(evt);
      }
    });

    jtf4UPP.setText("AAAAAA");
    jtf4UPP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jtf4UPP.setMinimumSize(new java.awt.Dimension(6, 1));
    jtf4UPP.setPreferredSize(new java.awt.Dimension(45, 20));
    jtf4UPP.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jtf4UPPMouseClicked(evt);
      }
    });
    jtf4UPP.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jtf4UPPActionPerformed(evt);
      }
    });
    jtf4UPP.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        jtf4UPPKeyPressed(evt);
      }
    });

    jButton2.setText("S");
    jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jButton2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton2ActionPerformed(evt);
      }
    });

    jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel4.setForeground(java.awt.Color.green);
    jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    jLabel4.setText("UWP");
    jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
    jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jLabel4MouseClicked(evt);
      }
    });

    Sex.setSelected(true);
    Sex.setToolTipText("Male");
    Sex.setIconTextGap(0);
    Sex.setMargin(new java.awt.Insets(0, 0, 0, 0));
    Sex.setOpaque(false);
    Sex.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        SexActionPerformed(evt);
      }
    });

    label1.setAlignment(java.awt.Label.CENTER);
    label1.setForeground(new java.awt.Color(255, 255, 255));
    label1.setText("About");
    label1.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        label1MouseClicked(evt);
      }
    });

    jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Regina", "Fraynj", "Kesali", "Capital", "bits2Page()", "createFamily()", "createNobles()", "createAdmiral()", "createCommodores()", "createAdmiral()", "createNPCs()", "createMOfficers()", "createBases()", "createOrbitCounters()", "updatePic()" }));
    jComboBox2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jComboBox2ActionPerformed(evt);
      }
    });

    jButton3.setText("go");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton3ActionPerformed(evt);
      }
    });

    jcb4Rank.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    jcb4Rank.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jcb4RankActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(panel4Pic, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(panel4Strength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(panel4T5PBG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jcb4Sec, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(panel4Sec, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(js4Dist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jsp4Jump, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(panel4Jump, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
          .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGap(0, 0, 0)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jcb4Sub, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(0, 0, 0)
            .addComponent(jcb4Sys, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jcb4Options, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jcb4All, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(0, 0, 0)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jComboBox1, 0, 71, Short.MAX_VALUE)
                  .addComponent(jtf4UWP))
                .addGap(0, 0, 0)
                .addComponent(jtf4Find, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addGroup(layout.createSequentialGroup()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(0, 0, 0)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jcb4Rank, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jcb4Lang, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(Sex))
              .addGroup(layout.createSequentialGroup()
                .addComponent(jcb4Career, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(js4Terms, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jtf4UPP, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(panel4Sub, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(jtf4Word, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addComponent(panel4Sys, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
          .addComponent(jsp4All, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jcb4Star, 0, 617, Short.MAX_VALUE)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)))
    );

    layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jcb4Sub, panel4Sub});

    layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jComboBox1, jtf4UWP});

    layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jcb4Lang, jcb4Rank});

    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jcb4Sec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(0, 0, 0)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(255, 255, 255)
            .addComponent(jLabel4)
            .addGap(0, 0, 0)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(panel4Strength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(panel4T5PBG, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(panel4Sec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(panel4Sys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jcb4Options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf4UWP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcb4Lang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf4Word, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jcb4All, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf4Find, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcb4Career, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(js4Terms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf4UPP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
              .addComponent(panel4Sub, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(0, 0, 0)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
              .addComponent(jComboBox2)
              .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
              .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jcb4Rank)
              .addComponent(jButton2)
              .addComponent(Sex))))
        .addGap(0, 0, 0)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(panel4Pic, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, 0)
            .addComponent(panel4Jump, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, 0)
            .addComponent(js4Dist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jsp4Jump)
            .addGap(0, 0, 0)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(jsp4All)))
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jcb4Star, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(jcb4Sub, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jcb4Sys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addGap(0, 0, 0)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 815, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Sex, jButton2, jButton3, jComboBox2, jcb4All, jcb4Career, jcb4Lang, jcb4Options, jcb4Rank, js4Terms, jtf4UPP, jtf4UWP, jtf4Word, label1});

    layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jComboBox1, jtf4Find});

    layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {panel4Sec, panel4Sub});

  }// </editor-fold>//GEN-END:initComponents

  private void jcb4SecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb4SecActionPerformed
    jcb4SecAction(evt);
  }//GEN-LAST:event_jcb4SecActionPerformed

  private void jcb4SubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb4SubActionPerformed
    jcb4SubAction(evt);
  }//GEN-LAST:event_jcb4SubActionPerformed

  private void jcb4SysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb4SysActionPerformed
    jcb4SysAction(evt);
  }//GEN-LAST:event_jcb4SysActionPerformed

  private void panel4SysMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel4SysMouseClicked
    panel4SysClick(evt);
  }//GEN-LAST:event_panel4SysMouseClicked

  private void jta4SecMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jta4SecMouseClicked
    setUWP();
  }//GEN-LAST:event_jta4SecMouseClicked

  private void panel4SysMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel4SysMouseMoved
    panel4SysMove(evt);
  }//GEN-LAST:event_panel4SysMouseMoved

  private void panel4MapsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel4MapsMouseClicked
    panel4MapClick(evt);
  }//GEN-LAST:event_panel4MapsMouseClicked

  private void jcb4StarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb4StarActionPerformed
    jcb4StarAction(evt);
  }//GEN-LAST:event_jcb4StarActionPerformed

  private void js4DistStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_js4DistStateChanged
    js4DistChange(evt);
  }//GEN-LAST:event_js4DistStateChanged

  private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
    jLabel3Click(evt);
  }//GEN-LAST:event_jLabel3MouseClicked

  private void jComboBox19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox19ActionPerformed
    calcCost();
  }//GEN-LAST:event_jComboBox19ActionPerformed

  private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
    jcb2Action(evt);
  }//GEN-LAST:event_jCheckBox2ActionPerformed

  private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
    jcb1Action(evt);
  }//GEN-LAST:event_jCheckBox1ActionPerformed

  private void jta4OrbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jta4OrbMouseClicked
    jta4OrbClick(evt);
  }//GEN-LAST:event_jta4OrbMouseClicked

  private void jcb4SysMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcb4SysMouseClicked
    jcb4SysClick(evt);
    jcb4SysItemChange();
  }//GEN-LAST:event_jcb4SysMouseClicked

  private void jcb4SubMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcb4SubMouseClicked
    jcb4SubClick(evt);
  }//GEN-LAST:event_jcb4SubMouseClicked

  private void jcb4SecMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcb4SecMouseClicked
    jcb4SecClick(evt);
  }//GEN-LAST:event_jcb4SecMouseClicked

  private void jcb4StarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcb4StarMouseClicked
    jcb4StarClick(evt);
  }//GEN-LAST:event_jcb4StarMouseClicked

  private void SDBsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SDBsMouseClicked
    SDBsClick(evt);
  }//GEN-LAST:event_SDBsMouseClicked

  private void TroopsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TroopsMouseClicked
    TroopsClick(evt);
  }//GEN-LAST:event_TroopsMouseClicked

  private void RonsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RonsMouseClicked
    RonsClick(evt);
  }//GEN-LAST:event_RonsMouseClicked

  private void CFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CFMouseClicked
    CFClick(evt);
  }//GEN-LAST:event_CFMouseClicked

  private void sdbs1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sdbs1MouseClicked
    SDBs1Click(evt);
  }//GEN-LAST:event_sdbs1MouseClicked

  private void squadronsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squadronsMouseClicked
    squadronsClick(evt);
  }//GEN-LAST:event_squadronsMouseClicked

  private void defbatsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_defbatsMouseClicked
    defbatsClick(evt);
  }//GEN-LAST:event_defbatsMouseClicked

  private void troopunitsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_troopunitsMouseClicked
    troopsunitClick(evt);
  }//GEN-LAST:event_troopunitsMouseClicked

  private void jl4JumpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jl4JumpMouseClicked
    jl4JumpClick(evt);
  }//GEN-LAST:event_jl4JumpMouseClicked

  private void jl4JumpValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jl4JumpValueChanged
    jl4JumpChange(evt);
  }//GEN-LAST:event_jl4JumpValueChanged

  private void jcb4AllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb4AllActionPerformed
    jcb4AllAction(evt);
//    writeSectorInfo();
//    writeSubsectorInfo();
  }//GEN-LAST:event_jcb4AllActionPerformed

  private void panel4WorldPicMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel4WorldPicMouseClicked
    panel4WorldPicClick(evt);
  }//GEN-LAST:event_panel4WorldPicMouseClicked

  private void jtf4WordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtf4WordMouseClicked
    jtf4WordClick(evt);
  }//GEN-LAST:event_jtf4WordMouseClicked

  private void jcb4LangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb4LangActionPerformed
    jcb4LangAction(evt);
  }//GEN-LAST:event_jcb4LangActionPerformed

  private void jtf4UWPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf4UWPActionPerformed
    jtf4UWPAction(evt);
  }//GEN-LAST:event_jtf4UWPActionPerformed

  private void jtf4UWPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtf4UWPMouseClicked
    jtf4UWPClick(evt);
  }//GEN-LAST:event_jtf4UWPMouseClicked

  private void jcb4OptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb4OptionsActionPerformed
    jcb4OptionsAction(evt);
  }//GEN-LAST:event_jcb4OptionsActionPerformed

  private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
    jButton1Pressed(evt);
  }//GEN-LAST:event_jButton1MousePressed

  private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseReleased
    jButton1Released(evt);
  }//GEN-LAST:event_jButton1MouseReleased

  private void sCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sCMouseClicked
    sCMouseClick(evt);
  }//GEN-LAST:event_sCMouseClicked

  private void sBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sBMouseClicked
    sBMouseClick(evt);
  }//GEN-LAST:event_sBMouseClicked

  private void sSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sSMouseClicked
    sSMouseClick(evt);
  }//GEN-LAST:event_sSMouseClicked

  private void jl4JumpMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jl4JumpMousePressed
    jl4JumpPressed(evt);
  }//GEN-LAST:event_jl4JumpMousePressed

  private void jl4JumpMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jl4JumpMouseReleased
    jl4JumpReleased(evt);
  }//GEN-LAST:event_jl4JumpMouseReleased

  private void panel4PicMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel4PicMouseClicked
    panel4ClickClick(evt);
  }//GEN-LAST:event_panel4PicMouseClicked

  private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
    jLabel5MouseClick(evt);
  }//GEN-LAST:event_jLabel5MouseClicked

  private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
    jLabel6MouseClick(evt);
  }//GEN-LAST:event_jLabel6MouseClicked

  private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
    jLabel7MouseClick(evt);
  }//GEN-LAST:event_jLabel7MouseClicked

  private void jLabel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseClicked
    jLabel11MouseClick(evt);
  }//GEN-LAST:event_jLabel11MouseClicked

  private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
    jComboBox1Action(evt);
  }//GEN-LAST:event_jComboBox1ActionPerformed

  private void jtf4FindMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtf4FindMouseClicked
    jtf4FindMouseClick(evt);
  }//GEN-LAST:event_jtf4FindMouseClicked

  private void jComboBox19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox19MouseClicked
    jComboBox19Click(evt);
  }//GEN-LAST:event_jComboBox19MouseClicked

  private void panel4PicMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel4PicMouseMoved
//    panel4PicMouseMove(evt);
  }//GEN-LAST:event_panel4PicMouseMoved

  private void jcb4OptionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcb4OptionsMouseClicked
    jcb4OptionsMouseClick(evt);
  }//GEN-LAST:event_jcb4OptionsMouseClicked

  private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked
    jComboBox1MouseClick(evt);
  }//GEN-LAST:event_jComboBox1MouseClicked

  private void jtf4UPPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf4UPPActionPerformed
    jtf4UPPAction(evt);
  }//GEN-LAST:event_jtf4UPPActionPerformed

  private void jcb4LangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcb4LangMouseClicked
    jcb4LangMouseClick(evt);
  }//GEN-LAST:event_jcb4LangMouseClicked

  private void jtf4UPPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtf4UPPMouseClicked
    jtf4UPPMouseClick(evt);
  }//GEN-LAST:event_jtf4UPPMouseClicked

  private void jcb4CareerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcb4CareerMouseClicked
    jcb4CareerMouseClick(evt);
  }//GEN-LAST:event_jcb4CareerMouseClicked

  private void js4TermsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_js4TermsStateChanged
    js4TermsStateChange(evt);
  }//GEN-LAST:event_js4TermsStateChanged

  private void js4TermsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_js4TermsMouseClicked
    js4TermsMouseClick(evt);
  }//GEN-LAST:event_js4TermsMouseClicked

  private void jtf4WordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf4WordKeyPressed
    jtf4WordKeyPress(evt);
  }//GEN-LAST:event_jtf4WordKeyPressed

  private void jtf4UPPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf4UPPKeyPressed
    jtf4UPPKeyPress(evt);
  }//GEN-LAST:event_jtf4UPPKeyPressed

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    jButton1Action(evt);
  }//GEN-LAST:event_jButton1ActionPerformed

  private void jta4AllMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jta4AllMouseClicked
    jta4AllClick(evt);
//    writeSectorInfo();
  }//GEN-LAST:event_jta4AllMouseClicked

  private void jcb4CareerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb4CareerActionPerformed
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      String s = "";
      s += GlobalMethods.comment("=", 80) + CRLF;
      String method = Thread.currentThread().getStackTrace()[1].getMethodName();
      s += "\t" + method + CRLF;
//      s += "" + " = " + "" + CRLF;
      System.out.print(s);
//      JOptionPane.showMessageDialog(null, s);
    }
    //</editor-fold>
    if (jcb4Career.getSelectedItem().toString().equals("-Choose-")) {
      int num = GlobalMethods.roll1d();
      jcb4Career.setSelectedIndex(num);
    }
    num = GlobalMethods.roll1d();
    //
    num = 0;
    //
    js4Terms.setValue(num);
    jtf4WordClick(me);
    jtf4UPPAction(ae);
    //jcb4RankClick(ae);
    //jButton2.doClick();
    jcb4CareerMouseClick(me);
  }//GEN-LAST:event_jcb4CareerActionPerformed

  private void SexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SexActionPerformed
    String sex = "";
    if (Panel4T5Locator.Sex.isSelected()) {
      sex = "Male";
    } else {
      sex = "Female";
    }
    Sex.setToolTipText(sex);
  }//GEN-LAST:event_SexActionPerformed

  private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    {
      boolean DEBUG = true;
      //DEBUG = false;
      if (DEBUG) { // true or false
        System.out.print(GlobalMethods.comment("=", 80));
        System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
                .getMethodName());
        //System.out.println("DEBUG" + " = " + DEBUG);
      }
    }
    //</editor-fold>
//    writeSectorInfo();
//    T5Locator.setSystem();
    createSubPic();
//    saveSubPic();
  }//GEN-LAST:event_jLabel4MouseClicked

  private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    jButton2Action(evt);
  }//GEN-LAST:event_jButton2ActionPerformed

  private void label1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label1MouseClicked
    JFrame jf = new JFrame();
    String txt = "ABOUT\n"
            + "\n"
            + "Programmed by Mark Ferguson	(maggot.iiss@sky.com)\n"
            + "\n"
            + "https://github.com/MaggotIISS\n"
            + "\n"
            + "The Traveller game in all forms is owned by Far Future Enterprises. \n"
            + "Copyright 1977 - 2019 Far Future Enterprises. \n"
            + "\n"
            + "Traveller is a registered trademark of Far Future Enterprises. \n"
            + "Far Future permits web sites and fanzines for this game, provided \n"
            + "it contains this notice, that Far Future is notified, and subject \n"
            + "to a withdrawal of permission on 90 days notice. \n"
            + "\n"
            + "Any use of Far Future Enterprises's copyrighted material or \n"
            + "trademarks anywhere on this web site and its files should not \n"
            + "be viewed as a challenge to those copyrights or trademarks. \n";
    JTextArea jta = new JTextArea(txt, 50, 50);
    jta.setEditable(false);
    JScrollPane jsp = new JScrollPane(jta);
    jf.getContentPane().add(jsp);
    jf.setSize(500, 500);
    jf.setLocation(300, 300);
    jf.setVisible(true);
  }//GEN-LAST:event_label1MouseClicked

  private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
    String com = jComboBox2.getSelectedItem().toString();
    switch (com) {
      case "Capital": {
        jcb4Sec.setSelectedItem("Core");
        jcb4Sub.setSelectedItem("G Core");
//        jcb4Sys.setSelectedItem("2737 Kesali");
        jcb4Sys.setSelectedIndex(23);
        break;
      }
      case "Kesali": {
        jcb4Sec.setSelectedItem("Vland");
        jcb4Sub.setSelectedItem("P Kakadan");
        jcb4Sys.setSelectedItem("2737 Kesali");
        jcb4Sys.setSelectedIndex(14);
        break;
      }
      case "Fraynj": {
        jcb4Sec.setSelectedItem("Gushemege");
        jcb4Sub.setSelectedItem("J Sallounn");
//        jcb4Sys.setSelectedItem("1623 Fraynj");
        jcb4Sys.setSelectedIndex(44);
        break;
      }
      case "Regina": {
        jcb4Sec.setSelectedItem("Spinward Marches");
        jcb4Sub.setSelectedItem("C Regina");
//        jcb4Sys.setSelectedItem("1910 Regina");
        jcb4Sys.setSelectedIndex(13);
        break;
      }
      case "bits2Page()": {
        args = new String[]{"C:/T5/"
          + jcb4Sec.getSelectedItem().toString().trim() + "/"
          + jcb4Sub.getSelectedItem().toString().trim()
        };
        web.bits2page.Bits2Page.main(args);
        break;
      }
      case "createFamily()": {
        //Panel4T5CounterMaker.createFamily();
        args = new String[]{
          jcb4Sec.getSelectedItem().toString().trim(),
          jcb4Sub.getSelectedItem().toString().trim(),
          jcb4Sys.getSelectedItem().toString().trim()
        };
        empires.Empire.main(args);
        break;
      }
      case "createNobles()": {
        //Panel4T5CounterMaker.createAdmiral();
        args = new String[]{
          jcb4Sec.getSelectedItem().toString().trim(),
          jcb4Sub.getSelectedItem().toString().trim(),
          jcb4Sys.getSelectedItem().toString().trim()
        };
        empires.Empire.createNobles(args);
        break;
      }
      case "createAdmiral()": {
        Panel4T5CounterMaker.createAdmiral();
        break;
      }
      case "createBases()": {
        Panel4T5CounterMaker.createBases();
        break;
      }
      case "createCommodores()": {
        Panel4T5CounterMaker.createCommodores();
        break;
      }
      case "createMOfficers()": {
        Panel4T5CounterMaker.createMOfficers();
        break;
      }
      case "createNPCs()": {
        Panel4T5CounterMaker.createNPCs();
        break;
      }
      case "createOrbitCounters()": {
        Panel4T5CounterMaker.createOrbitCounters();
        break;
      }
      case "updatePic()": {
        updatePic(me);
        break;
      }
      default: {
        //<editor-fold defaultstate="collapsed" desc="JOP">
        {
          String s = "";
          s += com + CRLF;
          s += "" + CRLF;
          JTextArea jta = new JTextArea(s, 50, 80);
          JScrollPane jsp = new JScrollPane(jta);
//          JOptionPane.showMessageDialog(null, jsp);
          System.out.println("" + " = " + s);
        }
        //</editor-fold>
      }
    }
  }//GEN-LAST:event_jComboBox2ActionPerformed

  private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    int num = jComboBox2.getItemCount();
    for (int j = 0; j < num; j++) {
      String it = jComboBox2.getItemAt(j);
      if (!it.startsWith("//")) {
        if (it.contains("()")) {
          jComboBox2.setSelectedIndex(j);
        }
      }
    }
//    updatePic(me);
  }//GEN-LAST:event_jButton3ActionPerformed

    private void jcb4RankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb4RankActionPerformed
      //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
      boolean DEBUG = false;
      if (DEBUG) { // true or false
        String s = "";
        s += GlobalMethods.comment("=", 80) + CRLF;
        String method = Thread.currentThread().getStackTrace()[1].getMethodName();
        s += "\t" + method + CRLF;
//      s += "" + " = " + "" + CRLF;
        System.out.print(s);
//      JOptionPane.showMessageDialog(null, s);
      }
      //</editor-fold>
      jcb4RankClick(evt);
    }//GEN-LAST:event_jcb4RankActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  static javax.swing.JLabel CF;
  static javax.swing.JLabel Rons;
  static javax.swing.JLabel SDBs;
  public static javax.swing.JCheckBox Sex;
  static javax.swing.JLabel Troops;
  public static javax.swing.JLabel defbats;
  private javax.swing.JButton jButton1;
  public static javax.swing.JButton jButton2;
  private javax.swing.JButton jButton3;
  private javax.swing.JCheckBox jCheckBox1;
  private javax.swing.JCheckBox jCheckBox2;
  private javax.swing.JComboBox<String> jComboBox1;
  private javax.swing.JComboBox jComboBox19;
  private static javax.swing.JComboBox<String> jComboBox2;
  private javax.swing.JLabel jLabel1;
  public static javax.swing.JLabel jLabel10;
  static javax.swing.JLabel jLabel11;
  public static javax.swing.JLabel jLabel12;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private static javax.swing.JLabel jLabel4;
  static javax.swing.JLabel jLabel5;
  static javax.swing.JLabel jLabel6;
  static javax.swing.JLabel jLabel7;
  public static javax.swing.JLabel jLabel8;
  public static javax.swing.JLabel jLabel9;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  public static javax.swing.JComboBox<String> jcb4All;
  public static javax.swing.JComboBox jcb4Career;
  public static javax.swing.JComboBox<String> jcb4Lang;
  public static javax.swing.JComboBox<String> jcb4Options;
  public static javax.swing.JComboBox<String> jcb4Rank;
  public static javax.swing.JComboBox jcb4Sec;
  public static javax.swing.JComboBox jcb4Star;
  public static javax.swing.JComboBox<String> jcb4Sub;
  public static javax.swing.JComboBox<String> jcb4Sys;
  private javax.swing.JList jl4Jump;
  private static javax.swing.JSlider js4Dist;
  public static javax.swing.JSpinner js4Terms;
  private javax.swing.JScrollPane jsp4All;
  private javax.swing.JScrollPane jsp4Jump;
  private javax.swing.JScrollPane jsp4Maps;
  public static javax.swing.JTextArea jta4All;
  public static javax.swing.JTextArea jta4Bases;
  private javax.swing.JTextArea jta4Dest;
  private javax.swing.JTextArea jta4HTML;
  private static javax.swing.JTextArea jta4Info;
  private javax.swing.JTextArea jta4Line;
  public static javax.swing.JTextArea jta4Near;
  private javax.swing.JTextArea jta4Orb;
  private javax.swing.JTextArea jta4Sec;
  private javax.swing.JTextArea jta4Sectors;
  private javax.swing.JTextArea jta4Str;
  public static javax.swing.JTextArea jta4Sub;
  private javax.swing.JTextArea jta4Sys;
  public static javax.swing.JTextArea jta4UWP;
  private javax.swing.JTextField jtf4Find;
  public static javax.swing.JTextField jtf4UPP;
  public static javax.swing.JTextField jtf4UWP;
  public static javax.swing.JTextField jtf4Word;
  private java.awt.Label label1;
  private javax.swing.JPanel panel4Jump;
  public static panels.Panel4T5BitSub panel4Maps;
  public static javax.swing.JPanel panel4Pic;
  public static panels.Panel4Grid3x3 panel4Sec;
  private javax.swing.JPanel panel4Strength;
  public static panels.Panel4Grid6x6 panel4Sub;
  public static panels.Panel4T5BitSub panel4Sys;
  private javax.swing.JPanel panel4T5PBG;
  private javax.swing.JPanel panel4T5World;
  static javax.swing.JPanel panel4WorldPic;
  private javax.swing.JLabel sB;
  private javax.swing.JLabel sC;
  private javax.swing.JLabel sS;
  public static javax.swing.JLabel sdbs1;
  public static javax.swing.JLabel squadrons;
  public static javax.swing.JLabel troopunits;
  // End of variables declaration//GEN-END:variables

  //<editor-fold defaultstate="collapsed" desc="variables">
  /**
   * unrefined fuel cost
   */
  public static int unrefined = 1;
  /**
   * refined fuel cost
   */
  public static boolean Refined;
  /**
   * type gives colour of star
   */
  public static String type = "G";
  /**
   * colour brightness of star
   */
  public static int dec = 2;
  /**
   * Stellar star size as Roman numeral
   */
  public static String size = "V";
  static boolean running;
  public static String[] lines;
  public static String[] data;
  static String UWP = "A788899-C";
  static int ws;
  boolean error = false;
  Color o = Color.blue;
  Color be = new Color(0, 128, 255);
  Color a = Color.cyan;
  Color fi = new Color(128, 255, 128);
  Color gi = Color.yellow;
  Color k = Color.orange;
  Color m = Color.red;
  int mix = 0;
  int max = 0;
  int miy = 0;
  int may = 0;
  int stars;
  int g = 0;
  int b = 0;
  int other = 0;
  int systems = 0;

  /**
   *
   */
  public static int d;

  /**
   *
   */
  public static int min = 0;
  static int left;
  static int top;
  static BufferedImage bi = new BufferedImage(600, 600,
          BufferedImage.TYPE_3BYTE_BGR);
//TYPE_INT_ARGB
  Properties properties = new Properties();
  String dest = "0000";
  String string = "";
  String gg = "";
  String bw = "";
  String dist = null;
  String[] sats;
  String[] lets;
  String mwtype = "";
  String wtype = "";

  /**
   *
   */
  public static String t;

  /**
   *
   */
  public static String s;
  Runtime runtime;
  Process process = null;

  private static int orbits = 20;
  private static String[] orbit = new String[orbits];
  private static boolean[] isEmpty = new boolean[orbits];
  private static JPanel jp;
  private static JFrame jf;
  private static String[] text;
  private static String SDBso = "";
  private static String SQUADRONSo;
  private static String DEFENCEBATTSo;
  private static String TROOPUNITSo;
  static String[] bits;
  private static int[] len;
  private static int startuwp;
  private static int end;
  private static int titleline;
  private static int num;
  private static String[] XY;
  private static String[] secs;
  private static String sub;
  private static Color dark = new Color(51, 51, 51);
  private static MouseEvent me;
  private static int x;
  private static int y;
  private static int subw;
  private static int subh;
  private static String X, Y;
  private static String out = "";
  private static String shape = "Hex";
  private static DefaultListModel<String> dlm;
  private static Color col;
  private static String Quality;
  private static String Yards;
  private static String Repairs;
  private static String Fuel;
  private static String Downport;
  private static String Highport;
  private static String possBases;
  private static int refined = 10;
  private static int cost;
  private static ChangeEvent ce = null;
  private static File f;
  private static int count = 0;
  private static String Primary;
  private static String es0 = "";
  private static String es1 = "";
  private static String es2 = "";
  private static String es3 = "";
  private static int orbitnum = 0;
  private static int eo1 = 0;
  private static int eo2 = 0;
  private static int eo3 = 0;
  private static String[] Stars;
  private static int habz;
  private static String HZ = "";
  private static String HZVar = "";
  private static String Climate = "";
  private static String[] args = {"NO"};
  private static final String trav = "http://travellermap.com/";
  private static final String api = trav + "api";
  private static final String dat = trav + "data";
  private static String fname = "Spinward%20Marches";
  private static String webpath = dat + "/" + fname;
  private static final String C = "C:/";
  private static final String home = "/T5/";
  private static String hdpath = C + home;
  private static DefaultComboBoxModel<String> dcbm;
  private JTextArea jta;
  private File dir;
  private File file;
  public static int world1;
  private int rings = 0;
  private int moons;
  private URL url;
  private int hz;
  private ComboBoxModel<String> cbm;
  private ActionEvent ae;
  private int jump;
  private String atmo;
  private int selected = 0;
  private String[] liness;
  //<editor-fold defaultstate="collapsed" desc="String[] Hab">
  /*
   */

  /**
   *
   */
  public static final String[] Hab = new String[]{
    "12",
    "Sp/Si", "A0-A3", "A4-A8", "A9-F1", "F2-F6", "F7-G1", "G2-G8", "G9-K3",
    "K4-K8", "K9-M3", "M4-M8", "M9",
    "Ia", "12", "12", "12", "12", "11", "12", "12", "12", "12", "12", "12",
    "Ib", "11", "11", "10", "10", "10", "10", "10", "10", "10", "11", "11",
    "II", "9", "9", "8", "8", "8", "8", "8", "9", "9", "10", "11",
    "III", "8", "8", "7", "6", "6", "6", "7", "7", "8", "8", "9",
    "IV", "7", "7", "6", "6", "5", "5", "5", "-1", "-1", "-1", "-1",
    "V", "7", "7", "6", "5", "4", "3", "2", "2", "0", "0", "0",
    "VI", "-1", "-1", "-1", "3", "3", "2", "1", "0", "0", "0", "0",
    "VII", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
    "D", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"
  };

  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] Size">
  public static String[] Size = {
    //Size = 2D-2
    //if 10, reroll 1D+9
    "3",
    "Digit", "Dia(mi)", "Dia(km)",
    "0", "Asteroid Belt", "varies",
    "1", "1,000", "1,600",
    "2", "2,000", "3,200",
    "3", "3,000", "4,800",
    "4", "4,000", "6,400",
    "5", "5,000", "8,000",
    "6", "6,000", "9,600",
    "7", "7,000", "12,200",
    "8", "8,000", "13,800",
    "9", "9,000", "14,400",
    "A", "10,000", "16,000",
    "B", "11,000", "17,600",
    "C", "12,000", "19,200",
    "D", "13,000", "20,800",
    "E", "14,000", "22,400",
    "F", "15,000", "24,000"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] Placement">
  /*
   2D LGG SGG IG Belt World1 World2
   GG and Belt placement is based on the HZ.
   World placement is based on Orbit.
   If an orbits is duplicated or precluded, adjust to
   an adjacent or the closest possible orbits.
   */
  public static final String[] Placement = new String[]{
    "7",
    "2D", "LGG", "SGG", "IG", "Belt", "World1", "World2",
    "2", "-3", "-2", "+1", "-1", "10", "17",
    "3", "-2", "-1", "+2", "0", "8", "16",
    "4", "-1", "0", "+3", "+1", "6", "15",
    "5", "+0", "+1", "+4", "+2", "4", "14",
    "6", "+1", "+2", "+5", "+3", "2", "13",
    "7", "+2", "+3", "+6", "+4", "0", "12",
    "8", "+3", "+4", "+7", "+5", "1", "11",
    "9", "+4", "+5", "+8", "+6", "3", "10",
    "10", "+5", "+6", "+9", "+7", "5", "9",
    "11", "+6", "+7", "+10", "+8", "7", "8",
    "12", "+7", "+8", "+11", "+9", "10", "7"
  };

  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] GGs">
  public static String[] GGs = {
    "5",
    "2D", "Size", "WSize", "Dia", "Type",
    "1", "L", "20", "20,000", "",
    "2", "M", "21", "30,000", "Neptune",
    "3", "N", "22", "40,000", "",
    "4", "P", "23", "50,000", "",
    "5", "Q", "24", "60,000", "",
    "6", "R", "25", "70,000", "Saturn",
    "7", "S", "26", "80,000", "",
    "8", "T", "27", "90,000", "Jupiter",
    "9", "U", "28", "125,000", "2Mj",
    "10", "V", "29", "180,000", "4Mj",
    "11", "W", "30", "220,000", "6Mj",
    "12", "X", "31", "250,000", "8Mj"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] StarColor">
  public static String[] StarColor = {
    "3",
    "Code", "Description", "Temperature (K)",
    "O", "Blue", ">33,000",
    "B", "Blue-White", "10,000-33,000",
    "A", "Blue-White", "7,500-10,000",
    "F", "Yellow-White", "6,000-7,500",
    "G", "Yellow", "5,200-6,000",
    "K", "Orange", "3,700-5,200",
    "M", "Red", "2,000-3,700"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] StarSize">
  public static String[] StarSize = {
    "3",
    "Code", "Description", "Diameter (Sol = 1)",
    "Ia", "Bright Supergiant", "52 - 3500",
    "Ib", "Weak Supergiant", "30 - 3000",
    "II", "Bright Giant", "14 - 1000",
    "III", "Normal Giant", "4.6 - 360",
    "IV", "Subgiant", "3.3 - 13",
    "V", "Main Sequence Star", "0.2 - 10",
    "VI", "Subdwarf", "0.1 - 1.2",
    "VII", "White Dwarf", "0.006 - 0.018",
    "D", "White Dwarf", "0.006 - 0.018"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] OtherWorld">
  public String[] OtherWorld = {
    "Hospitable", "Planetoid", "IceWorld", "RadWorld", "Inferno",
    "BigWorld", "Worldlet", "InnerWorld", "StormWorld"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] InnerSats">
  public String[] InnerSats = {
    "Worldlet", "Worldlet", "Inferno",
    "InnerWorld", "StormWorld", "RadWorld", "BigWorld"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] OuterSats">
  public String[] OuterSats = {
    "Worldlet", "Worldlet", "IceWorld",
    "OuterWorld", "StormWorld", "RadWorld", "BigWorld"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] HospitableSats">
  public String[] HospitableSats = new String[]{
    "Worldlet", "Worldlet", "Inferno",
    "Hospitable", "StormWorld", "RadWorld", "BigWorld"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] MainworldType">
  public static String[] MainworldType = {
    "5",
    "Flux", "World", "HZ Var", "Close", "Far",
    "-6", "Close Satellite", "-2", "A", "N",
    "-5", "Far Satellite", "-1", "B", "O",
    "-4", "Far Satellite", "-1", "C", "P",
    "-3", "Close Satellite", "-1", "D", "Q",
    "-2", "World", "0", "E", "R",
    "-1", "World", "0", "F", "S",
    "0", "World", "0", "G", "T",
    "1", "World", "0", "H", "U",
    "2", "World", "0", "I", "V",
    "3", "World", "1", "J", "W",
    "4", "World", "1", "K", "X",
    "5", "World", "1", "L", "Y",
    "6", "World", "2", "M", "Z"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] InnerWorlds">
  public String[] InnerWorlds = {
    "Worldlet", "Inferno", "InnerWorld", "BigWorld", "StormWorld", "RadWorld"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] OuterWorlds">
  public String[] OuterWorlds = {
    "Worldlet", "IceWorld", "IceWorld", "BigWorld", "IceWorld", "RadWorld"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] HospitableWorlds">
  public String[] HospitableWorlds = new String[]{
    "Worldlet", "Inferno", "Hospitable", "BigWorld", "StormWorld", "RadWorld"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] D10Limit">
  public static final String[] D10Limit = {
    "9",
    "TD", "Ia", "Ib", "II", "III", "IV", "V", "VI", "D",
    "A0", "7", "5", "4", "1", "1", "0", "-1", "-1",
    "A5", "7", "5", "3", "1", "0", "-1", "-1", "-1",
    "F0", "7", "6", "3", "1", "0", "-1", "-1", "-1",
    "F5", "7", "6", "4", "1", "0", "-1", "-1", "-1",
    "G0", "8", "6", "4", "1", "0", "-1", "-1", "-1",
    "G5", "9", "7", "5", "3", "0", "-1", "-1", "-1",
    "K0", "10", "7", "6", "3", "0", "-1", "-1", "-1",
    "K5", "10", "8", "7", "5", "-2", "-1", "-1", "-1",
    "M0", "11", "10", "8", "6", "-2", "-1", "-1", "-1",
    "M5", "11", "11", "9", "8", "-2", "-1", "-1", "-1",
    "M9", "12", "11", "10", "8", "-2", "-1", "-1", "-1"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] D100Limit">
  public static final String[] D100Limit = {
    "9",
    "TD", "Ia", "Ib", "II", "III", "IV", "V", "VI", "D",
    "A0", "10", "9", "7", "6", "5", "5", "-2", "-1",
    "A5", "10", "9", "7", "5", "4", "4", "-2", "-1",
    "F0", "11", "9", "7", "5", "4", "3", "-2", "-1",
    "F5", "11", "9", "7", "5", "4", "3", "3", "-1",
    "G0", "11", "10", "8", "6", "4", "2", "2", "-1",
    "G5", "12", "10", "8", "7", "4", "2", "1", "-1",
    "K0", "12", "11", "9", "7", "5", "2", "0", "-1",
    "K5", "13", "12", "10", "9", "-2", "1", "0", "-1",
    "M0", "14", "13", "11", "9", "-2", "1", "0", "-1",
    "M5", "15", "14", "13", "11", "-2", "0", "-1", "-1",
    "M9", "15", "15", "13", "12", "-2", "-1", "-1", "-1"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] D1000Limit">
  public static final String[] D1000Limit = {
    "9",
    "TD", "Ia", "Ib", "II", "III", "IV", "V", "VI", "D",
    "A0", "13", "12", "11", "9", "9", "8", "-2", "-1",
    "A5", "14", "12", "10", "9", "8", "7", "-2", "-1",
    "F0", "14", "12", "10", "9", "8", "7", "-2", "-1",
    "F5", "14", "12", "11", "9", "8", "7", "7", "-1",
    "G0", "15", "13", "11", "9", "8", "6", "6", "-1",
    "G5", "15", "14", "12", "10", "8", "6", "5", "-1",
    "K0", "16", "14", "12", "10", "8", "6", "5", "-1",
    "K5", "16", "15", "13", "12", "-2", "6", "5", "-1",
    "M0", "17", "16", "14", "12", "-2", "5", "4", "-1",
    "M5", "18", "17", "16", "14", "-2", "5", "2", "-1",
    "M9", "18", "18", "16", "15", "-2", "4", "1", "-1"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] EHex">
  public String[] EHex = {
    "2",
    "eHex", "Decimal",
    "0", "0",
    "1", "1",
    "2", "2",
    "3", "3",
    "4", "4",
    "5", "5",
    "6", "6",
    "7", "7",
    "8", "8",
    "9", "9",
    "A", "10",
    "B", "11",
    "C", "12",
    "D", "13",
    "E", "14",
    "F", "15",
    "G", "16",
    "H", "17",
    "J", "18",
    "K", "19",
    "L", "20",
    "M", "21",
    "N", "22",
    "P", "23",
    "Q", "24",
    "R", "25",
    "S", "26",
    "T", "27",
    "U", "28",
    "V", "29",
    "W", "30",
    "X", "31*",
    "Y", "32*",
    "Z", "33*"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] Atmo">
  public static String[] Atmo = {
    //Atmo = Flux + Size
    //if Atmo<0 or Size=0 then Atmo=0
    //if Atmo>F then Atmo=F
    "3",
    "Digit", "Description", "Effects",
    "0", "Vacuum", "S3",
    "1", "Trace", "S3",
    "2", "VThin, Tainted", "P1, S2",
    "3", "VThin", "S2",
    "4", "Thin, Tainted", "P1, S1",
    "5", "This", "S1",
    "6", "Standard", "",
    "7", "Standard, Tainted", "P1",
    "8", "Dense", "",
    "9", "Dense, Tainted", "P1",
    "A", "Exotic", "P1",
    "B", "Corrosive", "C1 P1",
    "C", "Insidious", "C2 P1",
    "D", "Dense, High", "varies",
    "E", "Ellipsoid", "varies",
    "F", "Thin, Low", "varies"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] Hydro">
  public static String[] Hydro = {
    //Hydro = Flux + Atmo
    //Max = A
    //if Siz < 2 then Hyd = 0
    //if Atm < 2 or Atm > 9 then Atmo DM-4
    //if Hyd <0 then 0
    //if Hyd > A then A
    "2",
    "Digit", "Description",
    "0", "Desert World",
    "1", "10%",
    "2", "20%",
    "3", "30%",
    "4", "40%",
    "5", "50%",
    "6", "60%",
    "7", "70%",
    "8", "80%",
    "9", "90%",
    "A", "Water World"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] Pop">
  public static String[] Pop = {
    //pop = 2D-2
    //if 10, reroll 9 + 1D
    "3",
    "Digit", "Description", "Value",
    "0", "Unpopulated", "",
    "1", "Tens", "0",
    "2", "Hundred", "00",
    "3", "Thousand", ",000",
    "4", "Ten thousand", "0,000",
    "5", "Hundred thousand", "00,000",
    "6", "Million", ",000,000",
    "7", "Ten million", "0,000,000",
    "8", "Hundred million", "00,000,000",
    "9", "Billion", ",000,000,000",
    "A", "Ten billion", "0,000,000,000",
    "B", "Hundred billion", "00,000,000,000",
    "C", "Trillion", ",000,000,000,000",
    "D", "Ten trillion", "0,000,000,000,000",
    "E", "Hundred trillion", "00,000,000,000,0000",
    "F", "Quadrillion", ",000,000,000,000,000"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] Govt">
  public static String[] Govt = {
    //Gov = Flux + Pop, if Gov > F then Gov = F
    "3",
    "Digit", "Description", "Note",
    "0", "No Government Structure", "Family bonds predominate",
    "1", "Company/Corporation", "Rule by a managerial elite",
    "2", "Participating Democracy", "Rule by popular vote",
    "3", "Self-Perpetuating Oligarchy", "Rule by a restricted minority with "
    + "little or no input from the masses",
    "4", "Representative Democracy", "Government by proxy",
    "5", "Feudal Technocracy", "Governmental relationships based on mutually "
    + "beneficial technical activities",
    "6", "Captive Government/Colony", "Rule by a leadership answerable to an "
    + "outside group",
    "7", "Balkanization", "Rival governments continually compete for control "
    + "of the world",
    "8", "Civil Service Bureaucracy", "Rule by agencies employing "
    + "individuals selected by merit",
    "9", "Impersonal Bureaucracy", "Impersonal agencies rule",
    "A", "Charismatic Dictatorship", "Government by a single leader "
    + "enjoying the confidence of the citizens",
    "B", "Non-Charismatic Dictatorship", "Government by the successor "
    + "to a charismatic dictator",
    "C", "Charismatic Oligarchy", "Government by a select religious, "
    + "mystic, or psionic group, organization, or class enjoying the "
    + "overwhelming confidence of the citizenry",
    "D", "Religious Dictatorship", "With little or no regard for the needs "
    + "of the citizenry",
    "E", "Religious Autocracy", "Government by a single religious, mystic, "
    + "or psionic leader weilding absolute power",
    "F", "Totalitarian Oligarchy", "Government by an all powerfule minority "
    + "which maintains absolute control through widespread coercion and "
    + "oppression"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] Law">
  public static String[] Law = {
    //Law = Flux + Go
    //if Law > J then Law = J
    "3",
    "Digit", "Description", "Note",
    "0", "No Law", "No prohibitions",
    "1", "Low Law", "Prohibition of WMD, Psi weapons",
    "2", "Low Law", "Prohibition of 'portable' weapons",
    "3", "Low Law", "Prohibition of Acid, Fire, Gas weapons",
    "4", "Moderate Law", "Laser, Beam weapons prohibited",
    "5", "Moderate Law", "Shock, EMP, Rad, Mag, Grav weapons prohibited",
    "6", "Moderate Law", "Pohibition of Machineguns",
    "7", "Moderate Law", "Prohibition of Pistols",
    "8", "High Law", "Open display of weapons prohibited",
    "9", "High Law", "Weapons outside the home prohibited",
    "A", "Extreme Law", "Weapon possession prohibited",
    "B", "Extreme Law", "Continental passports required",
    "C", "Extreme Law", "Unrestricted invasion of privacy",
    "D", "Extreme Law", "Paramilitary law enforcement",
    "E", "Extreme Law", "Full-fledged police state",
    "F", "Extreme Law", "Daily life rigidly controlled",
    "G", "Extreme Law", "Disproportionate punishments",
    "H", "Extreme Law", "Legalized oppressive practices",
    "J", "Extreme Law", "Routinely oppressive and restrictive"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] Tech">
  public static String[] Tech = {
    //Starport A = +6
    //B = +4
    //C = +2
    //F = +1
    //X = -4
    "3",
    "Digit", "", "",
    "0", "", "",
    "1", "", "",
    "2", "", "",
    "3", "", "",
    "4", "", "",
    "5", "", "",
    "6", "", "",
    "7", "", "",
    "8", "", "",
    "9", "", "",
    "A", "", "",
    "B", "", "",
    "C", "", "",
    "D", "", "",
    "E", "", "",
    "F", "", ""
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] Remarks">
  public static String[] Remarks = {
    "9",
    "Code", "Siz", "Atm", "Hyd", "Pop", "Govt", "Law", "Definition", "Formula",
    //---------------------------------PLANETARY
    "As", "0", "0", "0", "", "", "", "Asteroid", "",
    "De", "23456789", "0", "", "", "", "", "Desert", "",
    "Fl", "", "ABC", "123456789A", "", "", "", "Fluid", "",
    "Ga", "678", "568", "567", "", "", "", "Garden World", "",
    "He", "3459ABC", "2479ABC", "012", "", "", "", "Hell World", "",
    "Ic", "", "01", "123456789A", "", "", "", "Ice Capped", "",
    "Oc", "ABC", "", "A", "", "", "", "Ocean World", "",
    "Va", "", "0", "", "", "", "", "Vacuum", "",
    "Wa", "56789", "", "A", "", "", "", "Water World", "",
    //---------------------------------POPULATION
    "Di", "", "", "", "0", "0", "0", "Dieback (000-T)", "",
    "Ba", "", "", "", "0", "0", "0", "Barren", "",
    "Lo", "", "", "", "123", "", "", "Low Population", "",
    "Ni", "", "", "", "456", "", "", "Non Industrial", "",
    "Ph", "", "", "", "8", "", "", "Pre High", "",
    "Hi", "", "", "", "9ABC", "", "", "High Population", "",
    //---------------------------------ECONOMIC
    "Pa", "", "456789", "45678", "48", "", "", "Pre Agricultural", "",
    "Ag", "", "456789", "45678", "567", "", "", "Agricultural", "",
    "Na", "", "0123", "0123", "6789ABC", "", "", "Non Agricultural", "",
    "Pi", "", "012479", "", "78", "", "", "Pre Industrial", "",
    "In", "", "012479", "", "9ABC", "", "", "industrial", "",
    "Po", "", "2345", "0123", "", "", "", "Poor", "",
    "Pr", "", "68", "", "59", "", "", "Pre Rich", "",
    "Ri", "", "68", "", "678", "", "", "Rich", "",
    //---------------------------------CLIMATE
    "Fr", "23456789", "", "123456789A", "", "", "", "Frozen", "HZ +2 or outer",
    "Ho", "", "", "", "", "", "", "Hot", "HZ -1",
    "Co", "", "", "", "", "", "", "Cold", "HZ +1",
    "Lk", "", "", "", "", "", "", "Locked", "Close Satellite",
    "Tr", "6789", "456789", "34567", "", "", "", "Tropic", "HZ -1",
    "Tu", "6789", "456789", "34567", "", "", "", "Tundra", "HZ +1",
    "Tz", "", "", "", "", "", "", "Twilight Zone", "Orbit 0-1",
    //---------------------------------SECONDARY
    "Fa", "", "456789", "45678", "23456", "", "", "Farming",
    "Not MainWorld.  HZ",
    "Mi", "", "", "", "23456", "", "", "Mining", "Not MainWorld.  MainWorld=In",
    "Mr", "", "", "", "", "", "", "Military Rule by Regional Power", "",
    "Px", "", "23AB", "12345", "3456", "", "6789", "Prison.  Exile Camp", "",
    "Pe", "", "23AB", "12345", "3456", "6", "6789", "Penal Colony", "",
    "Re", "", "", "", "1234", "6", "45", "Reserve", "",
    //---------------------------------POLITICAL
    "Cp", "", "", "", "", "", "", "Subsector Capital", "Imperial",
    "Cs", "", "", "", "", "", "", "Client State", "Imperial",
    "Cx", "", "", "", "", "", "", "Sector Capital", "Imperial",
    "Cy", "", "", "", "", "", "", "Colony", "O:xxyy (p434)",
    //---------------------------------SPECIAL
    "Sa", "", "", "", "", "", "", "Satellite", "",
    "Fo", "", "", "", "", "", "", "Forbidden", "Red Zone",
    "Pz", "", "", "", "789ABC", "", "", "Puzzle", "Amber Zone",
    "Da", "", "", "", "0123456", "", "", "Dangerous", "Amber Zone",
    "Ab", "", "", "", "", "", "", "Data Repository", "",
    "An", "", "", "", "", "", "", "Ancient Site", "",
    "Rs", "", "", "", "", "", "", "Research Station", "",
    "RsA", "", "", "", "", "", "", "Research Station Alpha", "",
    "RsB", "", "", "", "", "", "", "Research Station Beta", "",
    //    "", "", "", "", "", "", "", "", "",
    "RsD", "", "", "", "", "", "", "Research Station Delta", ""
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] NIL">
  public static String[] NIL = {
    "5",
    "Pop", "Atm", "TL", "Comment", "Note",
    "7+", "2-9", "1+", "Intelligent life evolved on this world", "Natives",
    "7+", "A+", "1+",
    "Local intelligent life incompatible with human enviroments", "Exotics",
    "7+", "0-1", "1+", "Sophonts evolved elsewhere and settled here years ago",
    "Transplants",
    "0", "2+", "1+",
    "Intelligent life evolved on this world, but is now extinct", "Extinct",
    "0", "0-1", "1+", "Evidence of Transplants, but are no longer present",
    "Vanished",
    "1-3", "", "", "Non permanent commercial or scientific activity",
    "Transients",
    "4-6", "", "", "The initial steps of creating a colony", "Settlers"
  //  if Gov == 1   Locals are company employees
  //  if Gov == 6   Locals are colonists from a nearby world
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] N">
  public static String[] N = {
    "3",
    "Code", "Rank", "TC",
    "A", "Gentleman", "Peer",
    "B", "Knight", "any",
    "c", "Baronet", "Pa Pr",
    "C", "Baron", "Ag Ri",
    "D", "Marquis", "Pi",
    "e", "Viscount", "Ph",
    "E", "Count", "Hi",
    "f", "Duke", "In",
    "F", "Duke", "In",
    "G", "Archduke", "",
    "H", "Emperor", ""
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] B">
  public static String[] B = {
    "3",
    "Digit", "Description", "Alleg",
    "C", "Corsair Base", "Vargr",
    "D", "Naval Depot", "Any",
    "K", "Naval Base", "Any",
    "M", "Military Base", "Any",
    "N", "Naval Base", "Imperial",
    "R", "Clan Base", "Aslan",
    "S", "Scout Base", "Imperial",
    "T", "Tlaukhu Base", "Aslan",
    "V", "Exploration Base", "Any",
    "W", "Scout Way Station", "Imperial",
    "X", "Relay Station", "Zhodani"
  };
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] Zones">
  public static String[] Zones = {
    "2",
    "Code", "Description",
    "R", "Red - Interdicted. Dangerous.  Prohibited.  Imperial.",
    "A", "Amber - Potentially dangerous.  Caution advised.  Imperial.",
    "-", "Green - Unrestricted.  Imperial.",
    "G", "Green - Unrestricted.  Imperial.",
    "B", "Blue - Technologically Elevated Dicatorship.  TNE (circa 1202).",
    "F", "Forbidden - Access prohibited.  Zhodani.",
    "U", "Unabsorbed - Access restricted.  Zhodani."
  };
//</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="String[] Alleg">
  public static String[] Alleg = {
    "2",
    "Code", "Description",
    "AnTC", "Anubian Trade Coalition",
    "AsIf", "Iyeaao'fte (Tlaukhu client state)",
    "AsMw", "Aslan Hierate, single multiple-world clan dominates",
    "AsOf", "Oleaiy'fte (Tlaukhu client state)",
    "AsSc", "Aslan Hierate, multiple clans split control",
    "AsSF", "Aslan Hierate, small facility (temporary)",
    "AsT0",
    "Aslan Hierate, Tlaukhu control, Yerlyaruiwo (1), Hrawoao (13), Eisohiyw (14), Ferekhearl (19)",
    "AsT1",
    "Aslan Hierate, Tlaukhu control, Khauleairl (2), Estoieie' (16), Toaseilwi (22)",
    "AsT2", "Aslan Hierate, Tlaukhu control, Syoisuis (3)",
    "AsT3",
    "Aslan Hierate, Tlaukhu control, Tralyeaeawi (4), Yulraleh (12), Aiheilar (25), Riyhalaei (28)",
    "AsT4",
    "Aslan Hierate, Tlaukhu control, Eakhtiyho (5), Eteawyolei' (11), Fteweyeakh (23)",
    "AsT5", "Aslan Hierate, Tlaukhu control, Hlyueawi (6), Isoitiyro (15)",
    "AsT6",
    "Aslan Hierate, Tlaukhu control, Uiktawa (7), Iykyasea (17), Faowaou (27)",
    "AsT7",
    "Aslan Hierate, Tlaukhu control, Ikhtealyo (8), Tlerfearlyo (20), Yehtahikh (24)",
    "AsT8",
    "Aslan Hierate, Tlaukhu control, Seieakh (9), Akatoiloh (18), We'okunir (29)",
    "AsT9",
    "Aslan Hierate, Tlaukhu control, Aokhalte (10), Sahao' (21), Ouokhoi (26)",
    "AsTv", "Aslan Hierate, Tlaukhu vassal clan dominates",
    "AsTz", "Aslan Hierate, Zodia clan (Tralyeaeawi vassal)",
    "AsVc", "Aslan Hierate, vassal clan dominates",
    "AsWc", "Aslan Hierate, single one-world clan dominates",
    "AsXX", "Aslan Hierate, unknown",
    "BlSo", "Belgardian Sojurnate",
    "CaAs", "Carrillian Assembly",
    "CaPr", "Principality of Caledon",
    "CaTe", "Carter Technocracy",
    "CoLp", "Council of Leh Perash",
    "CsCa", "Client State, Principality of Caledon",
    "CsIm", "Client State, Third Imperium",
    "CsZh", "Client State, Zhodani Consulate",
    "CyUn", "Cytralin Unity",
    "DaCf", "Darrian Confederation",
    "DuCf", "Confederation of Duncinae",
    "FeHe", "Federation of Heron",
    "FlLe", "Florian League",
    "GaRp", "Gamma Republic",
    "GdMh", "Grand Duchy of Marlheim",
    "GdSt", "Grand Duchy of Stoner",
    "GeOr", "Gerontocracy of Ormine",
    "GlEm", "Glorious Empire (Aslan independent clan, outcast)",
    "GlFe", "Glimmerdrift Federation",
    "GnCl", "Gniivi Collective",
    "ImAp", "Third Imperium, Amec Protectorate (Dagu)",
    "ImDa", "Third Imperium, Domain of Antares (Anta/Empt/Lish)",
    "ImDc", "Third Imperium, Domain of Sylea (Core/Delp/Forn/Mass)",
    "ImDd", "Third Imperium, Domain of Deneb (Dene/Reft/Spin/Troj)",
    "ImDg", "Third Imperium, Domain of Gateway (Glim/Hint/Ley)",
    "ImDi", "Third Imperium, Domain of Ilelish (Daib/Ilel/Reav/Verg/Zaru)",
    "ImDs", "Third Imperium, Domain of Sol (Alph/Dias/Magy/Olde/Solo)",
    "ImDv", "Third Imperium, Domain of Vland (Corr/Dagu/Gush/Reft/Vlan)",
    "ImLa", "Third Imperium, League of Antares (Anta)",
    "ImLu", "Third Imperium, Luriani Cultural Association (Ley/Forn)",
    "ImSy", "Third Imperium, Sylean Worlds (Core)",
    "ImVd", "Third Imperium, Vegan Autonomous District (Solo)",
    "IsDo", "Islaiat Dominate",
    "JuHl", "Julian Protectorate, Hegemony of Lorean",
    "JuPr", "Julian Protectorate, independent",
    "JuRu", "Julian Protectorate, Rukadukaz Republic",
    "KhLe", "Khuur League",
    "LnRp", "Loyal Nineworlds Republic",
    "LyCo", "Lanyard Colonies",
    "MaEm", "Maskai Empire",
    "NaAs", "Non-Aligned, Aslan-dominated (outside Hierate)",
    "NaHu", "Non-Aligned, Human-dominated",
    "NaVa", "Non-Aligned, Vargr-dominated",
    "NaXX", "Unclaimed",
    "OcWs", "Outcasts of the Whispering Sky",
    "RaRa", "Ral Ranta",
    "SeFo", "Senlis Foederate",
    "SlLg", "Shukikikar League",
    "SoCf", "Solomani Confederation",
    "StCl", "Strend Cluster",
    "SwCf", "Sword Worlds Confederation",
    "TeAr", "Tealou Arlaoh (Aslan independent clan, non-outcast)",
    "UhHa", "Union of Harmony",
    "V40S", "40th Squadron",
    "VARC", "Anti-Rukh Coalition",
    "VAug", "United Followers of Augurgh",
    "VCKd", "Commonality of Kedzudh",
    "VDzF", "Dzarrgh Federate",
    "VPGa", "Pact of Gaerr",
    "VRuk", "Worlds of Leader Rukh",
    "VSDp", "Seaknouth Dependency",
    "VSEq", "Society of Equals",
    "VThE", "Thoengling Empire",
    "VTzE", "Thirz Empire",
    "VUru", "Nation of Urukhu",
    "XXXX", "Unknown",
    "ZhCo", "Zhodani Consulate",};
  //</editor-fold>
  /**
   * Parts of line
   */
  //<editor-fold defaultstate="collapsed" desc="Parts of line">
  public final int HEX = 0,
          /**
           * NAME = 1,
           */
          NAME = 1,
          /**
           * UWPs = 2,
           */
          UWPs = 2,
          /**
           * TC = 3,
           */
          TC = 3,
          /**
           * IX = 4,
           */
          IX = 4,
          /**
           * EX = 5,
           */
          EX = 5,
          /**
           * CX = 6,
           */
          CX = 6,
          /**
           * Ns = 7,
           */
          Ns = 7,
          /**
           * Bs = 8,
           */
          Bs = 8,
          /**
           * Z = 9,
           */
          Z = 9,
          /**
           * PBG = 10,
           */
          PBG = 10,
          /**
           * W = 11,
           */
          W = 11,
          /**
           * A = 12,
           */
          A = 12,
          /**
           * STELLAR = 13;
           */
          STELLAR = 13;
  //</editor-fold>
  static int worlds;
  /**
   *
   */
  public static Clipboard cb;
  //</editor-fold>

  @Annotation4T5(note = "Main entry", ref = "main(String[] args)", line = 167)
  public static void main(String[] args) {
    jp = new Panel4T5Locator();
    jf = new Frame4(jp);
    jf.setBounds(180, 100, 1300, 1000);
    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  }

  /**
   * Creates new form Panel4T5View
   */
  public Panel4T5Locator() {
    //<editor-fold defaultstate="collapsed" desc="IFD">
    {
      String s = "";
      boolean DEBUG = false;
      //deb;
      if (DEBUG) { // true or false
        s += GlobalMethods.comment("=", 80) + CRLF;
        s += "\t" + getClass() + "-" + Thread.currentThread().getStackTrace()[1]
                .getMethodName() + CRLF;
        JTextArea jta = new JTextArea(s, 20, 20);
        JScrollPane jsp = new JScrollPane(jta);
        System.out.println(s);
//        JOptionPane.showMessageDialog(jf, jsp);
      }
    }
    //</editor-fold>
    Thread t = Thread.currentThread();
    System.out.println("t" + " = " + t);
    t5Check();
    initComponents();
    cbm = jcb4All.getModel();
    addSectors();
    addSubsectors();
    addSecListeners();
    addSubListeners();
    addSysListeners();
    setSecTips();
    setSubTips();
    setLocation("Kesali");
    calcCost();
    js4DistStateChanged(ce);
    jcb4All.setSelectedItem("jta4Orb");
    ConsoleWindow.setLocation(0, 150);
    ConsoleWindow.setSize(300, 850);
    ConsoleWindow.getOutput();
    cb = Toolkit.getDefaultToolkit().getSystemClipboard();
    running = true;
    jcb4Options.setSelectedItem("Counter");
    jcb4Options.setSelectedItem("Troops");
    jcb4Options.setSelectedItem("Squadrons");
    jcb4Options.setSelectedItem("Scripting");
    linkpictext.Panel4LPT.main(args);
    jcb4Options.setSelectedItem("LPT");
    jcb4Options.setSelectedItem("XML");

//        jcb4Career.setSelectedIndex(0);
//        jcb4CareerActionPerformed(ae);
//        jcb4Rank.setSelectedIndex(0);
//        jcb4RankClick(ae);
  }

  @Override
  public void paintComponent(Graphics g) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
//</editor-fold>
    super.paintComponent(g);
    createSubPic();
  }

  public static final boolean isRunning() {
    if (running) {
//      MultiText.sec = jcb4Sec.getSelectedItem().toString();
//      MultiText.sub = jcb4Sub.getSelectedItem().toString();
//      MultiText.sys = jcb4Sys.getSelectedItem().toString();
      return true;
    } else {
      return false;
    }
  }

  public int getBit(String hex) {
    int i = 0;
    String[] partso = new String[2];
    partso[0] = hex.substring(0, 2);
    partso[1] = hex.substring(2);
    int x;
    int y;
    x = ((Integer.parseInt(partso[0]) - 1) * 40);
    y = ((Integer.parseInt(partso[1]) - 1) % 40);
    return x + y;
  }

  public String getHex(int bit) {
    String y = "" + (1 + (bit % 40));
    String x = "" + (1 + (bit / 40));
    if (x.length() == 1) {
      x = "0" + x;
    }
    if (y.length() == 1) {
      y = "0" + y;
    }
    return x + y;
  }

  public int[] getXY(String hex) {
    int[] xy = new int[2];
    String X = hex.substring(0, 2);
    String Y = hex.substring(2);
    xy[0] = Integer.parseInt(X);
    xy[1] = Integer.parseInt(Y);
    return xy;
  }

  public String getHexNum(int bit) {
    String res = getHex(bit);
    return res;
  }

  public static String getHdpath() {
    return hdpath;
  }

  public static void setHdpath(String aHdpath) {
    hdpath = aHdpath;
  }

  @Override
  public String toString() {
    return new ObjectAnalyzer().toString(this);
  }

  public JTextArea getJta() {
    return jta;
  }

  public void setJta(JTextArea jta) {
    this.jta = jta;
  }

  public String[] getLiness() {
    return liness;
  }

  public void setLiness(String[] liness) {
    this.liness = liness;
  }

  public static String getSysPath() {
    String str = getSubPath() + FS + jcb4Sys.getSelectedItem().toString().trim();
    return str;
  }

  public void saveSystemPic() {
    File f = new File(Panel4T5Locator.getWorldPath().substring(0,
            Panel4T5Locator.getWorldPath().lastIndexOf(FS) + 5) + "-System.gif");
    BufferedImage bi = new BufferedImage(200, 200, BufferedImage.TYPE_INT_ARGB);
    Graphics g = bi.createGraphics();
    String sp = "" + Panel4T5Locator.UWP.substring(0, 1);
    String base = Panel4T5Locator.data[8].substring(4);
    String tl = "" + Panel4T5Locator.UWP.substring(8);
    String sdbs = Panel4T5Locator.sdbs1.getText();
    String h20 = Panel4T5Locator.UWP.substring(3, 4);
    String def = Panel4T5Locator.defbats.getText();
    String rons = Panel4T5Locator.squadrons.getText();
    String troops = Panel4T5Locator.troopunits.getText();
    String namen = Panel4T5Locator.jcb4Sys.getSelectedItem().toString();
    String zone = Panel4T5Locator.data[9].substring(Panel4T5Locator.data[9]
            .length() - 1);
    switch (zone.toLowerCase()) {
      case "r": {
        g.setColor(Color.red);
        break;
      }
      case "a": {
        g.setColor(Color.orange);
        break;
      }
      case "g":
      case "-":
      default: {
        g.setColor(Color.green);
        break;
      }
    }
    g.fillRect(0, 0, 200, 200);
    atmo = "" + Panel4T5Locator.UWP.substring(2, 3);
    switch (atmo.toLowerCase()) {
      case "5":
      case "6":
      case "8":
      case "normal": {
        g.setColor(Color.cyan);
        break;
      }
      case "0":
      case "1":
      case "vaccuum": {
        g.setColor(Color.black);
        break;
      }
      case "tainted":
      default: {
        g.setColor(Color.lightGray);
        break;
      }
    }
    g.fillRect(25, 25, 150, 150);
    int w = bi.getWidth();
    int h = bi.getHeight();
    g.fillRect(w / 10, h / 10, (int) (w * 0.8), (int) (h * 0.8));
    int s = GlobalMethods.fromHex(getsize());
    if (s > 10) {
      s = 10;
    }
    if (s == 0) {
      g.setColor(Color.gray);
      g.drawOval(w / 4, w / 4, (int) (w * 0.5), (int) (w * 0.5));
    }
    int c = w / 2;
    int d = (int) ((w * 0.8));
    int dm = d * s / 10;
    g.setColor(Color.green);
    g.fillOval(c - (dm / 2), c - (dm / 2), dm, dm);
    int hy = GlobalMethods.fromHex(gethydro());
    int hm = hy * dm / 10;
    g.setColor(Color.blue);
    g.fillOval(c - (hm / 2), c - (hm / 2), hm, hm);

    if (atmo.toLowerCase().equals("0") | atmo.toLowerCase().equals("1")) {
      g.setColor(Color.white);
    } else {
      g.setColor(Color.black);
    }
    g.drawString("SP", 35, 40);
    g.drawString("Base", 85, 40);
    g.drawString("TL", 140, 40);
    g.drawString(sp, 35, 55);
    g.drawString(base, 85, 55);
    g.drawString(tl, 140, 55);
    g.drawString("SDBs", 35, 80);
    g.drawString("HYD", 85, 80);
    g.drawString("DEF CF", 130, 80);
    g.drawString(sdbs, 35, 95);
    g.drawString(h20 + "0%", 85, 95);
    g.drawString(def, 130, 95);
    g.drawString("Max Rons", 35, 120);
    g.drawString("Troops", 130, 120);
    g.drawString(rons, 35, 135);
    g.drawString(troops, 130, 135);
    g.drawString(namen, 65, 160);
    g.drawString(UWP, 65, 180);
    try {
      ImageIO.write(bi, "gif", f);
    } catch (IOException ex1) {
      System.out.println("2817" + " = " + ex1);
    }

  }

  public static String paste() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    //DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      System.out.println(cb.getContents(null));
      System.out.println(cb.getAvailableDataFlavors());
//      System.out.println(cb.getData(DataFlavor.getTextPlainUnicodeFlavor()));
    }
    //</editor-fold>
    return cb.getContents("").toString();
  }

  public static void createCounters(String s) {
    Panel4T5CounterMaker.createCounter(s);
  }

  public static String getStarDetail(String star) {
    String txt = "";
    if (!star.contains("BD")) {
      String type = null;
      int dec = 0;
      String size = null;
      type = star.substring(0, 1);
      dec = Integer.parseInt(star.substring(1, 2));
      size = star.substring(3);
    }
    txt += getStarData(star);
    int d10Limit = getD10Limit(star);
    int d100Limit = getD100Limit(star);
    int d1000Limit = getD1000Limit(star);
    txt += "\td10Limit" + " = " + d10Limit + CRLF;
    txt += "\td100Limit" + " = " + d100Limit + CRLF;
    txt += "\td1000Limit" + " = " + d1000Limit + CRLF;
    txt += "\tMin Orbit = " + getMinOrbit(star) + CRLF;
    txt += "\tMax Orbit =  " + getMaxOrbit(0) + CRLF;
    txt += "\tHZ =  " + GlobalMethods.getHZ(star);
    return txt;
  }

  public static int getMaxOrbit(int starnum, int orb) {
    int r;
    switch (starnum) {
      case 0: {
        r = orbit.length;
        break;
      }
      default: {
        r = orb - 3;
      }
    }
    return r;
  }

  public static String getMinOrbit(String st) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    setStarData(st);
    try {
      switch (s) {
        //<editor-fold defaultstate="collapsed" desc="case ("Ia")">
        case ("Ia"): {
          //SIZE Ia
          ////A0-F5 = 2
          if (t.equals("A")) {
            min = 2;
          }
          if (t.equals("F") & d == 0) {
            min = 2;
          }
          ////G0 = 3
          if (t.equals("F") & d == 5) {
            min = 3;
          }
          if (t.equals("G") & d == 0) {
            min = 3;
          }
          ////G5-K0 = 4
          if (t.equals("G") & d == 5) {
            min = 4;
          }
          if (t.equals("K") & d == 0) {
            min = 4;
          }
          ////K5 = 5
          if (t.equals("K") & d == 5) {
            min = 5;
          }
          ////M0 =6
          if (t.equals("M") & d == 0) {
            min = 6;
          }
          ////M5-M9 = 7
          if (t.equals("M") & d == 5) {
            min = 7;
          }
          break;
        }
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="case ("Ib")">
        case ("Ib"): {
          //SIZE Ib
          ////A0=0
          if (t.equals("A") & d == 0) {
            min = 0;
          }
          ////A5-G0 = 1
          if (t.equals("A") & d == 5) {
            min = 1;
          }
          if (t.equals("G") & d == 0) {
            min = 1;
          }
          ////G5 = 2
          if (t.equals("A") & d == 5) {
            min = 2;
          }
          ////K0 = 3
          if (t.equals("K") & d == 0) {
            min = 3;
          }
          ////K5 = 4
          if (t.equals("K") & d == 5) {
            min = 4;
          }
          ////M0 = 5
          if (t.equals("M") & d == 0) {
            min = 5;
          }
          ////M5-M9 = 6
          if (t.equals("K") & d == 5) {
            min = 6;
          }
          break;
        }
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="case ("II")">
        case ("II"): {
          //SIZE II
          ////A0-F5 = 0
          if (t.equals("A") | t.equals("F") & d == 0) {
            min = 0;
          }
          ////G0-G5 = 0
          if (t.equals("G")) {
            min = 0;
          }
          ////K0 = 1
          if (t.equals("K") & d == 0) {
            min = 1;
          }
          ////K5 = 2
          if (t.equals("K") & d == 5) {
            min = 2;
          }
          ////M0 = 3
          if (t.equals("M") & d == 0) {
            min = 3;
          }
          ////M5 = 4
          if (t.equals("M") & d == 5) {
            min = 4;
          }
          ////M9 = 5
          if (t.equals("M") & d == 9) {
            min = 5;
          }
          break;
        }
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="case ("III")">
        case ("III"): {
          //SIZE III
          ////A0-K0 = 0
          ////K5 = 0
          if (t.equals("A") | t.equals("F") | t.equals("G") | t.equals("K")) {
            min = 0;
          }
          ////M0 = 1
          if (t.equals("M") & d == 0) {
            min = 1;
          }
          ////M5 = 3
          if (t.equals("M") & d == 5) {
            min = 3;
          }
          ////M9 = 4
          if (t.equals("M") & d == 0) {
            min = 4;
          }
          break;
        }
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="default">
        default: {
          min = 0;
          break;
        }
        //</editor-fold>
      }
    } catch (Exception e) {
      System.out.println("6470" + " = " + e.toString());
    }
    //<editor-fold defaultstate="collapsed" desc="DEBUG">
    if (DEBUG) {
      System.out.println("st" + " = " + st);
      System.out.println("t" + " = " + t);
      System.out.println("d" + " = " + d);
      System.out.println("s" + " = " + s);
      System.out.println("min" + " = " + min);
    }
    //</editor-fold>
    return "" + min;
  }

  public static String getMinOrbit(int i) {
    return getMinOrbit(dbviewer.OrbitDetail.stardata[i]);
  }

  //////////////////////////////////////////////////////////////////////////////
  static String getSpaceInfo(String string) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    //DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      System.out.println("string" + " = " + string);
    }
    //</editor-fold>
    bits = string.split(" ");
    len = new int[bits.length];
    startuwp = 0;
    for (int i = 0; i < bits.length; i++) {
      len[i] = bits[i].length();
      end = startuwp + bits[i].length();
      startuwp += bits[i].length() + 1;
    }
    return string;
  }

  static String getStarData(String star) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      System.out.println("star" + " = " + star);
    }
    //</editor-fold>
    if (star.length() == 2) {
      return "White Dwarf";
    } else {
      String data = "";
      String find = star.substring(0, 1);
      data += GlobalMethods.getLinesFromTable(StarColor, find, true);
      find = jcb4Star.getSelectedItem().toString().substring(2).trim();
      data += GlobalMethods.getLinesFromTable(StarSize, find, true);
      return data;
    }
  }

  static void clearTexts() {
    Panel4T5CounterMaker.clearTexts();
  }

  static void printText(Graphics g) {
    Panel4T5CounterMaker.printText(g);
  }

  static String addZeros(String substring) {
    String s = "";
    for (int j = 0; j < Integer.parseInt(substring); j++) {
      s += "0";
    }
    return s;
  }

  static void saveCounter(File dir) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    //DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      System.out.println("dir" + " = " + dir);
      //System.out.println("" + " = " + );
    }
    //</editor-fold>
    JFileChooser jfc = dbviewer.DBPublic.CBView();
//    jfc.setAccessory(new ImagePreviewer(jfc));
    jfc.setCurrentDirectory(dir);
    jfc.setFileFilter(new FileFilter() {

      @Override
      public boolean accept(File f) {
        return (f.toString().endsWith(".gif"));
      }

      @Override
      public String getDescription() {
        return "GIF pictures";
      }
    });
    s = Panel4T5CounterMaker.fc[0].trim() + " " + Panel4T5CounterMaker.bc[0]
            .trim() + " " + Panel4T5CounterMaker.Folder.getSelectedItem().toString()
            + ".gif";
    if (" .gif".equals(s)) {
      s = "Blank.gif";
    }
    if (".gif".equals(s)) {
      s = "Blank?.gif";
    }
    if ("".equals(s)) {
      s = "RenameMe.gif";
    }
    jfc.setSelectedFile(new File(jfc.getCurrentDirectory() + FS + s.trim()));
    //<editor-fold defaultstate="collapsed" desc="JOP">
//    {
//      String s = "";
//      s += "" + "jfc" + " = " + jfc.getSelectedFile().toString() + CRLF;
//      s += "" + dir + CRLF;
//      JTextArea jta = new JTextArea(s, 50, 80);
//      JScrollPane jsp = new JScrollPane(jta);
//      JOptionPane.showMessageDialog(null, jsp);
//    }
    //</editor-fold>
//    System.out.println("jfc" + " = " + jfc.getSelectedFile().toString());
    try {
      Robot r = new Robot();
      bi = r.createScreenCapture(new Rectangle(
              panel4Pic.getLocationOnScreen().x,
              panel4Pic.getLocationOnScreen().y,
              panel4Pic.getWidth(),
              panel4Pic.getHeight()));
      ImageIO.write(bi, "gif", jfc.getSelectedFile());
    } catch (IOException ex1) {
      System.out.println("9432" + " = " + ex1);
    } catch (AWTException ex) {
      System.out.println("9434" + " = " + 9434);
      Logger
              .getLogger(Panel4T5Locator.class
                      .getName()).log(Level.SEVERE, null, ex);
    }
  }

  static String getPath() {
    String s = T5 + FS + jcb4Sec.getSelectedItem().toString() + FS
            + jcb4Sub.getSelectedItem().toString().trim() + FS
            + jcb4Sys.getSelectedItem().toString().trim() + FS
            + jcb4Sys.getSelectedItem().toString().trim() + FS
            + jcb4Sys.getSelectedItem().toString().trim() + ".txt";
    return s;
  }

  static String getWorldPath() {
    String s = T5 + FS + jcb4Sec.getSelectedItem().toString() + FS
            + jcb4Sub.getSelectedItem().toString().trim() + FS
            + jcb4Sys.getSelectedItem().toString().trim() + FS
            + jcb4Sys.getSelectedItem().toString().trim() + FS
            + jcb4Sys.getSelectedItem().toString().trim();
    return s;

  }

  static String getsize() {
    return UWP.substring(1, 2);
  }

  static String getatmo() {
    return UWP.substring(2, 3);
  }

  static String gethydro() {
    return UWP.substring(3, 4);
  }

  static String getpop() {
    return UWP.substring(4, 5);
  }

  static String getgov() {
    return UWP.substring(5, 6);
  }

  static String getll() {
    return UWP.substring(6, 7);
  }

  static String gettl() {
    return UWP.substring(8, 9);
  }

  static String getTecL() {
    return UWP.substring(8, 9);
  }

  static String worldupdate(String txt) {
    switch (txt) {
      //<editor-fold defaultstate="collapsed" desc="SDBs">
      case "SDBs": {
        int t, p;
        t = GlobalMethods.fromHex(UWP.substring(8, 9));
        p = GlobalMethods.fromHex(UWP.substring(4, 5));
        if (t > 6 & p > 6) {
          SDBso = Panel4Squadron.getFromTable(2, getpop(), gettl());
        } else {
          SDBso = "X";
        }
        createSDBPic();
        return SDBso;
      }
      //</editor-fold>
      //<editor-fold defaultstate="collapsed" desc="SQUADRONS">
      case "SQUADRONS": {
        //TL8+ SDBs
        int t, sdbs;
        t = GlobalMethods.fromHex(
                UWP.substring(8, 9));
        try {
          sdbs = GlobalMethods.fromHex(SDBso);
        } catch (Exception e) {
          sdbs = 0;
          System.out.println("3961" + " = " + e.toString());
        }
        if (t > 8 & sdbs > 9) {
          SQUADRONSo = Panel4Squadron.getFromTable(7, getTecL(), SDBso);
        } else {
          SQUADRONSo = "X";
        }
        createSquadronPic();
        return SQUADRONSo;
      }
      //</editor-fold>
      //<editor-fold defaultstate="collapsed" desc="DEFENCEBATTS">
      case "DEFENCEBATTS": {
        String p;
        String t;
        p = UWP.substring(4, 5);
        t = UWP.substring(8, 9);
        if (GlobalMethods.fromHex(p) > 5 & GlobalMethods.fromHex(t) > 5) {
          DEFENCEBATTSo = Panel4Squadron.getFromTable(8, p, t);
        } else {
          DEFENCEBATTSo = "X";
        }
        createDefBatPic();
        return DEFENCEBATTSo;
      }
      //</editor-fold>
      //<editor-fold defaultstate="collapsed" desc="TROOPUNITS">
      case "TROOPUNITS": {
        int p, t;
        p = GlobalMethods.fromHex(
                UWP.substring(4, 5));
        t = GlobalMethods.fromHex(
                UWP.substring(8, 9));
        if (p > 6 & t > 6) {
          TROOPUNITSo = Panel4Squadron.getFromTable(10, getpop(), getTecL());
        } else {
          TROOPUNITSo = "X";
        }
        createTroopPic();
        return TROOPUNITSo;
      }
      //</editor-fold>
    }
    return null;
  }

  static String getsp() {
    return UWP.substring(0, 1);
  }

  static Color getTASColor() {
    Color col = Color.black;
    switch (data[9].toLowerCase().substring(4)) {
      case "r": {
        col = Color.red;
        break;
      }
      case "a": {
        col = Color.orange;
        break;
      }
      default: {
        col = Color.green;
      }
    }
    return col;
  }

  /**
   * @param txt string to copy
   */
  public static void txt2cb(String txt) {
    if (running) {
      if (txt != null) {
        StringSelection sel = new StringSelection(txt.trim() + CRLF);
        try {
          cb.setContents(sel, null);
        } catch (Exception e) {
          System.out.println("3421 = " + e.toString());
        }
        System.out.println(txt);
      }
    }
  }

  static String getZ() {
    out = data[9] + CRLF;
    String z = data[9].substring(4);
    out += GlobalMethods.getLinesFromTable(Zones, z, true);
    return out;
  }

  private void readWeb(String wp) {
    try {
      webpath = fix(wp);
      url = new URL(webpath);
      URLConnection myURLConnection = null;
      try {
        myURLConnection = url.openConnection();
      } catch (IOException e) {
        System.out.println("5692" + " = " + e.toString());
      }
      myURLConnection.connect();
      URLConnection u;
      u = url.openConnection();
      BufferedReader in;
      in = new BufferedReader(new InputStreamReader(u.getInputStream()));
      String inputLine;
      setJta(new JTextArea());
      while ((inputLine = in.readLine()) != null) {
        getJta().append(inputLine + CRLF);
      }
      try {
        GlobalMethods.saveTextFile(T5 + FS + "_SEC" + FS, fname.replace("%20",
                " "), ".sec", getJta().getText());
//        JOptionPane.showMessageDialog(jf, "");
      } catch (Exception e) {
        System.out.println("" + " = " + 5706);
      }
      in.close();
    } catch (MalformedURLException e) {
      System.out.println("5710" + " = " + e.toString());
    } catch (IOException e) {
      System.out.println("5712" + " = " + e.toString());
    }
  }

  boolean isPopulated() {
    String[] lines = GlobalMethods.getLinesFromFile(new File(_SEC + FS
            + jcb4Sec.getSelectedItem().toString() + ".sec"));
    for (int j = 0; j < lines.length; j++) {
      if (lines[j].contains("---- ")) {
        return true;
      }
    }
    return false;
  }

  int countUnused() {
    int numun = 0;
    for (int j = min; j < orbit.length; j++) {
      if (orbit[j].equals("")) {
        numun += 1;
      }
    }
    return numun;
  }

  //////////////////////////////////////////////////////////////////////////////
  private void getWord(MouseEvent evt) {
    String word = Panel4WordGenOld.getWord(me, jcb4Lang.getSelectedItem()
            .toString(), null).replace(CRLF, "").replace("\t", "").trim();
    System.out.println("word" + " = " + word);
    jtf4Word.setText(GlobalMethods.capWords(word));
    jtf4Word.setSelectionEnd(jtf4Word.getText().length());
    jtf4Word.setSelectionStart(0);
    if (!"".equals(jtf4Word.getText())) {
      jtf2cb(jtf4Word);
    }
//    jtf2cb(jtf4Word);
  }

  public static String getWord(MouseEvent em, String string) {
    String word = "word";
    if(string.equals("")) {
      string = "Vilani";
    }
    jcb4Lang.setSelectedItem(string);
    return jtf4Word.getText();
  }

  private void loadTexts() {
    try {
      String t = GlobalMethods.loadTextFile(getPath());
      jta4All.setText(t);
      String[] bits = jta4All.getText().split(GlobalMethods.comment("-", 80));
      jta4Orb.setText(bits[5]);
    } catch (Exception e) {
      //JOptionPane.showMessageDialog(jp,e.toString());
//      System.out.println("5261" + " = " + e.toString());
    }
  }

  private String saveTexts() {
    String ret = T5 + FS;
    ret += jcb4Sec.getSelectedItem().toString().trim() + FS;
    file = new File(ret);
    if (!file.exists()) {
      file.mkdir();
    }
    ret += jcb4Sub.getSelectedItem().toString().trim() + FS;
    ret = ret.replace(": ", " ");
    file = new File(ret);
    if (!file.exists()) {
      file.mkdir();
    }
    ret += jcb4Sys.getSelectedItem().toString().trim() + FS + jcb4Sys
            .getSelectedItem().toString().trim() + FS;
    file = new File(ret);
    if (!file.exists()) {
      file.mkdir();
    }
    String string = jcb4Sys.getSelectedItem().toString().trim();
    String txt;
    writeSectorInfo();
    txt = string.toUpperCase() + CRLF
            + GlobalMethods.comment("-", 80)
            + jta4Sec.getText()
            + GlobalMethods.comment("-", 80)
            + jta4Line.getText()
            + GlobalMethods.comment("-", 80)
            + jta4Sys.getText()
            + GlobalMethods.comment("-", 80)
            + jta4Info.getText()
            + GlobalMethods.comment("-", 80)
            + jta4Orb.getText()
            + GlobalMethods.comment("-", 80)
            + jta4Str.getText(); //      + GlobalMethods.comment("-", 80);
    for (int j = 0; j < 10; j++) {
      js4Dist.setValue(j);
      js4DistStateChanged(ce);
      txt += GlobalMethods.comment("-", 80);
      for (int k = 0; k < jl4Jump.getModel().getSize(); k++) {
        txt += "Jump " + j + " = " + jl4Jump.getModel().getElementAt(k) + CRLF;
      }
    }
    js4Dist.setValue(1);
    file = new File(ret);
    GlobalMethods.saveTextFile(file.toString(), string, ".txt", txt);
    loadTexts();
    return ret;
  }

  private void saveHTML() {
    String[] oldname = {"TITLE", "SEC", "SUB", "HEX", "NAME", "WID", "HGT",
      "BORDER", "JUMP", "SCALE", "OPTIONS", "STYLE", "SX", "SY", "HX", "HY", "X",
      "Y", "ERA", "LET", "SPIN"};
    try {
      String TITLE = jcb4Sys.getSelectedItem().toString().trim();
      String SEC = jcb4Sec.getSelectedItem().toString();
      String SUB = jcb4Sub.getSelectedItem().toString().substring(2);
      String HEX = jcb4Sys.getSelectedItem().toString().substring(0, 4);
      String NAME = jcb4Sys.getSelectedItem().toString().substring(4).trim();
      String WID = "900px";
      String HGT = "900px";
      String BORDER = "solid 1px black";
      String JUMP = "9";
      String SCALE = "55";
      String OPTIONS = "58207";
      String STYLE = "print";//atlas//candy//poster//print
      String SX = "-4";
      String SY = "-1";
      String HX = "19";
      String HY = "10";
      String X = "-4";
      String Y = "-1";
      String ERA = "1000";
      String LET = "A";
      String SPIN = "spin";
      String SYS = jcb4Sys.getSelectedItem().toString().substring(0, 4);

      String[] newname = {TITLE, SEC, SUB, HEX, NAME, WID, HGT, BORDER, JUMP,
        SCALE, OPTIONS, STYLE, SX, SY, HX, HY, X, Y, ERA, LET, SPIN};
      String txt = jta4HTML.getText();
      for (int j = 0; j < newname.length; j++) {
        if (oldname[j].contains("'")) {
          JOptionPane.showMessageDialog(this, "Locator 3515?");
          System.out.println("3515 = " + j);
        }
        txt = txt.replace(oldname[j], newname[j]);
      }
      jta4All.setText(GlobalMethods.loadTextFile(getPath()));
      String GEN = jta4All.getText();
      String[] lines = GEN.split(CRLF);
//            for (int j = 0; j < lines.length; j++) {
//                lines[j] = lines[j].replace("\t", "  ").replace(" ", "_") + "<br>"
//                        + CRLF;
//                txt += lines[j];
//            }
      LET = jcb4Sub.getSelectedItem().toString().substring(0, 1);

      txt += "  </body>" + CRLF + "</html>" + CRLF;
      String s = T5 + FS + jcb4Sec.getSelectedItem().toString().trim()
              + FS + jcb4Sub.getSelectedItem().toString().trim()
              + FS + jcb4Sys.getSelectedItem().toString().trim() + FS;
      String ss = s + FS + jcb4Sys.getSelectedItem().toString().trim() + FS;
      f = new File(ss);
      if (!f.exists()) {
        f.mkdir();
      }
      GlobalMethods.saveTextFile(s, SYS, ".html", txt);
    } catch (Exception e) {
      System.out.println("3510" + " = " + e.toString());
    }
  }

  @SuppressWarnings("unchecked")
  private void addSectors() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    //DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      //System.out.println("DEBUG" + " = " + DEBUG);
    }
    //</editor-fold>
    dir = new File(T5);
    if (!dir.exists()) {
      dir.mkdir();
      dir = new File(_SEC);
      dir.mkdir();
    }
    dir = new File(_SEC);
    if (!dir.exists()) {
      dir.mkdir();
      downloadSector();
    }
    String[] files = dir.list();
    Arrays.sort(files);
    String seclist;
    seclist = "";
    for (int j = 0; j < files.length; j++) {
      if (files[j].endsWith(".sec")) {
        String s = files[j].substring(0, files[j].length() - 4);
        jcb4Sec.addItem(s);
        s += ",";
        try {
          String[] ss = GlobalMethods.getLinesFromFile(new File(
                  _SEC + FS + files[j]));
          s += ss[4].substring(2);
          seclist += s + CRLF;
        } catch (Exception e) {
          System.out.println("3479" + " = " + e.toString());
        }
      }
    }
    secs = seclist.split(CRLF);
    Arrays.sort(secs);
  }

  private void addSubsectors() {
    DefaultComboBoxModel<String> dcbm = new DefaultComboBoxModel<>();
    try {
      file = new File(_SEC + FS + jcb4Sec.getSelectedItem().toString() + ".sec");
      lines = GlobalMethods.getLinesFromFile(file);
      sub = "";
      for (int j = 0; j < lines.length; j++) {
        if (lines[j].startsWith("# Subsector ")) {
          dcbm.addElement(lines[j].substring(12).replace(":", ""));
          sub = lines[j].substring(12);
          if (dcbm.getSize() == 16) {
            break;
          }
        }
      }
      jcb4Sub.setModel(dcbm);
    } catch (Exception e) {
      System.out.println("1533" + " = " + e.toString());
    }
  }

  public static void addSystems() {
    dcbm = new DefaultComboBoxModel<>();
    int x = 0, X = 0, y = 0, Y = 0;
    for (int j = 0; j < lines.length; j++) {
      if (lines[j].startsWith("---- ")) {
        world1 = j + 1;
        titleline = j - 1;
        getSpaceInfo(lines[j]);
        break;
      }
    }
    String loc;
    for (int j = world1; j < lines.length; j++) {
      loc = lines[j].substring(0, 4);
      int xx = Integer.parseInt(loc.substring(0, 2));
      int yy = Integer.parseInt(loc.substring(2, 4));
      //<editor-fold defaultstate="collapsed" desc="switch">
      switch (jcb4Sub.getSelectedItem().toString().substring(0, 1)) {
        case "A": {
          x = 1;
          X = 8;
          y = 1;
          Y = 10;
          break;
        }
        case "B": {
          x = 9;
          X = 16;
          y = 1;
          Y = 10;
          break;
        }
        case "C": {
          x = 17;
          X = 24;
          y = 1;
          Y = 10;
          break;
        }
        case "D": {
          x = 25;
          X = 32;
          y = 1;
          Y = 10;
          break;
        }
        case "E": {
          x = 1;
          X = 8;
          y = 11;
          Y = 20;
          break;
        }
        case "F": {
          x = 9;
          X = 16;
          y = 11;
          Y = 20;
          break;
        }
        case "G": {
          x = 17;
          X = 24;
          y = 11;
          Y = 20;
          break;
        }
        case "H": {
          x = 25;
          X = 32;
          y = 11;
          Y = 20;
          break;
        }
        case "I": {
          x = 1;
          X = 8;
          y = 21;
          Y = 30;
          break;
        }
        case "J": {
          x = 9;
          X = 16;
          y = 21;
          Y = 30;
          break;
        }
        case "K": {
          x = 17;
          X = 24;
          y = 21;
          Y = 30;
          break;
        }
        case "L": {
          x = 25;
          X = 32;
          y = 21;
          Y = 30;
          break;
        }
        case "M": {
          x = 1;
          X = 8;
          y = 31;
          Y = 40;
          break;
        }
        case "N": {
          x = 9;
          X = 16;
          y = 31;
          Y = 40;
          break;
        }
        case "O": {
          x = 17;
          X = 24;
          y = 31;
          Y = 40;
          break;
        }
        case "P": {
          x = 25;
          X = 32;
          y = 31;
          Y = 40;
          break;
        }
      }
      //</editor-fold>
      if (xx >= x & xx <= X & yy >= y & yy <= Y) {
        dcbm.addElement(lines[j].substring(0, 24));
      }
    }
    jcb4Sys.setModel(dcbm);
  }

  private void setXY() {
    XY = lines[4].substring(2).split(",");
    jLabel1.setText("" + XY[0]);
    jLabel2.setText("" + XY[1]);
  }

  private void showXY() {
    int componentCount = panel4Sec.getComponentCount();
    JLabel lab = null;
    int x = 0, y = 0;
    for (int j = 0; j < componentCount; j++) {
      if (panel4Sec.getComponent(j).getClass().toString().contains("JLabel")) {
        switch (j) {
          case 0: {
            lab = (JLabel) panel4Sec.getComponent(4);
            x = Integer.parseInt(XY[0]);
            y = Integer.parseInt(XY[1]);
            break;
          }
          case 1: {
            lab = (JLabel) panel4Sec.getComponent(0);
            x = Integer.parseInt(XY[0]) - 1;
            y = Integer.parseInt(XY[1]) - 1;
            break;
          }
          case 2: {
            lab = (JLabel) panel4Sec.getComponent(1);
            x = Integer.parseInt(XY[0]);
            y = Integer.parseInt(XY[1]) - 1;
            break;
          }
          case 3: {
            lab = (JLabel) panel4Sec.getComponent(2);
            x = Integer.parseInt(XY[0]) + 1;
            y = Integer.parseInt(XY[1]) - 1;
            break;
          }
          case 4: {
            lab = (JLabel) panel4Sec.getComponent(3);
            x = Integer.parseInt(XY[0]) - 1;
            y = Integer.parseInt(XY[1]);
            break;
          }
          case 5: {
            lab = (JLabel) panel4Sec.getComponent(5);
            x = Integer.parseInt(XY[0]) + 1;
            y = Integer.parseInt(XY[1]);
            break;
          }
          case 6: {
            lab = (JLabel) panel4Sec.getComponent(6);
            x = Integer.parseInt(XY[0]) - 1;
            y = Integer.parseInt(XY[1]) + 1;
            break;
          }
          case 7: {
            lab = (JLabel) panel4Sec.getComponent(7);
            x = Integer.parseInt(XY[0]);
            y = Integer.parseInt(XY[1]) + 1;
            break;
          }
          case 8: {
            lab = (JLabel) panel4Sec.getComponent(8);
            x = Integer.parseInt(XY[0]) + 1;
            y = Integer.parseInt(XY[1]) + 1;
            break;
          }
        }
        lab.setText("" + x + "," + y);
      }
    }
  }

  void showDetails() {
    jta4Sys.setText("");
    for (int j = world1; j < lines.length; j++) {
      if (lines[j].startsWith(jcb4Sys.getSelectedItem().toString())) {
        num = j;
      }
    }
    startuwp = 0;
    end = 0;
    for (int j = 0; j < bits.length; j++) {
      end = startuwp + bits[j].length();
      jta4Sys.append(
              lines[titleline].substring(startuwp, end).trim() + " = " + lines[num]
              .substring(startuwp, end).trim() + CRLF);
      startuwp += bits[j].length() + 1;
    }

    jta4Line.setText("");
    jta4Line.append(getSpaceInfo(lines[world1 - 2]) + CRLF);
    jta4Line.append(getSpaceInfo(lines[world1 - 1]) + CRLF);
    jta4Line.append(lines[num] + CRLF);
    showExtra();
  }

  private void setLocation(String string) {
    try {
      switch (string) {
        case "Efate": {
          jcb4Sec.setSelectedItem("Spinward Marches");
          jcb4Sub.setSelectedItem("C Regina");
          jcb4Sys.setSelectedItem("1705 Efate");
          break;
        }
        case "Kesali": {
          jcb4Sec.setSelectedItem("Vland");
          jcb4Sub.setSelectedItem("P Kakadan");
          jcb4Sys.setSelectedIndex(44);
//          jcb4Sys.setSelectedItem("2737 Kesali");
          break;
        }
        case "Zeycude": {
          jcb4Sec.setSelectedItem("Spinward Marches");
          jcb4Sub.setSelectedItem("A Cronor");
          break;
        }
        case "Regina": {
          jcb4Sec.setSelectedItem("Spinward Marches");
          jcb4Sub.setSelectedItem("C Regina");
          jcb4Sys.setSelectedIndex(13);
          break;
        }
        case "Terra": {
          jcb4Sec.setSelectedItem("Solomani Rim");
          jcb4Sub.setSelectedItem("K Sol");
          jcb4Sys.setSelectedIndex(2);
          break;
        }
        case "Capital": {
          jcb4Sec.setSelectedItem("Core");
          jcb4Sub.setSelectedItem("G Core");
          jcb4Sys.setSelectedIndex(23);
          break;
        }
        default: {
          jcb4Sec.setSelectedItem("Spinward Marches");
          jcb4Sub.setSelectedItem("C Regina");
          jcb4Sys.setSelectedIndex(0);
          break;
        }
      }
    } catch (Exception e) {
      System.out.println("3482" + " = " + e.toString());
      System.out.println("jcb4Sec" + " = " + jcb4Sec.getSelectedItem()
              .toString());
      System.out.println("jcb4Sub" + " = " + jcb4Sub.getSelectedItem()
              .toString());
      System.out.println("jcb4Sys" + " = " + jcb4Sys.getSelectedItem()
              .toString());
    }
  }

  private void addSecListeners() {
    final Component[] comps = panel4Sec.getComponents();
    for (int j = 0; j < comps.length; j++) {
      if (comps[j].getClass().toString().contains("JLabel")) {
        final JLabel lab = (JLabel) comps[j];
        lab.addMouseListener(new MouseAdapter() {

          @Override
          public void mouseClicked(MouseEvent e) {
            jcb4Sec.setSelectedItem(lab.getToolTipText());
            setSecTips();
            whiten();
            createSubPic();
          }

          @Override
          public void mouseEntered(MouseEvent e) {
            lab.setToolTipText(getSec(lab.getText()));
            setSecTips();
            createSubPic();
          }
        });
      }
    }
    setSecTips();
  }

  private void addSubListeners() {
    Component[] comps = panel4Sub.getComponents();
    for (Component comp : comps) {
      if (comp.getClass().toString().contains("JLabel")) {
        final JLabel lab = (JLabel) comp;
        lab.addMouseListener(new MouseAdapter() {

          @Override
          public void mouseClicked(MouseEvent e) {
            for (int k = 0; k < jcb4Sub.getItemCount(); k++) {
              if (jcb4Sub.getItemAt(k).toString().startsWith(lab.getText())) {
                if (lab.getForeground().equals(dark)) {
                  jcb4Sub.setSelectedIndex(k);
                } else {
                  jcb4Sec.setSelectedItem(lab.getToolTipText());
                  panel4Sub.unColor();
                  whitenSub(k, lab);
                }
              }
            }
            setSecTips();
            createSubPic();
//            if (running) {
//              if (jcb4Sub.getSelectedItem() != "") {
//                jcb2cb(jcb4Sub);
//              }
//            }
          }

          @Override
          public void mouseEntered(MouseEvent e) {
            lab.setToolTipText(getSub(lab, lab.getName()));
            setSecTips();
            createSubPic();
          }

        });
      }
    }
    setSecTips();
  }

  private void whitenSub(int k, JLabel lab) {
    Component[] coms = panel4Sub.getComponents();
    JLabel jl = new JLabel();
    for (int l = 0; l < coms.length; l++) {
      jl = (JLabel) coms[l];
      if (jl.getForeground().equals(dark) & (jl.getText().equals(lab.getText()))) {
        panel4Sub.recolor(l);
        jcb4Sub.setSelectedIndex(k);
      }
    }
  }

  private void addSysListeners() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    //DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      //System.out.println("DEBUG" + " = " + DEBUG);
    }
    //</editor-fold>
  }

  private String getSec(String text) {
    for (String sec : secs) {
      if (sec.endsWith("," + text)) {
        return sec.substring(0, sec.indexOf(','));
      }
    }
    return "Unnamed";
  }

  private String getSub(JLabel label, String name) {
    try {
      if (label.getForeground().equals(dark)) {
        for (int j = 0; j < 16; j++) {
          sub = jcb4Sub.getItemAt(j).toString();
          if (sub.startsWith(label.getText().substring(0, 1))) {
            return jcb4Sec.getSelectedItem().toString() + " - " + sub;
          }
        }
      }
      if (label.getForeground().equals(Color.green)) {
        if (label.getText().equals("P")) {
          return getOutSec("Top Left");
        }
        if (label.getText().equals("M")) {
          return getOutSec("Top Right");
        }
        if (label.getText().equals("D")) {
          return getOutSec("Bottom Left");
        }
        if (label.getText().equals("A")) {
          return getOutSec("Bottom Right");
        }
      }
      if (label.getForeground().equals(Color.cyan)) {
        if (name == "2" | name == "3" | name == "4" | name == "5") {
          return getOutSec("Top");
        }
        if (name == "7" | name == "13" | name == "19" | name == "25") {
          return getOutSec("Left");
        }
        if (name == "12" | name == "18" | name == "24" | name == "30") {
          return getOutSec("Right");
        }
        if (name == "32" | name == "33" | name == "34" | name == "35") {
          return getOutSec("Bottom");
        }
      }
      return "Unnamed";
    } catch (Exception e) {
      System.out.println("1962" + " = " + e.toString());
    }
    return null;
  }

  private String getOutSec(String string) {
    String s = "NOT YET";
    switch (string) {
      case "Top Left": {
        s = panel4Sec.jLabel1.getToolTipText();
        break;
      }
      case "Top": {
        s = panel4Sec.jLabel2.getToolTipText();
        break;
      }
      case "Top Right": {
        s = panel4Sec.jLabel3.getToolTipText();
        break;
      }
      case "Left": {
        s = panel4Sec.jLabel8.getToolTipText();
        break;
      }
      case "Right": {
        s = panel4Sec.jLabel4.getToolTipText();
        break;
      }
      case "Bottom Left": {
        s = panel4Sec.jLabel7.getToolTipText();
        break;
      }
      case "Bottom": {
        s = panel4Sec.jLabel6.getToolTipText();
        break;
      }
      case "Bottom Right": {
        s = panel4Sec.jLabel5.getToolTipText();
        break;
      }
      default: {
        JOptionPane.showMessageDialog(jcb4Sec, "4084" + CRLF + s);
      }
    }
    return s;
  }

  private void setSecTips() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    //DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      //System.out.println("DEBUG" + " = " + DEBUG);
    }
    //</editor-fold>
    for (int j = 0; j < 9; j++) {
      JLabel lab = (JLabel) panel4Sec.getComponent(j);
      lab.setToolTipText(getSec(lab.getText()));
    }
  }

  private void setSubTips() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    //DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      //System.out.println("DEBUG" + " = " + DEBUG);
    }
    //</editor-fold>
  }

  private void whiten() {
    JLabel lab = null;
    //<editor-fold defaultstate="collapsed" desc="switch (jComboBox2.getSelectedIndex())">
    switch (jcb4Sub.getSelectedIndex()) {
      case 0: {
        lab = panel4Sub.jLabel8;
        break;
      }
      case 1: {
        lab = panel4Sub.jLabel9;
        break;
      }
      case 2: {
        lab = panel4Sub.jLabel10;
        break;
      }
      case 3: {
        lab = panel4Sub.jLabel11;
        break;
      }
      case 4: {
        lab = panel4Sub.jLabel14;
        break;
      }
      case 5: {
        lab = panel4Sub.jLabel15;
        break;
      }
      case 6: {
        lab = panel4Sub.jLabel16;
        break;
      }
      case 7: {
        lab = panel4Sub.jLabel17;
        break;
      }
      case 8: {
        lab = panel4Sub.jLabel20;
        break;
      }
      case 9: {
        lab = panel4Sub.jLabel21;
        break;
      }
      case 10: {
        lab = panel4Sub.jLabel22;
        break;
      }
      case 11: {
        lab = panel4Sub.jLabel23;
        break;
      }
      case 12: {
        lab = panel4Sub.jLabel26;
        break;
      }
      case 13: {
        lab = panel4Sub.jLabel27;
        break;
      }
      case 14: {
        lab = panel4Sub.jLabel28;
        break;
      }
      case 15: {
        lab = panel4Sub.jLabel29;
        break;
      }
      default: {
        lab = panel4Sub.jLabel8;
      }
    }
    //</editor-fold>
    whitenSub(jcb4Sub.getSelectedIndex(), lab);
  }

  private void findSystem(String string) {
    X = string.substring(0, 2);
    Y = string.substring(2, 4);
    boolean o = false;
    for (int j = 0; j < jcb4Sys.getItemCount(); j++) {
      if (jcb4Sys.getItemAt(j).toString().startsWith("" + X + Y)) {
        jcb4Sys.setSelectedIndex(j);
        o = true;
        break;
      }
    }
  }

  private void writeSectorInfo() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = true;
    //DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    String str = null;
    try {
      jta4Sec.setText(jcb4Sec.getSelectedItem().toString().toUpperCase() + CRLF);
      int count;
      count = 0;
      for (int j = world1; j < lines.length; j++) {
        count += 1;
      }
      jta4Sec.append(CRLF + "\tWorlds in sector = ".toUpperCase() + count
              + CRLF);
      worlds = count;
      if (count > 0) {
        count = 0;
        for (String line : lines) {
          if (line.contains("Alleg")) {
            count += 1;
            jta4Sec.append("\t" + line.substring(9));
            jta4Sec.append(" = " + getAlliedWorldCount("Sec", line.substring(9,
                    13)) + " worlds");
            jta4Sec.append(CRLF);
          }
        }
      }
      count = 0;
      String[] names;
      String[] tmp;
      tmp = new String[10];
      jta4Sec.append(CRLF + "\tRacial Names of sector".toUpperCase() + CRLF);
      for (int j = 0; j < world1; j++) {
        str = "# Name: ";
        if (lines[j].startsWith(str)) {
          tmp[count] = lines[j].substring(str.length()).trim();
          count += 1;
        }
      }
      names = new String[count];
      for (int j = 0; j < count; j++) {
        names[j] = tmp[j];
        jta4Sec.append("\t" + names[j] + CRLF);
      }
      count = 0;
      for (int j = 0; j < world1; j++) {
        String cred = "# Credits: ";
        if (lines[j].startsWith(cred)) {
          str = CRLF + "\t" + lines[j].substring(cred.length()).trim();
          jta4Sec.append(str + CRLF);
        }
        String era = "# Era: ";
        if (lines[j].startsWith(era)) {
          str = CRLF + "\t" + lines[j].substring(era.length()).trim();
          jta4Sec.append(str + CRLF);
        }
        String src = "# Source: ";
        if (lines[j].startsWith(src)) {
          str = CRLF + "\t" + lines[j].substring(src.length()).trim();
          jta4Sec.append(str + CRLF);
        }
      }
      jta4Sec.append(CRLF);
    } catch (Exception e) {
      System.out.println("2163" + " = " + e.toString());
    }
    getSpaceInfo(lines[world1 - 1]);
    jta4Sec.append(calcBreakdown("sec") + CRLF);
  }

  private String getAlliedWorldCount(String range, String alleg) {
    if (!isPopulated()) {
      return null;
    }
    int count = 0;
    int start = 0;
    for (int j = 0; j < 12; j++) {
      start += len[j] + 1;
    }
    int end = start + 4;
    if (range == "Sec") {
      for (int j = world1; j < lines.length; j++) {
        if (lines[j].substring(start, end).contains(alleg)) {
          count += 1;
        }
      }
    } else {//Subsector
      for (int j = world1; j < lines.length; j++) {
        if (lines[j].substring(start, end).contains(alleg)) {
          for (int k = 0; k < jcb4Sys.getItemCount(); k++) {
            if (jcb4Sys.getItemAt(k).toString().startsWith(lines[j].substring(0,
                    4))) {
              count += 1;
            }
          }
        }
      }
    }
    return "" + count;
  }

  private void writeSubsectorInfo() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = true;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    try {

      jta4Sub.setText(
              jcb4Sub.getSelectedItem().toString().toUpperCase() + CRLF);
      jta4Sub.append(CRLF + "\tWorlds in Subsector = ".toUpperCase() + jcb4Sys
              .getItemCount() + CRLF);
      if (jcb4Sys.getItemCount() > 0) {
        for (int j = 0; j < lines.length; j++) {
          if (lines[j].contains("Alleg")) {
            if (!getAlliedWorldCount("Sub", lines[j].substring(9, 13)).equals(
                    "0")) {
              jta4Sub.append("\t" + lines[j].substring(9));
              jta4Sub.append(" = " + getAlliedWorldCount("Sub",
                      lines[j].substring(9, 13)) + " worlds");
              jta4Sub.append(CRLF);
            }
          }
        }
      }
      jta4Line.setText("");
      jta4Line.append(getSpaceInfo(lines[world1 - 2]) + CRLF);
      jta4Line.append(getSpaceInfo(lines[world1 - 1]) + CRLF);
      jta4Line.append(lines[num] + CRLF);

      jta4Bases.setText("");
      sub = jcb4Sub.getSelectedItem().toString();
      jta4Bases.append(sub + CRLF);
      jta4Bases.append(bits[8] + CRLF);
      //<editor-fold defaultstate="collapsed" desc="DEB">
      if (DEBUG) {
        System.out.print("" + " = " + "" + CRLF);
        System.out.println("sub" + " = " + sub);
        System.out.println(getSpaceInfo(lines[world1 - 1]));
      }
      //</editor-fold>
      ArrayList<String> Bases = new ArrayList<>();
      for (int j = world1 - 1; j < lines.length; j++) {
        String line;
        if (j == world1 - 1) {
          line = getSpaceInfo(lines[j]);
        } else {
          line = lines[j];
          //<editor-fold defaultstate="collapsed" desc="DEB">
          if (DEBUG) {
            System.out.print("" + " = " + "" + CRLF);
            System.out.println("line" + " = " + line);
            System.out.println("bits[8]" + " = " + bits[8]);
            System.out.println("line.substring(len[8])" + " = " + line
                    .substring(len[8]));
          }
          //</editor-fold>
        }
      }
    } catch (Exception e) {
      System.out.println("2218" + " = " + e.toString());
    }
  }

  private void showExtra() {
    data = jta4Sys.getText().split(CRLF);
    jta4Info.setText("");
    setUWP();
    for (int j = 0; j < data.length; j++) {
      String dat = data[j];
      jta4Info.append(getInfo(dat));
    }
    jta4Info.append(CRLF);
  }

  private String getInfo(String dat) {
    out = "";
    try {
      switch (dat.substring(0, dat.indexOf(" = ")).trim()) {
        case "Hex": {
          out += getHex() + CRLF;
          break;
        }
        case "Name": {
          out += getSystemName() + CRLF;
          break;
        }
        case "UWP": {
          out += getUWP() + CRLF;
          break;
        }
        case "Remarks": {
          out += getRemarks() + CRLF;
          break;
        }
        case "{Ix}": {
          out += getIx() + CRLF;
          break;
        }
        case "(Ex)": {
          out += getEx() + CRLF;
          break;
        }
        case "[Cx]": {
          out += getCx() + CRLF;
          break;
        }
        case "N": {
          out += getN() + CRLF;
          break;
        }
        case "B": {
          out += getB() + CRLF;
          break;
        }
        case "Z": {
          out += getZ() + CRLF;
          break;
        }
        case "PBG": {
          out += getPBG() + CRLF;
          break;
        }
        case "W": {
          out += getW() + CRLF;
          break;
        }
        case "A": {
          out += getA() + CRLF;
          break;
        }
        case "Stellar": {
          out += getStellar() + CRLF;
          break;
        }
        default: {
          jta4Sys.append(getSpaceInfo(lines[world1 - 2]) + CRLF);
          jta4Sys.append(getSpaceInfo(lines[world1 - 1]) + CRLF);
        }
      }
    } catch (Exception e) {
      System.out.println("2299" + " = " + e.toString());
    }
    return out.substring(0, out.length() - 1);
  }

  private static String getHex() {
    out = data[0] + CRLF;
    return out;
  }

  private static String getSystemName() {
    out = data[1] + CRLF;
    return out;
  }

  private static String getUWP() {
    setUWP();
    out = "UWP = " + UWP + CRLF;
    out += getSP();
    out += getSiz();
    out += getAtmo();
    out += getHydro();
    out += getPop();
    out += getGov();
    out += getLaw();
    out += getTech();
    return out;
  }

  static void setUWP() {
    UWP = data[2].substring(data[2].indexOf(" = ") + 3);
  }

  private static String getSP() {
    //<editor-fold defaultstate="collapsed" desc="switch (sp)">
    String sp = UWP.substring(0, 1);
    switch (sp) {
      case "A": {
        Quality = "Excellent";
        Yards = "Starships";
        Repairs = "Overhaul";
        Fuel = "Both";
        Downport = "Yes";
        if (GlobalMethods.fromHex(UWP.substring(4, 5)) > 6) {
          Highport = "Yes";
        } else {
          Highport = "No";
        }
        possBases = "NS";
        break;
      }
      case "B": {
        Quality = "Good";
        Yards = "Spaceships";
        Repairs = "Overhaul";
        Fuel = "Both";
        Downport = "Yes";
        Highport = "";//if pop 8+
        if (GlobalMethods.fromHex(UWP.substring(4, 5)) > 7) {
          Highport = "Yes";
        } else {
          Highport = "No";
        }
        possBases = "NS";
        break;
      }
      case "C": {
        Quality = "Routine";
        Yards = "No";
        Repairs = "Major damage";
        Fuel = "Unrefined";
        Downport = "Yes";
        Highport = "";//if pop 7+
        if (GlobalMethods.fromHex(UWP.substring(4, 5)) > 8) {
          Highport = "Yes";
        } else {
          Highport = "No";
        }
        possBases = "S";
        break;
      }
      case "D": {
        Quality = "Poor";
        Yards = "No";
        Repairs = "Minor damage";
        Fuel = "Unrefined";
        Downport = "Yes";
        Highport = "No";
        possBases = "S";
        break;
      }
      case "E": {
        Quality = "Frontier";
        Yards = "No";
        Repairs = "No";
        Fuel = "No";
        Downport = "Beacon";
        Highport = "No";
        possBases = "No";
        break;
      }
      case "X": {
        Quality = "None";
        Yards = "No";
        Repairs = "No";
        Fuel = "No";
        Downport = "No";
        Highport = "No";
        possBases = "No";
        break;
      }
      case "F": {
        Quality = "Good";
        Yards = "No";
        Repairs = "Minor";
        Fuel = "Unrefined";
        Downport = "Yes";
        Highport = "No";
        possBases = "Fa Farming Possible";
        break;
      }
      case "G": {
        Quality = "Poor";
        Yards = "No";
        Repairs = "Superficial";
        Fuel = "Unrefined";
        Downport = "Yes";
        Highport = "No";
        possBases = "Mi Mining Possible.";
        break;
      }
      case "H": {
        Quality = "Primitive";
        Yards = "No";
        Repairs = "No";
        Fuel = "No";
        Downport = "Beacon";
        Highport = "No";
        possBases = "Co Colony Possible.  Pe Penal colony Possible";
        break;
      }
      case "Y": {
        Quality = "None";
        Yards = "No";
        Repairs = "No";
        Fuel = "No";
        Downport = "No";
        Highport = "No";
        possBases = "Re Reserve Possible";
        break;
      }
      case "?": {
        Quality = "?";
        Yards = "?";
        Repairs = "?";
        Fuel = "?";
        Downport = "?";
        Highport = "?";
        possBases = "?";
        break;
      }
    }
    //</editor-fold>
    String[] StarportUpdate = new String[]{
      "Starport = " + UWP.substring(0, 1),
      "\tQuality = " + Quality,
      "\tYards = " + Yards,
      "\tRepairs = " + Repairs,
      "\tFuel = " + Fuel,
      "\tDownport = " + Downport,
      "\tHighport = " + Highport,
      "\tpossBases = " + possBases
    };
    sp = "";
    for (int j = 0; j < StarportUpdate.length; j++) {
      sp += StarportUpdate[j] + CRLF;
    }
    return sp;
  }

  private static String getSp() {
    return UWP.substring(0, 1) + CRLF;
  }

  private static String getSiz() {
    out = "Size = " + UWP.substring(1, 2) + CRLF;
    out += GlobalMethods.getLinesFromTable(Size, UWP.substring(1, 2), true);
    return out;
  }

  private static String getAtmo() {
    out = "";
    out += "Atmosphere = " + UWP.substring(2, 3) + CRLF;
    out += GlobalMethods.getLinesFromTable(Atmo, UWP.substring(2, 3), true);
    return out;
  }

  private static String getHydro() {
    out = "Hydrosphere = " + UWP.substring(3, 4) + CRLF;
    out += GlobalMethods.getLinesFromTable(Hydro, UWP.substring(3, 4), true);
    return out;
  }

  public static String getPop() {
    out = "Population = " + UWP.substring(4, 5) + CRLF;
    out += "\tPOPULATION UNDER " + data[10].substring(6, 7);
    out += GlobalMethods.getStringFromTable("Digit", UWP.substring(4, 5),
            "Value", Pop) + CRLF;
    out += getLinesFromTable(Pop, UWP.substring(4, 5), true);
    return out;
  }

  private static String getGov() {
    out = "Government = " + UWP.substring(5, 6) + CRLF;
    out += getLinesFromTable(Govt, UWP.substring(5, 6), true);
    return out;
  }

  private static String getLaw() {
    out = "Law Level = " + UWP.substring(6, 7) + CRLF;
    out += getLinesFromTable(Law, UWP.substring(6, 7), true);
    return out;
  }

  private static String getTech() {
    out = "Tech Level = " + UWP.substring(8, 9) + CRLF;
    out += getLinesFromTable(Tech, UWP.substring(8, 9), true);
    return out;
  }

  private String getRemarks() {
    out = data[3] + CRLF;
    String[] parts = data[3].substring(9).split(" ");
    int num = parts.length;
    if (data[3].contains("(") | data[3].contains("[")) {
      num -= 1;
    }
    out += getTableTitles(Remarks);
    boolean titles = true;
    int j = 0;
    for (j = 0; j < parts.length; j++) {
      if (j != 0) {
        titles = false;
        out += getLinesFromTable(Remarks, parts[j], titles);
      }
    }
    if (data[3].contains("(")) {
      startuwp = data[3].indexOf("(") + 1;
      end = data[3].indexOf(")");
      String race = data[3].substring(startuwp, end).trim();
      out += "\t" + "Minor Race " + getNIL(race);
    }
    if (data[3].contains("[")) {
      startuwp = data[3].indexOf("[") + 1;
      end = data[3].indexOf("]");
      String race = data[3].substring(startuwp, end).trim();
      out += "\t" + "Major Race " + getNIL(race);
    }
    if (data[3].contains("O:")) {
      //owned by system in hex after O:
      int start = data[3].indexOf("O:") + 2;
      int end = start + 4;
      String hex = data[3].substring(start, end);
      out += "\tRuled by " + hex + " " + findSystemName(hex) + CRLF;
    }
    String st = "";
    for (j = 0; j < parts.length; j++) {
      if (parts[j].length() == 5) {
        st = "\t" + parts[j].substring(0, 4) + " <= " + parts[j].substring(4)
                + "9%" + CRLF;
        out += st;
      }
    }
    return out;
  }

  private String getNIL(String race) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    String nil = null;
    try {
      nil = "\tNative Intelligent Life = " + race;
      String number = null;
      try {
        number = data[3].substring(end + 1, end + 2);
        if (!number.equals(" ")) {
          nil += " < " + data[3].substring(end + 1, end + 2) + "0% "
                  + countNatives() + CRLF;
        } else {
          nil += CRLF + "\tNo details" + CRLF;
        }
      } catch (Exception e) {
        nil += CRLF + "No details" + CRLF;
        System.out.println("2846" + " = " + e.toString());
      }
      nil += getTableTitles(NIL);
      int pop, atm, tl, gov;
      atm = GlobalMethods.fromHex(UWP.substring(2, 3));
      pop = GlobalMethods.fromHex(UWP.substring(4, 5));
      gov = GlobalMethods.fromHex(UWP.substring(5, 6));
      tl = GlobalMethods.fromHex(UWP.substring(8, 9));
      //Native
      if (pop > 6) {
        if (atm > 1 & atm < 10) {
          if (tl > 0) {
            startuwp = 6;
            nil += GlobalMethods.getLineFromTable(NIL, startuwp) + CRLF;
          }
        }
      }
      //Exotics
      if (pop > 6) {
        if (atm > 9) {
          if (tl > 0) {
            startuwp = 11;
            nil += GlobalMethods.getLineFromTable(NIL, startuwp) + CRLF;
          }
        }
      }
      //Transplants
      if (pop > 6) {
        if (atm < 2) {
          if (tl > 0) {
            startuwp = 16;
            nil += GlobalMethods.getLineFromTable(NIL, startuwp) + CRLF;
          }
        }
      }
      //Extinct
      if (pop < 1) {
        if (atm > 1) {
          if (tl > 0) {
            startuwp = 16;
            nil += GlobalMethods.getLineFromTable(NIL, startuwp) + CRLF;
          }
        }
      }
      //Vanished
      if (pop < 1) {
        if (atm < 2) {
          if (tl > 0) {
            startuwp = 21;
            nil += GlobalMethods.getLineFromTable(NIL, startuwp) + CRLF;
          }
        }
      }
      //Transients
      if (pop > 0 & pop < 4) {
        startuwp = 26;
        nil += GlobalMethods.getLineFromTable(NIL, startuwp) + CRLF;
      }
      //Settlers
      if (pop > 3 & pop < 7) {
        startuwp = 31;
        nil += GlobalMethods.getLineFromTable(NIL, startuwp) + CRLF;
      }
      //Corporate
      if (gov == 1) {
        startuwp = 36;
        nil += GlobalMethods.getLineFromTable(NIL, startuwp) + CRLF;
      }
      //Colonists
      if (gov == 6) {
        startuwp = 41;
        nil += GlobalMethods.getLineFromTable(NIL, startuwp) + CRLF;
      }
    } catch (Exception e) {
      System.out.println("2920" + " = " + e.toString());
    }
    return nil;
  }

  static String countNatives() {
    int pop, pm, pc, num;
    pop = GlobalMethods.fromHex(UWP.substring(4, 5)) - 1;
    pm = GlobalMethods.fromHex(data[10].substring(6, 7));
    pc = GlobalMethods.fromHex(data[3].substring(end + 1, end + 2));
    for (int j = 0; j < pop; j++) {
      pm *= 10;
    }
    String mynumber = NumberFormat.getInstance().format(pm * pc);
    return "< " + mynumber;
  }

  private String getIx() {
    out = data[4] + CRLF;
    try {
      int Ix = Integer.parseInt(data[4].substring(8).replace("}", "").trim());
      int ix = 0;
      int mod = 0;
      String Sp = UWP.trim().substring(0, 1);
      if ((Sp.contains("A")) | (Sp.contains("B"))) {
        ix += 1;
        out += "\tStarport " + Sp + " = +1" + CRLF;
      }
      if ((Sp.contains("D")) | (Sp.contains("E")) | (Sp.contains("F")) | (Sp
              .contains("X"))) {
        ix -= 1;
        out += "\tStarport " + Sp + " = -1" + CRLF;
      }
      int tl = GlobalMethods.fromHex(UWP.trim().substring(8, 9));
      if (tl > 9) {
        ix += 1;
        out += "\tTL " + tl + " = +1" + CRLF;
      }
      if (tl < 8) {
        ix -= 1;
        out += "\tTL " + tl + " = -1" + CRLF;
      }
      String[] parts = data[3].substring(10).trim().split(" ");
      for (int j = 0; j < parts.length; j++) {
        if (parts[j].contains("Ag")) {
          ix += 1;
          out += "\tAg  = +1" + CRLF;
        }
        if (parts[j].contains("Hi")) {
          ix += 1;
          out += "\tHi  = +1" + CRLF;
        }
        if (parts[j].contains("In")) {
          ix += 1;
          out += "\tIn  = +1" + CRLF;
        }
        if (parts[j].contains("Ri")) {
          ix += 1;
          out += "\tRi  = +1" + CRLF;
        }
        if (parts[j].contains("Cp")) {
          ix += 1;
        }
      }
      int pop = GlobalMethods.fromHex(UWP.substring(4, 5));
      if (pop < 7) {
        ix -= 1;
        out += "\tPop < 7 = -1" + CRLF;
      }
      //Naval & Scout = +1
      if (data[8].substring(4).contains("B")) {
        ix += 1;
        out += "\tNavy & Scout bases  = +1" + CRLF;
      }
      //Way Station = +1
      if (data[8].substring(4).contains("W")) {
        ix += 1;
        out += "\tWay Station  = +1" + CRLF;
      }
      String importance = "Normal";
      //Important = 4+
      if (Ix > 3) {
        importance = "Important";
      } else //Unimportant = 0-
      {
        if (Ix < 1) {
          importance = "Unimportant";
        }
      }
      mod = Ix - ix;
      String m = "\tImportance = " + importance + " (" + ix + ")+" + mod + "="
              + Ix;
      out += m + CRLF;
    } catch (Exception e) {
      out += "3027 \tNo Data Available" + CRLF;
    }
    return out;
  }

  private String getEx() {
    out = data[5] + CRLF;
    try {
      int r = GlobalMethods.fromHex(data[5].substring(1 + 7, 2 + 7));
      out += "\tResources =  " + r + CRLF;
      if (r == 0) {
        r = 1;
      }
      int l = GlobalMethods.fromHex(data[5].substring(2 + 7, 3 + 7));
      out += "\tLabour =  " + l + CRLF;
      if (l == 0) {
        r = 1;
      }
      int i = GlobalMethods.fromHex(data[5].substring(3 + 7, 4 + 7));
      out += "\tInfrastructure =  " + i + CRLF;
      if (i == 0) {
        r = 1;
      }
      int e = GlobalMethods.fromHex(data[5].substring(4 + 7, 6 + 7));
      out += "\tEfficiency =  " + e + CRLF;
      if (e == 0) {
        r = 1;
      }
      out += "\tRU = " + (r * l * i * e) + CRLF;
    } catch (Exception e) {
      out += "3057\tNo Data Available" + CRLF;
    }
    return out;
  }

  private String getCx() {
    out += data[6] + CRLF;
    try {
      int ho = 0;
      ho = GlobalMethods.fromHex(data[6].substring(1 + 7, 2 + 7));
      int ac = 0;
      ac = GlobalMethods.fromHex(data[6].substring(2 + 7, 3 + 7));
      int st = 0;
      st = GlobalMethods.fromHex(data[6].substring(3 + 7, 4 + 7));
      int sy = 0;
      sy = GlobalMethods.fromHex(data[6].substring(4 + 7, 5 + 7));
      out += "\tHomogeneity = " + ho + CRLF;
      out += "\tAcceptance = " + ac + CRLF;
      out += "\tStrangeness = " + st + CRLF;
      out += "\tSymbols = " + sy + CRLF;
    } catch (Exception e) {
      out += "3078\tNo Data Available" + CRLF;
    }
    return out;
  }

  private String getN() {
    out = data[7] + CRLF;
    boolean titles = true;
    String ranks = data[7].substring(4);
    int len = data[7].substring(4).length();
    if (!data[7].contains("-")) {
      for (int j = 0; j < len; j++) {
        if (j != 0) {
          titles = false;
        }
        out += GlobalMethods.getLinesFromTable(N, ranks.substring(j, j + 1),
                titles);
      }
    } else {
      out += "\tNo Imperial Nobles" + CRLF;
    }
    return out;
  }

  private String getB() {
    out = data[8] + CRLF;
    String bases = data[8].substring(4);
    int num = bases.length();
    out += GlobalMethods.getTableTitles(B);
    for (int j = 0; j < num; j++) {
      out += GlobalMethods
              .getLinesFromTable(B, bases.substring(j, j + 1), false);
    }
    return out;
  }

  private String getPBG() {
    try {
      out = data[10] + CRLF;
      //P
      out += "\tPopulation Multiplier = " + data[10].substring(6, 7) + CRLF;
      out += "\tPOPULATION UNDER " + data[10].substring(6, 7);
      out += GlobalMethods.getStringFromTable("Digit", UWP.substring(4, 5),
              "Value", Pop);
      out += CRLF;
      jLabel8.setText(data[10].substring(6, 7));
      //B
      out += "\tPlanetoid Belts = " + data[10].substring(7, 8) + CRLF;
      jLabel9.setText(data[10].substring(7, 8));
      //G
      out += "\tGas Giants = " + data[10].substring(8, 9) + CRLF;
      jLabel10.setText(data[10].substring(8, 9));
    } catch (Exception e) {
      out += "3179\tNo Data Available" + CRLF;
    }
    return out;
  }

  private String getW() {
    try {
      out = data[11] + CRLF;
      int total = Integer.parseInt(data[11].substring(4));
      out += "\tNon Stars In System = " + total + CRLF;
      int mw = 1;
      out += "\t-" + mw + " (mainworld)" + CRLF;
      int pb = Integer.parseInt(data[10].substring(7, 8));
      out += "\t-" + pb + " (planetoid belts)" + CRLF;
      int gg = Integer.parseInt(data[10].substring(8, 9));
      out += "\t-" + gg + " (gas giants)" + CRLF;
      out += "\t = " + (total - (mw + pb + gg)) + " other worlds" + CRLF;
      jLabel12.setText(data[11].substring(4));
    } catch (Exception e) {
      out += "3197\tNo Data Available" + CRLF;
    }
    return out;
  }

  private String getW(Object object) {
    if (object == null) {
      return data[11];
    } else {
      return getW();
    }
  }

  private String getA() {
    try {
      out = data[12] + CRLF;
      String alleg = data[12].substring(4);
      out += GlobalMethods.getLinesFromTable(Alleg, alleg, true);
    } catch (Exception e) {
      out += "3216\tNo Data Available" + CRLF;
    }
    return out;
  }

  @SuppressWarnings("unchecked")
  private String getStellar() {
    try {
      out = data[13] + CRLF;
      String[] parts = data[13].substring(10).split(" ");
      stars = 0;
      int dwarfs = 0;
      int[] Dwarfs;
      int i = 0;
      for (int j = 0; j < parts.length; j++) {
        if (parts[j].endsWith("D")) {
          dwarfs += 1;
        }
      }
      Dwarfs = new int[dwarfs];
      for (int j = 0; j < parts.length; j++) {
        if (parts[j].contains("D")) {
          Dwarfs[i] = j;
        }
      }
      stars = ((parts.length - dwarfs) / 2) + dwarfs;
      out += "\tStars" + " = " + stars;
      int[] starlen = new int[stars];
      int count = 0;
      for (int j = 0; j < parts.length; j++) {
        if (!parts[j].contains("D") | j == (parts.length - 1)) {
          j += 1;
          starlen[count] = 2;
        } else {
          starlen[count] = 1;
        }
        count += 1;
      }
      int start = 0;
      int end = 0;
      DefaultComboBoxModel<String> cbm = new DefaultComboBoxModel<>();
      for (int j = 0; j < stars; j++) {
        String st = "";
        end += starlen[j];
        for (int k = start; k < end; k++) {
          st += (parts[k] + " ");
        }
        cbm.addElement(st.trim());
        start += starlen[j];
      }
      jcb4Star.setModel(cbm);
      jcb4Star.setSelectedIndex(0);
    } catch (Exception e) {
      out += "3361\tNo Data Available" + CRLF;
    }
    return out;
  }

  private void calcCost() {
    int jj = js4Dist.getValue();
    int dt = Integer.parseInt(jComboBox19.getSelectedItem().toString());
    String start = "";
    Refined = jCheckBox2.isSelected();
    if (Refined == true) {
      cost = refined;
    } else if (Refined == false) {
      cost = unrefined;
    }
    String k = null;
    boolean KT = jCheckBox1.isSelected();
    if (KT == true) {
      start = "MCr";
      k = ",000";
    }
    if (!KT) {
      start = "KCr";
      k = "";
    }
    if (js4Dist.getValue() == 0) {
      jj = 1;
    }
    int sum = dt * jj / 10 * cost;
    jLabel3.setText("" + sum + start);
    jLabel3.setToolTipText("Click to alter costs");
    jCheckBox2.setToolTipText("" + cost + "KCr per ton");
    jCheckBox1.setToolTipText("" + (dt / 10 * jj) + k + " tons fuel");
    String txt = "Jump " + js4Dist.getValue() + " - " + jCheckBox1
            .getToolTipText() + " @ " + jCheckBox2.getToolTipText() + " = " + jLabel3
            .getText();
    txt2cb(txt);
  }

  private void saveSecFiles() {
    for (int j = 0; j < jcb4Sec.getModel().getSize(); j++) {
      jcb4Sec.setSelectedIndex(j);
      saveSubFiles();
    }
  }

  private void saveSubFiles() {
    try {
      for (int k = 0; k < jcb4Sub.getModel().getSize(); k++) {
        jcb4Sub.setSelectedIndex(k);
        saveSysFiles();
      }
    } catch (Exception e) {
      System.out.println("3513" + " = " + e.toString());
    }
  }

  private void saveSysFiles() {
    for (int l = 0; l < jcb4Sys.getModel().getSize(); l++) {
      jcb4Sys.setSelectedIndex(l);
      saveTexts();
    }
  }

  private String getPrimary() {
    return jcb4Star.getItemAt(0).toString();
  }

  private void modTech() {
    //St
    //"A"=+6
    //"B"=+4
    //"C"=+2
    //"X"=-4
    //"F"=+1
    //Si
    //0,1 = +2
    //2,3,4 = +1
    //A
    //0,1,2,3 = +1
    //A,B,C,D,E,F = +1
    //H
    //9 = +1
    //10 = +2
    //P
    //1,2,3,4,5 = +1
    //9 = +2
    //10 = +4
    //G
    //0,5 = +1
    //13 = -2
  }

  private String getBigWorld() {
    if (orbit[habz] == "") {
      orbit[habz] = "BigWorld";
    } else {
    }
    return orbit[habz];
  }

  private static String getGG() {
    num = GlobalMethods.roll2d();
    String rep = getStringFromTable("2D", "" + num, "Dia", GGs);
    int gasg = 0;
    if (num < 4) {
      if (gasg % 2 == 0) {
        rep = "SGG (" + rep + " mi dia.)";
      } else {
        rep = "IG (" + rep + " mi dia.)";
        gasg += 1;
      }
    } else {
      rep = "LGG (" + rep + " mi dia.)";
    }
    ws = GlobalMethods.fromHex(getStringFromTable("2D", "" + num, "WSize", GGs));
    rep += "\tS=" + ws;
    return rep;
  }

  private void showStrength() {
    jta4Str.setText("");
    SDBsMouseClicked(me);
    RonsMouseClicked(me);
    CFMouseClicked(me);
    TroopsMouseClicked(me);
    String[] p;

    jta4Str.append("SDB Squadrons = " + sdbs1.getText() + CRLF);
    if (!sdbs1.getText().equals("X")) {
      jta4Str.append(getSDBTactics());
      p = Panel4T5TableView.getTableData(
              new String[]{"SDBSquadrons", getpop(), gettl()}).split(CRLF);
      for (String p1 : p) {
        jta4Str.append("\t" + p1 + CRLF);
      }
    }

    jta4Str.append("Starship Squadrons = " + squadrons.getText() + CRLF);
    if (!squadrons.getText().equals("X")) {
      jta4Str.append(getSquadronTactics());
      p = Panel4T5TableView.getTableData(
              new String[]{"MaxStarshipSquadrons", getpop(), gettl(), troopunits
                        .getText()}).split(CRLF);
      for (String p1 : p) {
        jta4Str.append("\t" + p1 + CRLF);
      }
    }

    jta4Str.append("Defence CF = " + defbats.getText() + CRLF);
    if (!defbats.getText().equals("X")) {
      jta4Str.append(getDefTactics());
      p = Panel4T5TableView.getTableData(
              new String[]{"DefenceBattalionsCombatFactor", getpop(), gettl(), defbats
                        .getText()}).split(CRLF);
      for (String p1 : p) {
        jta4Str.append("\t" + p1 + CRLF);
      }
    }

    jta4Str.append("Troop CF = " + troopunits.getText() + CRLF);
    if (!troopunits.getText().equals("X")) {
      jta4Str.append(getTroopTactics());
      p = Panel4T5TableView.getTableData(
              new String[]{"InitialProduction", getpop(), gettl(), defbats.getText()})
              .split(CRLF);
      for (String p1 : p) {
        jta4Str.append("\t" + p1 + CRLF);
      }
    }

    jta4Str.append("Refuelling options" + CRLF);
    if (getFuelTactics() != null) {
      jta4Str.append(getFuelTactics());
    }
  }

  private void doJumps() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      //System.out.println("" + " = " + );
    }
    //</editor-fold>
    try {
      T5JumpCalc jumpCalc = new dbviewer.T5JumpCalc(jcb4Sys.getSelectedItem()
              .toString(), Panel4T5Locator.js4Dist.getValue(), "T5");
      showJumps();
    } catch (Exception e) {
      System.out.println("3896" + " = " + e.toString());
    }

  }

  @SuppressWarnings("unchecked")
  private void showJumps() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    dlm = new DefaultListModel<>();
    String[] neighbours = new String[9];
    JLabel tmp = null;
    for (int j = 0; j < neighbours.length; j++) {
      //<editor-fold defaultstate="collapsed" desc="switch (j)">
      switch (j) {
        case 0: {
          tmp = panel4Sec.jLabel0;
          break;
        }
        case 1: {
          tmp = panel4Sec.jLabel1;
          break;
        }
        case 2: {
          tmp = panel4Sec.jLabel2;
          break;
        }
        case 3: {
          tmp = panel4Sec.jLabel3;
          break;
        }
        case 4: {
          tmp = panel4Sec.jLabel4;
          break;
        }
        case 5: {
          tmp = panel4Sec.jLabel5;
          break;
        }
        case 6: {
          tmp = panel4Sec.jLabel6;
          break;
        }
        case 7: {
          tmp = panel4Sec.jLabel7;
          break;
        }
        case 8: {
          tmp = panel4Sec.jLabel8;
          break;
        }
      }
      //</editor-fold>
      neighbours[j] = _SEC + FS + tmp.getToolTipText() + ".sec";
    }
    String[] lines = GlobalMethods.getLinesFromFile(new File(neighbours[0]));
    int start = 0;
    for (int j = 0; j < lines.length; j++) {
      if (lines[j].startsWith("----")) {
        start = j;
      }
    }
    String[] worlds = new String[lines.length - start];
    int i = 0;
    for (int j = (start + 1); j < lines.length; j++) {
      worlds[i] = lines[j];
      i += 1;
    }
    String[] entries = jta4Near.getText().split(CRLF);
    for (int j = 0; j < entries.length; j++) {
      //if not end in "OUT" and within jcb4Sys then
      if (!entries[j].contains("OUT")) {
        boolean done = false;
        try {
          for (int k = 0; k < worlds.length; k++) {
            if (worlds[k].substring(0, 4).equals(entries[j])) {
              done = true;
              dlm.addElement(worlds[k]);
            }
          }
        } catch (Exception e) {
          //<editor-fold defaultstate="collapsed" desc="DEB">
          if (DEBUG) {
            System.out.print("" + " = " + "" + CRLF);
            System.out.println("4011 = " + e.toString());
          }
          //</editor-fold>
        }
        if (!done) {
          dlm.addElement(entries[j]);
        }
      } else {
        // OUT only
        int x = Integer.parseInt(entries[j].substring(0, 2));
        int y = Integer.parseInt(entries[j].substring(2, 4));
        String orig = jcb4Sys.getSelectedItem().toString().substring(0, 4);
        int X = Integer.parseInt(orig.substring(0, 2));
        int Y = Integer.parseInt(orig.substring(2, 4));
        //<editor-fold defaultstate="collapsed" desc="try">
        try {
          if (X < 17 & Y < 21) {//Top Left
            if (x < 17 & y > 20) {
              entries[j] += " N";
            }
            if (x > 16 & y < 21) {
              entries[j] += " W";
            }
            if (x > 16 & y > 20) {
              entries[j] += " NW";
            }

          } else if (X > 16 & Y < 21) {//Top Right
            if (x > 16 & y > 20) {
              entries[j] += " N";
            }
            if (x < 17 & y < 21) {
              entries[j] += " E";
            }
            if (x < 17 & y > 20) {
              entries[j] += " NE";
            }

          } else if (X < 17 & Y > 20) {//Bottom Left
            if (x < 17 & y < 21) {
              entries[j] += " S";
            }
            if (x > 16 & y < 21) {
              entries[j] += " SW";
            }
            if (x > 16 & y > 20) {
              entries[j] += " W";
            }

          } else if (X > 16 & Y > 20) {//Bottom Right
            if (x > 16 & y < 21) {
              entries[j] += " S";
            }
            if (x < 17 & y < 21) {
              entries[j] += " SE";
            }
            if (x < 17 & y > 20) {
              entries[j] += " E";
            }
          } else {
            JOptionPane.showMessageDialog(panel4Jump,
                    "X=" + X + ",Y=" + Y + ",x=" + x + ",y=" + y);
          }
        } catch (Exception e) {
          System.out.println("4035" + " = " + e.toString());
        }
        //</editor-fold>
        String[] entree = entries[j].split("OUT ");
        int num = 0;
        //<editor-fold defaultstate="collapsed" desc="switch (entree[1])">
        switch (entree[1]) {
          case "N": {
            num = 2;
            break;
          }
          case "NE": {
            num = 3;
            break;
          }
          case "E": {
            num = 4;
            break;
          }
          case "SE": {
            num = 5;
            break;
          }
          case "S": {
            num = 6;
            break;
          }
          case "SW": {
            num = 7;
            break;
          }
          case "W": {
            num = 8;
            break;
          }
          case "NW": {
            num = 1;
            break;
          }
        }
        //</editor-fold>
        String[] all = GlobalMethods.getLinesFromFile(new File(neighbours[num]));
        for (int k = 0; k < all.length; k++) {
          string = "";
          if (all[k].startsWith(entree[0].substring(0, 4))) {
            string = all[k];
            break;
          } else {
            string = "";
          }
        }
        if (string != "") {
          dlm.addElement(entries[j].substring(0, 5) + string.substring(5));////
        } else {
          dlm.addElement(entree[0]);
        }
      }
    }
    jl4Jump.setModel(dlm);
  }

  private String getStarColors() {
    String txt = "getStarColors" + CRLF;
    txt += "O Blue" + " = " + o.getRed() + "-" + o.getGreen() + "-" + o
            .getBlue() + CRLF;
    txt += "B Blue-White" + " = " + be.getRed() + "-" + be.getGreen() + "-" + be
            .getBlue() + CRLF;
    txt += "A Cyan" + " = " + a.getRed() + "-" + a.getGreen() + "-" + a
            .getBlue() + CRLF;
    txt += "F Yellow-White" + " = " + fi.getRed() + "-" + fi.getGreen() + "-"
            + fi
                    .getBlue() + CRLF;
    txt += "G Yellow" + " = " + gi.getRed() + "-" + gi.getGreen() + "-" + gi
            .getBlue() + CRLF;
    txt += "K Orange" + " = " + k.getRed() + "-" + k.getGreen() + "-" + k
            .getBlue() + CRLF;
    txt += "M Red" + " = " + m.getRed() + "-" + m.getGreen() + "-" + m.getBlue()
            + CRLF;
    return txt;
  }

  private void addMoons(int orb) {
    if (orb < 0) {
      orb = 0;
    }
    moons = 0;
    rings = 0;
    hz = Integer.parseInt(GlobalMethods.getHZ(Stars[0]));
    {
      int numn = GlobalMethods.roll1d();
      if (orbit[orb].contains("GG")) {
        numn -= 1;
      } else if (orbit[orb].contains("World")
              | orbit[orb].contains("Mainworld")
              | orbit[orb].contains("BigWorld")) {
        if (orb < hz - 1) {
          numn -= 5;
        } else if (orb > hz + 1) {
          numn -= 3;
        } else {
          numn -= 4;
        }
      }
      if (numn == 0) {
        rings += 1;
      }
      if (rings > 0) {
        orbit[orb] += CRLF + "\t  " + "Ring @ Orbit " + getOrbitLet();
      }
      for (int j = 0; j < numn; j++) {
        doMoons(orb, numn);
      }
    }
  }

  private void doMoons(int orb, int mns) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = true;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      System.out.println("orb = " + orb);
      System.out.println("mns = " + mns);
    }
    //</editor-fold>
    String[] let = new String[mns];
    int l = 0;
    for (int j = 0; j < mns; j++) {
      int b = (int) (Math.random() * 2);
      if (b == 1) {
        string = "Close";
      } else {
        string = "Far";
      }
      int roll = GlobalMethods.rollFlux();
      let[j] = GlobalMethods.getStringFromTable("Flux", "" + roll, string,
              MainworldType);
    }
    if (orb < habz - 1) {
      //Inner
      sats = InnerSats;
    } else if (orb > habz + 1) {
      //Outer
      sats = OuterSats;
    } else {
      //Hospitable
      sats = HospitableSats;
    }
    int num = GlobalMethods.roll1d();
    if (orbit[orb].contains("GG")) {
      num += 1;
    }
    num -= 1;
    orbit[orb] += CRLF + "\t  " + sats[num] + "\t  "
            + getOtherStats(sats[num], "sat") + " @ Orbit " + let[l++];//;//
  }

  private String fixRingMoons(int orbitnum) {
    String[] li = orbit[orbitnum].split(CRLF);
    int moon = 0;
    for (int j = 0; j < li.length; j++) {
      if (li[j].startsWith("\t  ")) {
        moon += 1;
      }
    }
    if (moon < 2) {
    } else {
      String let = "";
      String[] letsa;
      boolean OK = true;
      letsa = new String[moon];
      for (int p = 0; p < moon; p++) {
        lab:
        {
          int b = (int) (Math.random() * 2);
          if (b == 1) {
            string = "Close";
          } else {
            string = "Far";
          }
          int roll = GlobalMethods.rollFlux();
          let = GlobalMethods.getStringFromTable("Flux", "" + roll, string,
                  MainworldType);
          OK = true;
          letsa[p] = let;
          for (int k = 0; k < letsa.length; k++) {
            if (p != k & let == letsa[k]) {
              OK = false;
              p -= 1;
              break lab;
            }
          }
        }
      }
      Arrays.sort(letsa);
      int n = 0;
      for (int j = 0; j < li.length; j++) {
        if (li[j].startsWith("\t  ")) {
          int len = li[j].length();
          li[j] = li[j].substring(0, len - 1) + letsa[n++];
        }
      }
    }
    String newline = "";
    for (int j = 0; j < li.length; j++) {
      newline += li[j];
      if (j < li.length - 1) {
        newline += CRLF;
      }
    }
    return newline;
  }

  private boolean beforeFull(int orb) {
    boolean full = true;
    for (int j = orb - 1; j >= 0; j--) {
      if (orbit[j].endsWith(" = ")) {
        full = false;
      }
    }
    return full;
  }

  private String getOtherStats(String worldtype, String satworld) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="setup">
    String uwp = "X000000-0";
    String St = "", S = "", A = "", H = "", P = "", G = "", L = "", T = "";
    int st = GlobalMethods.roll1d(), s = GlobalMethods.roll2d(),
            a = GlobalMethods.roll2d(), h = GlobalMethods.roll2d(),
            p = GlobalMethods.roll2d(), g = GlobalMethods.roll2d(),
            l = GlobalMethods.roll2d(), t = GlobalMethods.roll1d();
    s -= 2;
    a -= 7;
    a += s;
    if (s == 0) {
      a = 0;
    }
    h -= 7;
    h += a;
    if (h > 10) {
      h = 10;
    }
    if (s < 3) {
      h = 0;
    }
    if (a < 2) {
      h -= 4;
    }
    if (a > 9) {
      h -= 4;
    }
    p -= 2;
    g -= 7;
    g += p;
    if (p == 0) {
      g = 0;
    }
    l -= 7;
    l += g;
    if (p < 1) {
      l = 0;
      t = 0;
    }
    int maxpop = GlobalMethods.fromHex(UWP.substring(4, 5)) - 1;
    if (p > maxpop) {
      p = maxpop;
    }

    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="switch (typ)">
    switch (satworld) {
      //<editor-fold defaultstate="collapsed" desc="case "world":">
      case "world": {
        //<editor-fold defaultstate="collapsed" desc="switch (st)">
        switch (st) {
          case 0:
          case 1:
          case 2: {
            St = "F";
            break;
          }
          case 3: {
            St = "G";
            break;
          }
          case 4:
          case 5: {
            St = "H";
            break;
          }
          default: {
            St = "Y";
            break;
          }
        }
        st = p - GlobalMethods.roll1d();
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="switch (s)">
        switch (s) {
          default: {
            S = GlobalMethods.toHex(s);
            break;
          }
        }
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="switch (a)">
        switch (a) {
          default: {
            A = GlobalMethods.toHex(a);
            break;
          }
        }
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="switch (h)">
        switch (h) {
          default: {
            H = GlobalMethods.toHex(h);
            break;
          }
        }
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="switch (p)">
        switch (p) {
          default: {
            P = GlobalMethods.toHex(p);
            break;
          }
        }
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="switch (g)">
        switch (g) {
          default: {
            G = GlobalMethods.toHex(g);
            break;
          }
        }
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="switch (l)">
        switch (l) {
          default: {
            L = GlobalMethods.toHex(l);
            break;
          }
        }
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="switch (t)">
        switch (t) {
          default: {
            T = GlobalMethods.toHex(t);
            break;
          }
        }
        //</editor-fold>
        break;
      }
      //</editor-fold>
      //<editor-fold defaultstate="collapsed" desc="case "sat":">
      case "sat": {
        //<editor-fold defaultstate="collapsed" desc="switch (st)">
        switch (st) {
          case 2: {
            St = "F";
            break;
          }
          case 3: {
            St = "G";
            break;
          }
          case 4: {
            St = "H";
            break;
          }
          case 5: {
            St = "H";
            break;
          }
          default: {
            St = "Y";
            break;
          }
        }
        st = p - GlobalMethods.roll1d();
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="switch (s)">
        switch (s) {
          default: {
            S = GlobalMethods.toHex(s);
            break;
          }
        }
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="switch (a)">
        switch (a) {
          default: {
            A = GlobalMethods.toHex(a);
            break;
          }
        }
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="switch (h)">
        switch (h) {
          default: {
            H = GlobalMethods.toHex(h);
            break;
          }
        }
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="switch (p)">
        switch (p) {
          default: {
            P = GlobalMethods.toHex(p);
            break;
          }
        }
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="switch (g)">
        switch (g) {
          default: {
            G = GlobalMethods.toHex(g);
            break;
          }
        }
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="switch (l)">
        switch (l) {
          default: {
            L = GlobalMethods.toHex(l);
            break;
          }
        }
        //</editor-fold>
        //<editor-fold defaultstate="collapsed" desc="switch (t)">
        switch (t) {
          default: {
            T = GlobalMethods.toHex(t);
            break;
          }
        }
        //</editor-fold>
      }
      //</editor-fold>
    }
    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="switch (worldtype)">
    switch (worldtype) {
      //<editor-fold defaultstate="collapsed" desc="case "Hospitable":">
      case "Hospitable": {
        //StSAHPGL-T
        break;
      }
      //</editor-fold>
      //<editor-fold defaultstate="collapsed" desc="case "Planetoid":">
      case "Planetoid": {
        //St000PGL-T
        s = 0;
        a = 0;
        h = 0;
        break;
      }
      //</editor-fold>
      //<editor-fold defaultstate="collapsed" desc="case "IceWorld":">
      case "IceWorld": {
        //StSAHPGL-T
        //Pop=DM-6;
        h -= 6;
        break;
      }
      //</editor-fold>
      //<editor-fold defaultstate="collapsed" desc="case "RadWorld":">
      case "RadWorld": {
        //StSAH000-0
        //Size=2D
        s = GlobalMethods.getRoll(2);
        p = 0;
        g = 0;
        l = 0;
        t = 0;
        break;
      }
      //</editor-fold>
      //<editor-fold defaultstate="collapsed" desc="case "Inferno":">
      case "Inferno": {
        //YSB0000-0
        //Size=2D
        s = GlobalMethods.getRoll(2);
        a = 11;
        h = 0;
        p = 0;
        g = 0;
        l = 0;
        t = 0;
        break;
      }
      //</editor-fold>
      //<editor-fold defaultstate="collapsed" desc="case "BigWorld":">
      case "BigWorld": {
        //StSAHPGL-T
        //Size=2D+7
        s = GlobalMethods.getRoll(2) + 7;
        //Any siz=B+ = BigWorld
        break;
      }
      //</editor-fold>
      //<editor-fold defaultstate="collapsed" desc="case "Worldlet":">
      case "Worldlet": {
        //StSAHPGL-T
        //Size=1D-3
        s = GlobalMethods.getRoll(1) - 3;
        break;
      }
      //</editor-fold>
      //<editor-fold defaultstate="collapsed" desc="case "InnerWorld":">
      case "InnerWorld": {
        //StSAHPGL-T
        //Pop=DM-4;
        p -= 4;
        //Hyd=DM-4;
        h -= 4;
        break;
      }
      //</editor-fold>
      //<editor-fold defaultstate="collapsed" desc="case "StormWorld":">
      case "StormWorld": {
        //StSAHPGL-T
        //Size=2D
        s = GlobalMethods.getRoll(2);
        //Atm=DM-4;
        a -= 4;
        //Hyd=DM-4;
        h -= 4;
        //Pop=DM-4;
        p -= 4;
        break;
      }
      //</editor-fold>
    }
    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="mod numbers">
    if (p <= 0) {
      g = 0;
      l = 0;
      t = 0;
      st = 0;
    }
    if (p > maxpop) {
      p = maxpop;
    }
    if (st < 0) {
      st = 0;
    }
    if (s < 0) {
      s = 0;
    }
    if (a < 0) {
      a = 0;
    }
    if (h < 0) {
      h = 0;
    }
    if (p < 0) {
      p = 0;
    }
    if (g < 0) {
      g = 0;
    }
    if (l < 0) {
      l = 0;
    }
    if (t < 0) {
      t = 0;
    }
    if (p == 0) {
      St = "Y";
      g = 0;
      l = 0;
      t = 0;
    }
    if (getSp() == "A") {
      t += 6;
    }
    if (getSp() == "B") {
      t += 4;
    }
    if (getSp() == "C") {
      t += 2;
    }
    if (getSp() == "X") {
      t += -4;
    }
    if (getSp() == "F") {//Spaceport NOT StarPort
      t += 1;
    }
    if (getsize() == "0" | getsize() == "1") {
      t += 2;
    }
    if (getsize() == "2" | getsize() == "3" | getsize() == "4") {
      t += 1;
    }
    if (getatmo() == "0" | getatmo() == "1" | getatmo() == "2" | getatmo()
            == "3") {
      t += 1;
    }
    if (getatmo() == "A" | getatmo() == "B" | getatmo() == "C" | getatmo()
            == "D" | getatmo() == "E" | getatmo() == "F") {
      t += 1;
    }
    if (gethydro() == "9") {
      t += 1;
    }
    if (gethydro() == "A") {
      t += 2;
    }
    if (getpop() == "1" | getpop() == "2" | getpop() == "3" | getpop() == "4"
            | getpop() == "5") {
      t += 1;
    }
    if (getgov() == "0" | getgov() == "5") {
      t += 1;
    }
    if (getgov() == "D") {
      t += -2;
    }
    t += GlobalMethods.getRoll(1);
    if (p == 0) {
      t = 0;
    }
    if (t > GlobalMethods.fromHex(gettl()) - 1) {
      t = GlobalMethods.fromHex(gettl()) - 1;
    }
    if (s < 0) {
      s = 0;
    }
    //</editor-fold>
    int[] parts = {st, s, a, h, p, g, l, t};
    //modSize
    if (orbit[habz].contains("GG")) {
      int start = orbit[habz].indexOf("S=") + 2;
      int end = orbit[habz].substring(start).indexOf("@");
      if (s > ws - 3) {
        s = ws - 3;
      }
    } else if (s > GlobalMethods.fromHex(getsize()) - 3) {
      s = GlobalMethods.fromHex(getsize()) - 3;
    }
    //modTech();
    uwp = St;
    uwp += GlobalMethods.toHex(s);
    uwp += GlobalMethods.toHex(a);
    uwp += GlobalMethods.toHex(h);
    uwp += GlobalMethods.toHex(p);
    uwp += GlobalMethods.toHex(g);
    uwp += GlobalMethods.toHex(l);
    uwp += "-";
    uwp += GlobalMethods.toHex(t);
    return "\t" + uwp;
  }

  private String getOtherWorld(int orb) {
    String world = "";
    hz = Integer.parseInt(GlobalMethods.getHZ(Stars[0]));
    int x = GlobalMethods.getRoll(1) - 1;
    if (orb < hz - 1) {//Inner
      return InnerWorlds[x];
    } else if (orb > hz + 1) {
      return OuterWorlds[x];
    } else {
      return HospitableWorlds[x];
    }
  }

  private static int getD10Limit(String string) {
    setStarData(string);
    int ret = Integer.parseInt(GlobalMethods.getStringFromTable("TD", t + d, s,
            D10Limit));
    return ret;
  }

  private static int getD100Limit(String string) {
    setStarData(string);
    int ret = Integer.parseInt(GlobalMethods.getStringFromTable("TD", t + d, s,
            D100Limit));
    return ret;
  }

  private static int getD1000Limit(String string) {
    setStarData(string);
    int ret = Integer.parseInt(GlobalMethods.getStringFromTable("TD", t + d, s,
            D1000Limit));
    return ret;
  }

  private String getSDBTactics() {
    //DEFENCE
    string = "\tDEFENCE" + CRLF;
    string += "\t  Hide in Water" + CRLF;
    string += "\t  Defend vs Invaders" + CRLF;
    string += "\t  Defend Homeworld" + CRLF;
    //if water
    if (GlobalMethods.fromHex(getHydro()) > 2) {
      string += "\t  Hide in Ocean" + CRLF;
    }
    //if gg
    if (g > 0) {
      string += "\t  Defend " + g + " Gas Giants" + CRLF;
    }
    //if pop
    if (GlobalMethods.fromHex(getPop()) > 0) {
      string += "\t  Defend Population" + CRLF;
    }
    //if base
    if (!data[8].contains("-")) {
      string += "\t  Defend Bases" + CRLF;
    }
    return string;
  }

  private String getSquadronTactics() {
    //ATTACK
    string = "\tATTACK" + CRLF;
    string += "\t  Attack vs Defenders" + CRLF;
    string += "\t  Attack Homeworld" + CRLF;
    //if water
    if (GlobalMethods.fromHex(getHydro()) > 2) {
      string += "\t  Attack Ocean" + CRLF;
    }
    //if gg
    if (g > 0) {
      string += "\t  Attack " + g + " Gas Giants" + CRLF;
    }
    //if pop
    if (GlobalMethods.fromHex(getPop()) > 0) {
      string += "\t  Attack Population" + CRLF;
    }
    //if base
    if (!data[8].contains("-")) {
      string += "\t  Attack Bases" + CRLF;
    }
    return string;
  }

  private String getDefTactics() {
    //DEFENCE
    string = "\tDEFENCE" + CRLF;
    string += "\t  Defend Starport" + CRLF;
    string += "\t  Defend vs Invaders" + CRLF;
    string += "\t  Go Hidden" + CRLF;
    return string;
  }

  private String getTroopTactics() {
    //ATTACK
    string = "\tATTACK" + CRLF;
    string += "\t  Attack Starport" + CRLF;
    string += "\t  Attack vs Invaders" + CRLF;
    string += "\t  Attack Hidden" + CRLF;
    return string;
  }

  private String getFuelTactics() {
    //Ocean
    string = "\tREFUELLING" + CRLF;
    if (GlobalMethods.fromHex(getHydro()) > 0) {
      string += "\t  Refuel in Ocean";
    }
    //Ice
    //GG
    if (g > 0) {
      string += "\t  Refuel at Gas Giant" + CRLF;
    }
    if (string.length() == 14) {
      return "";
    }
    return string;
  }

  private void downloadOptions() {
    int ret;
    ret = JOptionPane.showOptionDialog(jp, "One,All,Cancel", "DOWNLOAD",
            JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null,
            1);
    JOptionPane.showMessageDialog(jf, "" + ret);
    if (ret == 0) {
      downloadSector();
      restart();
    } else if (ret == 1) {
//      JOptionPane.showMessageDialog(jp, "Warning: THIS TAKES AGES, IT WILL TELL YOU WHEN DONE");
      ret = JOptionPane.showOptionDialog(jp,
              "Warning: THIS TAKES AGES, IT WILL TELL YOU WHEN DONE", "DOWNLOAD",
              JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,
              new Object[]{"OK", "Cancel"}, 1);
      if (ret == 0) {
        downloadSectors();
      }
    } else if (ret == 2) {
      return;
    }
  }

  private void downloadSectors() {
    String[] sectors = jta4Sectors.getText().split("\n");
    for (int i = 0; i < sectors.length; i++) {
      fname = sectors[i].replace(" ", "%20");
      webpath = dat + "/" + fname;
      downloadSector();
    }
    restart();
  }

  private void downloadSector() {
    readWeb(webpath);
  }

  private String fix(String wp) {
    String search = " ";
    String rep = "%20";
    webpath = (webpath.replace(search, rep).replace("\\", "/"));
    return webpath;
  }

  private void restart() {
    JOptionPane.showMessageDialog(jf, "Closing, restart program");
    Panel4T5BitSet.main(args);
    System.exit(0);
  }

  private void help() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    System.out.print(getHex());
    System.out.print(getSystemName());
    System.out.print(getUWP());
    System.out.print(getSP());
    System.out.print(getRemarks());
    System.out.print(getIx());
    System.out.print(getEx());
    System.out.print(getCx());
    System.out.print(getN());
    System.out.print(getB());
    System.out.print(getZ());
    System.out.print(getPBG());
    System.out.print(getW());
    System.out.print(getA());
    System.out.print(getStellar());

  }

  private void reduceInners(int orb) {
    for (int j = orb - 1; j > orb / 2; j--) {
      if (orb - j >= 0) {
        orbit[j] += "UNAVAILABLE";
      }
    }
  }

  private String getOrbitLet() {
    return "?";
  }

  private String findSystemName(String hex) {
    String name = "";
    for (int j = 0; j < lines.length; j++) {
      if (lines[j].startsWith(hex)) {
        name = lines[j].substring(len[0], len[1]).trim();
      }
    }
    return name;
  }

  private String toEHex(int num) {
    String ret = "0";
    ret = GlobalMethods.getStringFromTable("Decimal", "" + num, "eHex", EHex);
    return ret;
  }

  private void saveSecPic() {
    File f = new File(Panel4T5Locator.getSecPath() + FS + jcb4Sec
            .getSelectedItem().toString().trim() + " Sector.gif");
    String imagepath = _SEC + FS + "GIF" + FS + jcb4Sec.getSelectedItem()
            .toString().trim() + ".gif";
    try {
      BufferedImage bi = ImageIO.read(new File(imagepath));
      Graphics2D g2d = (Graphics2D) bi.getGraphics();
      g2d.setPaint(Color.black);
      ImageIO.write(bi, "gif", f);
    } catch (IOException ex) {
      System.out.println("6327" + " = " + ex);
    }
    f = new File(Panel4T5Locator.getSysPath() + FS + jcb4Sys
            .getSelectedItem().toString().trim() + FS + jcb4Sec
                    .getSelectedItem().toString().trim() + " Sector.gif");
    imagepath = _SEC + FS + "GIF" + FS + jcb4Sec.getSelectedItem()
            .toString() + ".gif";
    try {
      BufferedImage bi = ImageIO.read(new File(imagepath));
      Graphics2D g2d = (Graphics2D) bi.getGraphics();
      g2d.setPaint(Color.black);
      ImageIO.write(bi, "gif", f);
    } catch (IOException ex) {
      System.out.println("6146" + " = " + ex);
    }
  }

  private static String getSecPath() {
    String str = T5 + FS + jcb4Sec.getSelectedItem().toString();
    return str;
  }

  private void saveSubPic() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    //DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      //System.out.println("" + " = " + );
    }
    //</editor-fold>
    File f = new File(Panel4T5Locator.getSysPath().trim() + FS
            + jcb4Sys.getSelectedItem().toString().trim() + FS
            + jcb4Sys.getSelectedItem().toString().substring(0, 4) + "-Subsector.gif");
    //<editor-fold defaultstate="collapsed" desc="DEBUG">
    //DEBUG = false;
    if (DEBUG) {
      System.out.print("f" + " = " + f.toString() + CRLF);
    }
    //</editor-fold>
    BufferedImage bi = new BufferedImage(panel4Sys.getWidth(), panel4Sys
            .getHeight(), TYPE_INT_RGB);
    Graphics g = panel4Sys.getGraphics();

    Robot r = null;
    try {
      r = new Robot();
    } catch (AWTException ex) {
      System.out.println("6476" + " = " + ex);
    }
    bi = r.createScreenCapture(new Rectangle(
            panel4Sys.getLocationOnScreen().x, panel4Sys.getLocationOnScreen().y,
            panel4Sys.getWidth(), panel4Sys.getHeight()));
    try {
      ImageIO.write(bi, "gif", f);
    } catch (IOException ex1) {
      System.out.println("6483" + " = " + ex1);
    }
  }

  private void saveSubSecPic() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    //DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      //System.out.println("" + " = " + );
    }
    //</editor-fold>
    findCapital();
    File f = new File(Panel4T5Locator.getSubPath() + FS + jcb4Sub
            .getSelectedItem().toString().trim() + " Subsector.gif");
    System.out.println("" + " = " + f.toString());
    BufferedImage bi = new BufferedImage(panel4Sys.getWidth(), panel4Sys
            .getHeight(), TYPE_INT_RGB);
    Graphics g = panel4Sys.getGraphics();
    Robot r = null;
    try {
      r = new Robot();
      bi = r.createScreenCapture(new Rectangle(
              panel4Sys.getLocationOnScreen().x, panel4Sys.getLocationOnScreen().y,
              panel4Sys.getWidth(), panel4Sys.getHeight()));
    } catch (AWTException ex) {
      System.out.println("6507" + " = " + ex);
    }
    try {
      ImageIO.write(bi, "gif", f);
    } catch (IOException ex1) {
      System.out.println("6512" + " = " + ex1);
    }
  }

  private static String getSubPath() {
    String str = getSecPath() + FS + jcb4Sub.getSelectedItem().toString();
    return str;
  }

  private void loadSaved() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = true;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    try {
//      noPic();
      loadTexts();
      loadOrbitPics();
//      saveFullPic();
    } catch (Exception e) {
      //<editor-fold defaultstate="collapsed" desc="DEBUG">
      if (DEBUG) {
        System.out.println("6848" + " NO SAVED = " + e);
      }
      //</editor-fold>
      jcb4All.setSelectedItem("jta4Orb");
    }
  }

  private void setSubMinMaxXY(String hex) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
//</editor-fold>
    int x = Integer.parseInt(hex.substring(0, 2));
    int y = Integer.parseInt(hex.substring(2, 4));
    String str = jcb4Sub.getSelectedItem().toString().substring(0, 1);
    switch (str) {
      case "A":
      case "E":
      case "I":
      case "M": {
        mix = 1;
        max = 8;
        break;
      }
      case "B":
      case "F":
      case "J":
      case "N": {
        mix = 9;
        max = 16;
        break;
      }
      case "C":
      case "G":
      case "K":
      case "O": {
        mix = 17;
        max = 24;
        break;
      }
      case "D":
      case "H":
      case "L":
      case "P": {
        mix = 25;
        max = 32;
        break;
      }
      default: {
        JOptionPane.showMessageDialog(jf, "" + sub);
      }
    }
    switch (str) {
      case "A":
      case "B":
      case "C":
      case "D": {
        miy = 1;
        may = 10;
        break;
      }
      case "E":
      case "F":
      case "G":
      case "H": {
        miy = 11;
        may = 20;
        break;
      }
      case "I":
      case "J":
      case "K":
      case "L": {
        miy = 21;
        may = 30;
        break;
      }
      case "M":
      case "N":
      case "O":
      case "P": {
        miy = 31;
        may = 40;
        break;
      }
      default: {
        JOptionPane.showMessageDialog(jf, "" + sub);
      }
    }
  }

  public String getSub(String hex) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    int x = Integer.parseInt(hex.substring(0, 2));
    int y = Integer.parseInt(hex.substring(2, 4));
    String l = "";
    if (x < 9) {
      if (y < 11) {
        l = "A";
      }
      if (y > 10 & y < 21) {
        l = "E";
      }
      if (y > 20 & y < 31) {
        l = "I";
      }
      if (y > 30) {
        l = "M";
      }
    }
    if (x > 8 & x < 17) {
      if (y < 11) {
        l = "B";
      }
      if (y > 10 & y < 21) {
        l = "F";
      }
      if (y > 20 & y < 31) {
        l = "J";
      }
      if (y > 30) {
        l = "N";
      }
    } else if (x > 16 & x < 25) {
      if (y < 11) {
        l = "C";
      } else if (y > 10 & y < 21) {
        l = "G";
      } else if (y > 20 & y < 31) {
        l = "K";
      } else if (y > 30) {
        l = "O";
      }
    } else if (x > 24 & x < 33) {
      if (y < 11) {
        l = "D";
      } else if (y > 10 & y < 21) {
        l = "H";
      } else if (y > 20 & y < 31) {
        l = "L";
      } else if (y > 30) {
        l = "P";
      }
    }
    return l;
  }

  private void findCapital() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    String check = "";
    for (int j = world1; j < lines.length; j++) {
      if ((lines[j].contains(" Cx") | lines[j].contains(" Cp") | lines[j]
              .contains("Cs "))) {
        check = lines[j].substring(0, 4);
        System.out.println("check" + " = " + check);
        for (int k = 0; k < jcb4Sys.getItemCount(); k++) {
          if (jcb4Sys.getItemAt(k).toString().startsWith(check)) {
            jcb4Sys.setSelectedIndex(k);
            break;
          }
        }
      }
    }
  }

  private void setLang() {
    if (running) {
      try {
        switch (data[12].substring(4, 6)) {
          case "Im": {
            jcb4Lang.setSelectedItem("Vilani");
            break;
          }
          case "Zh": {
            jcb4Lang.setSelectedItem("Zhodani");
            break;
          }
          case "As": {
            jcb4Lang.setSelectedItem("Aslan");
            break;
          }
          case "Va": {
            jcb4Lang.setSelectedItem("Vargr");
            break;
          }
          case "Kk": {
            jcb4Lang.setSelectedItem("K`kree");
            break;
          }
          case "Dr": {
            jcb4Lang.setSelectedItem("Droyne");
            break;
          }
          default: {
            switch (data[12].substring(6, 8)) {
              case "Zh": {
                jcb4Lang.setSelectedItem("Zhodani");
                break;
              }
              case "As": {
                jcb4Lang.setSelectedItem("Aslan");
                break;
              }
              case "Va": {
                jcb4Lang.setSelectedItem("Vargr");
                break;
              }
              case "Kk": {
                jcb4Lang.setSelectedItem("K`kree");
                break;
              }
              case "Dr": {
                jcb4Lang.setSelectedItem("Droyne");
                break;
              }
              case "Hu":
              case "Im":
              default: {
                jcb4Lang.setSelectedItem("Vilani");
              }
            }
          }
        }
      } catch (Exception e) {
        System.out.println("6654" + " = " + e.toString());
      }
      jtf4Word.setText("");
      System.out.println("data[12].substring(6, 8)" + " = " + data[12]
              .substring(6, 8));
    }
  }

  private void destChange() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    String sublet = jcb4Sub.getSelectedItem().toString().substring(0, 1);
    String sc = "s";
    String sb = "s";
    String ss = "s";
    String[] neigh = Panel4T5Neighbours.neighbours;//letters
    String[] outs = Panel4T5Neighbours.outsec;//numbers
    String subs = "";//9 including sublet & surrounding subs
    String outside = "";//0,3 or 5 at corners
    String inside = "";//9,6 or 4
    int x = 0, y = 0;
    int subnum = 0;//array number of neighbours string
    for (int j = 0; j < neigh.length; j++) {
      if (neigh[j].substring(0, 1).equals(sublet)) {
        subnum = j;
        subs = neigh[subnum];
        if (DEBUG) { // true or false
          System.out.println("subs" + " = " + subs);
        }
        break;
      }
    }
    int outlen = outs[subnum].length();
    int letnum = 0;
    // find which list of subsectors outside of sector
    for (int j = 0; j < outlen; j++) {
      letnum = Integer.parseInt(outs[subnum].substring(j, j + 1));
      outside += subs.substring(letnum, letnum + 1);
    }
    // find which list of subsectors inside of sector
    for (int j = 0; j < 9; j++) {
      if (!outside.contains(subs.substring(j, j + 1))) {
        inside += subs.substring(j, j + 1);
      }
      if (DEBUG) { // true or false
        System.out.println("inside" + " = " + inside);
      }
    }
    // find subsector letter of selected world
    sB.setText(getSub(dest.substring(0, 4)));
    for (int i = 0; i < outlen; i++) {
      //is dest in subsector?
      if (sB.getText().equals(sublet)) {
        sC.setText(jcb4Sec.getSelectedItem().toString());
        sS.setText(dest);
        break;
      } else {
        sC.setText("s");
        sS.setText("s");
      }
      //is dest inside sector? (which subs are in sec?)
      if (inside.contains(sB.getText())) {
        sC.setText(jcb4Sec.getSelectedItem().toString());
        sS.setText(dest);
      }
    }
    int sx = 0;
    int sy = 0;
    if (sC.getText() != jcb4Sec.getSelectedItem().toString()) {
      int minx = 0;
      int maxx = 0;
      int miny = 0;
      int maxy = 0;
      String[] nei = new String[9];
      for (int j = 0; j < secs.length; j++) {
        if (secs[j].startsWith(jcb4Sec.getSelectedItem().toString())) {
          //what are coords of sector?
          String[] sec = secs[j].split(",");
          sx = Integer.parseInt(sec[1]);
          sy = Integer.parseInt(sec[2]);
          nei[0] = secs[j];
          minx = sx - 1;
          maxx = sx + 1;
          miny = sy - 1;
          maxy = sy + 1;
          break;
        }
      }
      int count = 1;
      try {
        for (int j = 0; j < secs.length; j++) {
          String[] sec = secs[j].split(",");
          x = Integer.parseInt(sec[1]);
          y = Integer.parseInt(sec[2]);
          if (x <= maxx & x >= minx) {
            // find neighbours of subsector
            if ((y <= maxy & y >= miny) & (!secs[j].contains(jcb4Sec
                    .getSelectedItem().toString()))) {
              nei[count] = secs[j];
              count += 1;
            }
          }
        }
        x = sx;
        y = sy;
        for (int j = 0; j < subs.length(); j++) {
          if (subs.substring(j, j + 1).equals(sB.getText())) {
            switch (j) {
              case 0: {
                break;
              }
              case 1: {
                x += -1;
                y += -1;
                break;
              }
              case 2: {
                y += - 1;
                break;
              }
              case 3: {
                x += 1;
                y += -1;
                break;
              }
              case 4: {
                x += 1;
                break;
              }
              case 5: {
                x += 1;
                y += 1;
                break;
              }
              case 6: {
                y += 1;
                break;
              }
              case 7: {
                x += -1;
                y += 1;
                break;
              }
              case 8: {
                x += -1;
                break;
              }
            }
          }
        }
      } catch (NumberFormatException e) {
        System.out.println("6803" + " = " + e);
      }
      for (String sec : secs) {
        if (sec.endsWith("" + x + "," + y)) {
          sC.setText(sec.substring(0, sec.indexOf(",")));
        }
      }
      sS.setText(dest);
    }
    System.out.println(getSysName(new File(_SEC + FS + sC.getText() + ".sec"),
            sS.getText().substring(0, 4)));
    showDest();
  }

  private void analyze() {
    String[] txt = this.toString().split("[");
    for (int j = 0; j < txt.length; j++) {
      if (j > 0) {
        System.out.print("  ");
      }
      System.out.println(" " + txt[j]);
    }
  }

  private void getStar() {
    String star = jcb4Star.getSelectedItem().toString();
    setStarData(star);
    String txt = "" + getSysPath() + CRLF;
    txt += "STAR = " + star + CRLF;
    txt += "getStarColors = " + getStarColors() + CRLF;
    txt += "Type = " + t + CRLF;
    switch (t) {
      case "O": {
        col = o;
        break;
      }
      case "B": {
        col = o;
        break;
      }
      case "A": {
        col = a;
        break;
      }
      case "F": {
        col = fi;
        break;
      }
      case "G": {
        col = gi;
        break;
      }
      case "K": {
        col = k;
        break;
      }
      case "M": {
        col = m;
        break;
      }
    }
    txt += "Color = " + col.getRGB() + CRLF;
    txt += "  Red = " + col.getRed() + CRLF;
    txt += "  Green = " + col.getGreen() + CRLF;
    txt += "  Blue = " + col.getBlue() + CRLF;
    txt += "Dec = " + d + CRLF;
    txt += "Size = " + s + CRLF;
    txt += "getStarData = " + getStarData(star) + CRLF;
    txt += "getStellar = " + getStellar() + CRLF;
    txt += "getMinOrbit = " + getMinOrbit(star) + CRLF;
  }

  private Color getStarCol() {
    String star = jcb4Star.getSelectedItem().toString();
    setStarData(star);
    switch (t) {
      case "O": {
        col = o;
        break;
      }
      case "B": {
        col = o;
        break;
      }
      case "A": {
        col = a;
        break;
      }
      case "F": {
        col = fi;
        break;
      }
      case "G": {
        col = gi;
        break;
      }
      case "K": {
        col = k;
        break;
      }
      case "M": {
        col = m;
        break;
      }
    }
    return col;
  }

  private void updateWebView() {
    String filename
            = "file:///C:/T5/Spinward%20Marches/C%20Regina/1910%20Regina/1910%20Regina.html";
    String start = "file:///";
    String sec = jcb4Sec.getSelectedItem().toString();
    String sub = jcb4Sub.getSelectedItem().toString().trim();
    String sys = jcb4Sys.getSelectedItem().toString().trim();
    String file = jcb4Sys.getSelectedItem().toString().trim() + ".html";
    file.replace(" ", "%20");
    file.replace("/", "/");
    String all = start + "C:/T5/" + sec + "/" + sub + "/" + sys + "/" + file;
    System.out.println("" + " = " + all);
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      System.out.println("Web Page" + " = " + all);
    }
    //</editor-fold>
//    RenameFX.main(new String[]{all});
  }

  private String insertScripts(int times) {
    String txt = "";
    for (int j = 0; j < times; j++) {
      System.out.println("User.home = " + System.getProperty("user.home"));
      System.out.println("User.dir = " + System.getProperty("user.dir"));
      txt
              += "<br><applet code=\"applets/Test1.class\" width=\"600\" height=\"600\"><br>APPLET"
              + CRLF;
      txt
              += "<br><applet code=\"Test1.class\" width=\"600\" height=\"600\"><br>APPLET"
              + CRLF;
      txt
              += "<br><div>applet</div><applet code=\"Test1.class\" width=\"600\" height=\"600\"></applet><br>APPLET"
              + CRLF
              + "<br><div>object</div> <object codetype=\"application/java\" classid=\"java:Test1.class\""
              + CRLF
              + " width=\"1000\" height=\"600\" 600=\"Test1.class\"></object><br>OBJECT"
              + CRLF;
      txt += "<br>END<br>" + CRLF;
    }
    return txt;
  }

  private void uwp2Chart() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    double sp = GlobalMethods.fromHex(jtf4UWP.getText().substring(0, 1));//S
    switch (jtf4UWP.getText().substring(0, 1)) {
      case "A": {
        sp = 15;
        break;
      }
      case "B": {
        sp = 13;
        break;
      }
      case "C": {
        sp = 11;
        break;
      }
      case "D": {
        sp = 9;
        break;
      }
      case "E": {
        sp = 7;
        break;
      }
      case "X": {
        sp = 0;
        break;
      }
      case "F": {
        sp = 4;
        break;
      }
      case "G": {
        sp = 3;
        break;
      }
      case "H": {
        sp = 2;
        break;
      }
      case "Y": {
        sp = 1;
        break;
      }
    }
    double si = GlobalMethods.fromHex(jtf4UWP.getText().substring(1, 2));//S
    double at = GlobalMethods.fromHex(jtf4UWP.getText().substring(2, 3));//A
    double hy = GlobalMethods.fromHex(jtf4UWP.getText().substring(3, 4));//H
    double po = GlobalMethods.fromHex(jtf4UWP.getText().substring(4, 5));//P
    double go = GlobalMethods.fromHex(jtf4UWP.getText().substring(5, 6));//G
    double la = GlobalMethods.fromHex(jtf4UWP.getText().substring(6, 7));//L
    double tl = GlobalMethods.fromHex(jtf4UWP.getText().substring(8, 9));//T
    double[] values = {sp, si, at, hy, po, go, la, tl};
    String[] names = {"SP=" + jtf4UWP.getText().substring(0, 1),
      "Size=" + (int) si, "Atmo=" + (int) at, "Hydro=" + (int) hy,
      "Pop=" + (int) po, "Gov=" + (int) go, "Law" + (int) la,
      "Tech=" + (int) tl};
    String title = jcb4Sys.getSelectedItem().toString().trim();
    int tmax = 15;
    new MyChart(values, names, title, tmax);
//    panel4Pic = MyChart.jp;
  }

  private void updateChart() {
    startuwp = this.jLabel4.getText().indexOf("-") + 2;
    end = this.jLabel4.getText().length();
    jtf4UWP.setText(jLabel4.getText().substring(startuwp, end).trim());
    jtf4UWPActionPerformed(ae);
    jtf4UWPMouseClicked(me);
  }

  private void saveUWPPic() {
    try {
      uwp2Chart();
      updateChart();
      int x = MyChart.jp.getLocationOnScreen().x;
      int y = MyChart.jp.getLocationOnScreen().y;
      int w = MyChart.jp.getWidth();
      int h = MyChart.jp.getHeight();
      File f = new File(Panel4T5Locator.getSysPath().trim() + FS + jcb4Sys
              .getSelectedItem().toString().trim() + FS + jcb4Sys.getSelectedItem()
                      .toString().substring(0, 4) + "-UWP.gif");
      BufferedImage bi = new BufferedImage(w, h, TYPE_INT_RGB);
      Graphics2D g = (Graphics2D) MyChart.jp.getGraphics();
      Robot r = null;
      try {
        r = new Robot();
      } catch (AWTException ex) {
        System.out.println("6345" + " = " + ex);
      }

      MyChart.jf.setVisible(true);
      MyChart.component.setVisible(true);
      bi = r.createScreenCapture(new Rectangle(x, y, w, h));
      try {
        ImageIO.write(bi, "gif", f);
      } catch (IOException ex1) {
        System.out.println("6352" + " = " + ex1);
      }
    } catch (Exception e) {
      System.out.println("7592" + " = " + e.toString());
    }
  }

  private void upp2Chart() {
    double st = GlobalMethods.fromHex(jtf4UPP.getText().toUpperCase().substring(
            0, 1));//S
    double dx = GlobalMethods.fromHex(jtf4UPP.getText().toUpperCase().substring(
            1, 2));//D
    double en = GlobalMethods.fromHex(jtf4UPP.getText().toUpperCase().substring(
            2, 3));//E
    double in = GlobalMethods.fromHex(jtf4UPP.getText().toUpperCase().substring(
            3, 4));//I
    double ed = GlobalMethods.fromHex(jtf4UPP.getText().toUpperCase().substring(
            4, 5));//E
    double so = GlobalMethods.fromHex(jtf4UPP.getText().toUpperCase().substring(
            5, 6));//S
    double[] values = {st, dx, en, in, ed, so};
    int tmax = 15;
    for (int j = 0; j < 6; j++) {
      if (values[j] > tmax) {
        tmax = (int) values[j];
      }
    }
    String[] names = {
      jtf4UPP.getText().substring(0, 1).toUpperCase(),
      jtf4UPP.getText().substring(1, 2).toUpperCase(),
      jtf4UPP.getText().substring(2, 3).toUpperCase(),
      jtf4UPP.getText().substring(3, 4).toUpperCase(),
      jtf4UPP.getText().substring(4, 5).toUpperCase(),
      jtf4UPP.getText().substring(5, 6).toUpperCase()
    };
    new MyChart(values, names, "UPP", tmax);
  }

  private void waitASec() {
    LocalTime now = LocalTime.now();
    LocalTime then = now;
    do {
      then = LocalTime.now();
      System.out.println("" + now.getSecond() + " = " + then.getSecond());
    } while (then.getSecond() == now.getSecond());
  }

  private void t5Check() {
    String[] dirs = new String[]{"T5", "_Sec"};
    File dir = new File(T5);
    if (!dir.exists()) {
      dir.mkdir();
    }
    dir = new File(T5 + FS + "_SEC");
    if (!dir.exists()) {
      dir.mkdir();
    }
    dir = new File(dir + FS + "GIF");
    if (!dir.exists()) {
      dir.mkdir();
    }
  }

  private void graphChange() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    String[] n = {"St-", "Di-", "At-", "Hy-", "Po-", "Go-", "LL-", "TL-"};
    String line = dest;
    String[] strings = line.split(" ");
    String uwp = "";
    double[] v = null;
    for (int j = 0; j < strings.length; j++) {
      if (strings[j].length() == 9) {
        uwp = strings[j];
        v = calcValues(uwp);
        n[0] = "SP-" + uwp.substring(0, 1);
        for (int k = 1; k < v.length; k++) {
          n[k] += (int) v[k];
        }
        break;
      }
    }
    int m = 15;
    if (line.length() == 4) {
      t = "EMPTY SPACE";
      v = new double[]{0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01};
      n = new String[]{"", "", "", "", "", "", "", ""};
    } else {
      t = line.substring(5, 25).trim();
    }
    Component comp = new applets.ChartComponent(v, n, t, m);
    panel4Pic.removeAll();
    panel4Pic.add(comp);
    panel4Pic.revalidate();
  }

  private double[] calcValues(String uwp) {
    double sp = GlobalMethods.fromHex(uwp.substring(0, 1));//S
    switch (uwp.substring(0, 1)) {
      case "A": {
        sp = 15;
        break;
      }
      case "B": {
        sp = 13;
        break;
      }
      case "C": {
        sp = 11;
        break;
      }
      case "D": {
        sp = 9;
        break;
      }
      case "E": {
        sp = 7;
        break;
      }
      case "X": {
        sp = 0;
        break;
      }
      case "F": {
        sp = 4;
        break;
      }
      case "G": {
        sp = 3;
        break;
      }
      case "H": {
        sp = 2;
        break;
      }
      case "Y": {
        sp = 1;
        break;
      }
    }
    double si = GlobalMethods.fromHex(uwp.substring(1, 2));//S
    double at = GlobalMethods.fromHex(uwp.substring(2, 3));//A
    double hy = GlobalMethods.fromHex(uwp.substring(3, 4));//H
    double po = GlobalMethods.fromHex(uwp.substring(4, 5));//P
    double go = GlobalMethods.fromHex(uwp.substring(5, 6));//G
    double la = GlobalMethods.fromHex(uwp.substring(6, 7));//L
    double tl = GlobalMethods.fromHex(uwp.substring(8, 9));//T
    double[] values = {sp, si, at, hy, po, go, la, tl};
    return (values);
  }

  private void saveAll() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    String txt = "";
    boolean DEBUG = false;
    {
      //DEBUG = false;
      if (DEBUG) { // true or false
        System.out.print(GlobalMethods.comment("=", 80));
        System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
                .getMethodName() + CRLF);
        //System.out.println("DEBUG" + " = " + DEBUG);
        txt += GlobalMethods.comment("=", 80);
        txt += "\t" + Thread.currentThread().getStackTrace()[1].getMethodName()
                + CRLF;
      }
    }
    //</editor-fold>
    saveTexts();
    saveTexts();
    loadTexts();
    saveHTML();
    saveSystemPic();//Big System
    saveSecPic();//Sector
    saveSubPic();//SubSector
    saveUWPPic();//UWP
    int old = jcb4Sys.getSelectedIndex();
    jButton1MousePressed(me);
    jButton1ActionPerformed(ae);
    jcb4Sys.setSelectedIndex(old);
    Panel4T5CounterMaker.saveCounters();
    Panel4T5CounterMaker.saveGraphical();
    jButton3.doClick();

    //<editor-fold defaultstate="collapsed" desc="DEBUG">
    {
      if (DEBUG) { // true or false
        System.out.print(GlobalMethods.comment("=", 80));
        System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
                .getMethodName());
        //System.out.println("DEBUG" + " = " + DEBUG);
        txt += "";
      }
    }
    //</editor-fold>
  }

  private String sortOutSubName() {
    String file = _SEC + FS + sC.getText() + ".sec";
    String[] lines = GlobalMethods.getLinesFromFile(new File(file));
    for (int j = 0; j < lines.length; j++) {
      if (lines[j].toLowerCase().contains("subsector " + sB.getText()
              .toLowerCase().substring(0, 1))) {
        return (lines[j].substring(12).replace(":", ""));
      }
    }
    return "";
  }

  private String viewAllSecBit(int i) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    String ret = "";
    if (sC.getText() != "sc") {
      String oSec = T5 + FS + "_SEC" + FS + sC.getText() + ".sec";
      //<editor-fold defaultstate="collapsed" desc="DEB">
      if (DEBUG) {
        System.out.print("" + " = " + "" + CRLF);
        System.out.println("Other" + " = " + oSec);
      }
      //</editor-fold>
      File f = new File(oSec);
      int s = 0;
      int e = 0;
      if (f.exists()) {
        String oLine = "";
        String[] oLines = GlobalMethods.getLinesFromFile(f);
        int w1 = 0;
        for (int j = 0; j < oLines.length; j++) {
          if (oLines[j].startsWith("---- ")) {
            w1 = j;
            oLine = oLines[j];
            //<editor-fold defaultstate="collapsed" desc="DEB">
            if (DEBUG) {
              System.out.print("" + " = " + "" + CRLF);
              System.out.println("" + " = " + getSpaceInfo(oLine));
            }
            //</editor-fold>
            int start = 0;
            int end = 0;
            for (int l = 0; l < len.length; l++) {
              //<editor-fold defaultstate="collapsed" desc="DEB">
              if (DEBUG) {
                System.out.println(" Start" + " = " + start);
                System.out.println(" len[" + l + "]" + " = " + len[l]);
              }
              //</editor-fold>
              end = start + len[l];
              System.out.println(" End" + " = " + end + CRLF);
              if (l == i) {
                s = start;
                e = end;
              }
              start = end + 1;
            }
            break;
          }
        }
        ret = oSec + CRLF;
      }
    }
    return ret;
  }

  private String viewAllSubBit(int i) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    String search = sB.getText();
    //<editor-fold defaultstate="collapsed" desc="DEB">
    if (DEBUG) {
      System.out.print("" + " = " + "" + CRLF);
      System.out.println("searchFor(" + search + ")");
    }
    //</editor-fold>
    return search;
  }

  private String viewAllSysBit(int i) {
    return "" + i;
  }

  private String sortOutSysName() {
    String file = _SEC + FS + sC.getText() + ".sec";
    String[] lines = GlobalMethods.getLinesFromFile(new File(file));
    for (int j = 0; j < lines.length; j++) {
      if (lines[j].toLowerCase().startsWith(sS.getText().toLowerCase()
              .substring(0, 4))) {
        return (lines[j]);
      }
    }
    return "";
  }

  private void Orbits() {
    int numstars = jcb4Star.getItemCount() - 1;
    String[][] orbi = new String[numstars][20];
    int[] minorbit = new int[numstars];
    int[] maxorbit = new int[numstars];
    int[] orbitspaces = new int[numstars];
    JTextArea jta = jta4Orb;
    jta.append("numstars" + " = " + numstars + CRLF);
    for (int j = min; j < orbits; j++) {
      System.out.println("" + j + " = " + orbit[j]);
    }
    System.out.println("");
  }

  private void launch() {
    JPanel jp = new Panel4T5Launch();
    JFrame jf = new Frame4(jp);
    jf.setBounds(1200, 0, 600, 600);
  }

  private int nearestTo(int orb) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    max = getMaxOrbit(0);
    int adiff = max;
    int bdiff = min;
    int r;
    //<editor-fold defaultstate="collapsed" desc="DEBUG">
    //</editor-fold>
    for (int j = min; j < max; j++) {
      if ((j <= orb) && ("".equals(orbit[j]))) {
        bdiff = orb - j;
      }
      if ((j >= orb) && ("".equals(orbit[j]))) {
        adiff = j - orb;
        break;
      }
    }
    if ((bdiff <= adiff) & (bdiff >= 0)) {
      r = orb - bdiff;
    } else {
      r = orb + adiff;
    }
    //<editor-fold defaultstate="collapsed" desc="DEBUG">
    if (DEBUG) {
      System.out.print("orb" + " = " + orb + CRLF);
      System.out.println(" bdiff" + " = " + bdiff);
      System.out.println(" adiff" + " = " + adiff);
      System.out.println(" r" + " = " + r);
    }
    //</editor-fold>
    return r;
  }

  private void addMainworld() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = true;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    rings = 0;
    if (UWP.substring(1, 2).equals("0")) {
      mwtype = "Asteroid belt";
      HZ = GlobalMethods.getHZ(Stars[0]);
      int varb = GlobalMethods.roll2d();
      HZVar = GlobalMethods.getStringFromTable("2D", "" + varb, "Belt",
              Placement);
      int hz = Integer.parseInt(HZ);
      int var = Integer.parseInt(HZVar);
      habz = hz + var;
      habz = nearestTo(habz);
      if (habz < 0) {
        habz = 0;
      }
      if (habz > Integer.parseInt(HZ)) {
        Climate = "Cold";
      }
      if (habz < Integer.parseInt(HZ)) {
        Climate = "Hot";
      }
      if (habz == Integer.parseInt(HZ)) {
        Climate = "Temperate";
      }
      orbit[habz] += "Asteroid Belt\t" + data[1].substring(7) + "\t" + UWP
              + "\t" + "(" + Climate + ")";
    } else {
      int worldflux = GlobalMethods.rollFlux();
      int hzvar = GlobalMethods.rollFlux();
      mwtype = GlobalMethods.getStringFromTable("Flux", "" + worldflux, "World",
              MainworldType);
      if (mwtype.contains("Satellite")) {
        if (mwtype.contains("Close")) {
          string = "Close";
        }
        if (mwtype.contains("Far")) {
          string = "Far";
        }
        if (g > 0) {
          wtype = getGG();
        } else {
          wtype = "BigWorld";
        }
      }
      worldflux = GlobalMethods.rollFlux();
      dist = GlobalMethods.getStringFromTable("Flux", "" + worldflux, string,
              MainworldType);
      HZ = GlobalMethods.getHZ(Stars[0]);
      HZVar = GlobalMethods.getStringFromTable("Flux", "" + hzvar, "HZ Var",
              MainworldType);
      int hz = Integer.parseInt(HZ);
      int var = Integer.parseInt(HZVar);
      if (var < 0) {
        Climate = "Hot";
      }
      if (var > 0) {
        Climate = "Cold";
      }
      if (var == 0) {
        Climate = "Temperate";
      }
      habz = (hz + var);
      if (habz < 0) {
        habz = 0;
      }
      try {
        orbit[habz] += "Mainworld\t" + data[1].substring(7) + "\t" + UWP + "\t"
                + "(" + Climate + ")";
        if (habz < 0) {
          habz = 0;
        }
        if (habz > 18) {
          habz = 0;
        }

      } catch (Exception e) {
        System.out.println("7765 = " + e);
        System.out.println("habz = " + habz);
        if (habz < 0) {
          habz = 0;
        }
        if (habz > 18) {
          habz = 0;
        }
        if (habz != 0) {
          habz = -habz;
        }
        for (int j = 0; j < data.length; j++) {
          System.out.println("data[" + j + "] = " + data[j].toString());
        }
      }
      if (mwtype.contains("Satellite") | data[1].contains("Regina")) {
        orbit[habz] += CRLF + "\tOrbits " + getGG() + " @ orbit R";
      }
      addMoons(habz);
    }
    //<editor-fold defaultstate="collapsed" desc="DEBUG">
    if (DEBUG) {
      System.out.print("orbitm" + " = " + habz + CRLF);
      System.out.println("Mainwold @ " + habz + " = " + orbit[habz]);
    }
    //</editor-fold>
  }

  private void addGGs() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = true;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    try {
      rings = 0;
      for (int j = 0; j < g; j++) {
        gg = getGG();
        int roll = GlobalMethods.getRoll(2);
        String str;
        int sgg = 0;
        if (roll < 4) {
          str = "SGG";
          sgg += 1;
          if (sgg % 2 == 0) {
            str = "IG";
          }
        } else {
          str = "LGG";
        }
        roll = GlobalMethods.getRoll(2);
        orbitnum = Integer.parseInt(GlobalMethods.getStringFromTable("2D",
                "" + roll, str, Placement));
        orbitnum += habz;
        orbitnum = nearestTo(orbitnum);
        try {
          orbit[orbitnum] += gg;
        } catch (Exception e) {
          System.out.println("7813 e = " + e);
          System.out.println("orbit.length = " + orbit.length);
          System.out.println("orbitnum = " + orbitnum);
          orbitnum = 0;
          orbit[orbitnum] += gg;
        }
        addMoons(orbitnum);
        //<editor-fold defaultstate="collapsed" desc="DEBUG">
        if (DEBUG) {
          System.out.print("orbitg" + " = " + orbitnum + CRLF);
          System.out.println("GG @ " + orbitnum + " = " + orbit[orbitnum]);
        }
        //</editor-fold>
      }
    } catch (NumberFormatException e) {
      System.out.println("8241" + " = " + e.toString());
    }
  }

  private void addPBs() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    try {
      for (int j = 0; j < b; j++) {
        int roll = GlobalMethods.getRoll(2);
        orbitnum = Integer.parseInt(GlobalMethods.getStringFromTable("2D",
                "" + roll, "Belt", Placement));
        orbitnum = nearestTo(orbitnum);
        orbit[orbitnum] += "Planetoid belt"
                + getOtherStats("Planetoid", "world");
        //<editor-fold defaultstate="collapsed" desc="DEBUG">
        if (DEBUG) {
          System.out.print("orbitb" + " = " + orbitnum + CRLF);
          System.out.println("PB @ " + orbitnum + " = " + orbit[orbitnum]);
        }
        //</editor-fold>
      }
    } catch (Exception e) {
      System.out.println("4797" + " = " + e.toString());
    }
  }

  private void addOthers() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    rings = 0;
    try {
      int pb = 0;
      int gg = 0;
      int Objects = Integer.parseInt(data[11].substring(4)) - (1 + b + g);
      for (int j = 0; j < Objects; j++) {
        int roll = GlobalMethods.getRoll(2);
        orbitnum = Integer.parseInt(GlobalMethods.getStringFromTable("2D",
                "" + roll, "World1", Placement));
        if (j == Objects - 1) {
          orbitnum = Integer.parseInt(GlobalMethods.getStringFromTable("2D",
                  "" + roll, "World2", Placement));
        }
        orbitnum = nearestTo(orbitnum);
        if (orbitnum < orbits & orbitnum >= 0) {
          String s = getOtherWorld(Integer.parseInt(HZ));
          orbit[orbitnum] += "World  (" + s + ")" + getOtherStats(s, "world");
          addMoons(orbitnum);
        }
        //<editor-fold defaultstate="collapsed" desc="DEBUG">
        if (DEBUG) {
          System.out.print("orbito" + " = " + orbitnum + CRLF);
          System.out.println("World @ " + orbitnum + " = " + orbit[orbitnum]);
        }
        //</editor-fold>
      }
    } catch (Exception e) {
      System.out.println("4823" + " = " + e.toString());
      return;
    }
  }

  private void addStarDetail(int orb, String star) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    if (!star.contains("BD")) {
      String type = null;
      int dec = 0;
      String size = null;
      try {
        type = star.substring(0, 1);
        if (type.equals("BD")) {
          return;
        }
        dec = Integer.parseInt(star.substring(1, 2));
        size = star.substring(3);
      } catch (Exception e) {
        type = "M";
        dec = 0;
        size = "D";
        System.out.println("4326" + " = " + e.toString());
      }
      int num = orb - 3;
      try {
        //<editor-fold defaultstate="collapsed" desc="DEBUG">
        if (DEBUG) {
          System.out.print(
                  "getStarData(star)" + " = " + "" + getStarData(star) + CRLF);
          System.out.println("getD10Limit(star)" + " = " + getD10Limit(star));
          System.out.println("getD100Limit(star)" + " = " + getD100Limit(star));
          System.out
                  .println("getD1000Limit(star)" + " = " + getD1000Limit(star));
        }
        //</editor-fold>
        jta4Orb.append(getStarData(star));
        int d10Limit = getD10Limit(star);
        int d100Limit = getD100Limit(star);
        int d1000Limit = getD1000Limit(star);
        jta4Orb.append("\td10Limit" + " = " + d10Limit + CRLF);
        jta4Orb.append("\td100Limit" + " = " + d100Limit + CRLF);
        jta4Orb.append("\td1000Limit" + " = " + d1000Limit + CRLF);
        if (num < 0 & orb != -1) {
          jta4Orb.append("\tNO Orbits" + CRLF);
        } else if (orb == -1) {
          jta4Orb.append("\tMin Orbit = " + getMinOrbit(star) + CRLF);
          jta4Orb.append("\tHZ =  " + GlobalMethods.getHZ(star) + CRLF);
        } else {
          jta4Orb.append("\tMin Orbit = " + getMinOrbit(star) + CRLF);
          jta4Orb.append("\tMax Orbit =  " + num + CRLF);
          jta4Orb.append("\tHZ =  " + GlobalMethods.getHZ(star) + CRLF);
        }
      } catch (Exception e) {
        System.out.println("8451" + " = " + e.toString());
      }
      if (orb != 99 | orb <= 0) {
        for (int j = 0; j <= num; j++) {
          jta4Orb.append("\t" + orb + "-" + j + " = " + CRLF);
        }
      }
    }
  }

  private static void setStarData(String st) {
    try {
      if (st.length() != 2) {
        t = st.substring(0, 1);
        d = Integer.parseInt(st.substring(1, 2));
        s = st.substring(2).trim();
        if (t == "M" & d == 9) {
          d = 9;
        } else if (d < 5) {
          d = 0;
        } else {
          d = 5;
        }
      }
    } catch (Exception e) {
      System.out.println("5314" + " = " + e.toString());
    }
  }

  private void showHab(String star) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    String result = "";
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      System.out.println("HZ = " + GlobalMethods.getHZ(star));
    }
    //</editor-fold>

  }

  private void saveDestTreeMap() {
    TreeMap<String, String> tm = new TreeMap<>();
    String name = "";
    try {
      name = getSysName(new File(_SEC + FS + sC.getText() + ".sec"), sS
              .getText().substring(0, 4));
    } catch (Exception e) {
      name = "Empty Space".toUpperCase();
    }
    tm.put("Sec", sC.getText().toString());
    tm.put("Sub", sB.getText().toString());
    tm.put("Sys", name);
    tm.put("LineInfo", sS.getText().toString().trim());
    tm.put("Jump", "" + js4Dist.getValue());
    File f = new File(getSecPath());
    if (!f.exists()) {
      f.mkdir();
    }
    f = new File(getSubPath());
    if (!f.exists()) {
      f.mkdir();
    }
    try {
      f = new File(getSysPath());
      if (!f.exists()) {
        f.mkdir();
        System.out.println("8449" + " = " + f.toString());
      }
      f = new File(getSysPath() + FS + jcb4Sys.getSelectedItem().toString()
              .trim());
      if (!f.exists()) {
        f.mkdir();
        System.out.println("8454" + " = " + f.toString());
      }
    } catch (Exception e) {
      //JOptionPane.showMessageDialog(jp,e.toString());
      System.out.println("8458" + " = " + e.toString());
    }
    String hex = dest.substring(0, 4);
//    string = getSysPath() + FS + "Jump " + js4Dist.getModel().getValue() + " TO " + hex + " " + title + ".treemap";
    String text = "";
    text += "Sector=" + tm.get("Sec") + CRLF;
    text += "Subsector=" + tm.get("Sub") + CRLF;
    text += "System=" + tm.get("Sys") + CRLF;
    text += "LineInfo=" + tm.get("LineInfo") + CRLF;
    text += "Jump=" + tm.get("Jump") + CRLF;
    try {
      GlobalMethods.saveTextFile(getSysPath() + FS + jcb4Sys.getSelectedItem()
              .toString().trim(), "Jump " + js4Dist.getModel().getValue()
              + " TO " + hex + " " + name, ".treemap", text);
    } catch (Exception e) {
      //JOptionPane.showMessageDialog(jp,e.toString());
      System.out.println("8474" + " = " + e.toString());
    }
  }

  private void saveHomeTreeMap() {
    TreeMap<String, String> tm = new TreeMap<>();
    tm.put("Sec", jcb4Sec.getSelectedItem().toString());
    tm.put("Sub", jcb4Sub.getSelectedItem().toString());
    tm.put("Sys", jcb4Sys.getSelectedItem().toString().trim());
    tm.put("Lang", jcb4Lang.getSelectedItem().toString());
    tm.put("UWP", UWP);
    tm.put("SDBs", sdbs1.getText());
    tm.put("Rons", squadrons.getText());
    tm.put("Def CF", defbats.getText());
    tm.put("Troop", troopunits.getText());
    tm.put("P", jLabel8.getText());
    tm.put("B", jLabel9.getText());
    tm.put("G", jLabel10.getText());
    tm.put("W", jLabel12.getText());
    File f = new File(getSecPath());
    if (!f.exists()) {
      f.mkdir();
    }
    f = new File(getSubPath());
    if (!f.exists()) {
      f.mkdir();
    }
    f = new File(getSysPath());
    if (!f.exists()) {
      f.mkdir();
    }
    f
            = new File(getSysPath() + FS + jcb4Sys.getSelectedItem().toString().trim());
    if (!f.exists()) {
      f.mkdir();
    }
    string = getSysPath() + FS + jcb4Sys.getSelectedItem().toString().trim()
            + FS + jcb4Sys
                    .getSelectedItem().toString().trim() + ".treemap";
    String text = "";
    text += "Sector=" + tm.get("Sec") + CRLF;
    text += "Subsector=" + tm.get("Sub") + CRLF;
    text += "System=" + tm.get("Sys") + CRLF;
    text += "Language=" + tm.get("Lang") + CRLF;
    text += "UWP=" + tm.get("UWP") + CRLF;
    text += "SDBs=" + tm.get("SDBs") + CRLF;
    text += "Rons=" + tm.get("Rons") + CRLF;
    text += "Def CF=" + tm.get("Def CF") + CRLF;
    text += "Troop=" + tm.get("Troop") + CRLF;
    text += "P=" + tm.get("P") + CRLF;
    text += "B=" + tm.get("B") + CRLF;
    text += "G=" + tm.get("G") + CRLF;
    text += "W=" + tm.get("W") + CRLF;
    try {
      GlobalMethods.saveTextFile(getSysPath() + FS + jcb4Sys.getSelectedItem()
              .toString().trim(), jcb4Sys.getSelectedItem().toString().trim(),
              ".treemap", text);
    } catch (Exception e) {
      //JOptionPane.showMessageDialog(jp,e.toString());
      System.out.println("8528" + " = " + e.toString());
    }
  }

  /**
   * @param i index of star
   * @return maximum orbit for star
   */
  public static int getMaxOrbit(int i) {
    switch (i) {
      case 0: {
        return orbit.length - 1;
      }
      default: {
        return 10;
      }
    }

  }

  private void showDest() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      System.out.println("\tSec" + " = " + sC.getText());
      System.out.println("\tSub" + " = " + sB.getText());
      System.out.println("\tSys" + " = " + sS.getText());
    }
    //</editor-fold>
  }

  private String getSysName(File file, String hex) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    int num2 = 0;
    String[] l = GlobalMethods.getLinesFromFile(file);
    for (int j = 0; j < l.length; j++) {
      if (l[j].startsWith("---- ")) {
        num = j;
      }
      if (l[j].startsWith(hex)) {
        num2 = j;
      }
    }
    if (num2 == 0) {
      return "EMPTY SPACE";
    }
    startuwp = 5;
    String t = l[num2].substring(startuwp).trim();
    end = t.indexOf(" ") + startuwp;
    //<editor-fold defaultstate="collapsed" desc="DEBUG">
    if (DEBUG) {
      System.out.println(l[num]);
      System.out.println("start" + " = " + startuwp);
      System.out.println("end" + " = " + end);
      System.out.println("(end-start)" + " = " + (end - startuwp));
      System.out.println(l[num2]);
      System.out.println(l[num2].substring(startuwp, end).trim());
    }
    //</editor-fold>
    return l[num2].substring(startuwp, end).trim();
  }

  private String calcBreakdown(String string) {
    //<editor-fold defaultstate="collapsed" desc="Variables">
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    int[] counted = null;
    int[][] counted2 = new int[9][20];
    int[][] counted5 = new int[4][20];
    int[][] counted6 = new int[4][20];
    int worlds = lines.length - world1;
    int parts = len.length;//14
    int[] start = new int[parts];
    int[] end = new int[parts];
    String[][] columns = new String[worlds][parts];
    s = "" + CRLF;
    //<editor-fold defaultstate="collapsed" desc="comment">
    String[] partnames = {"Hex", "Name", "UWP", "Trade", "Importance",
      "Economic",
      "Cultural", "Nobles", "Bases", "Zone", "PBGs", "Worlds", "Allied",
      "Stellar"};
    //<editor-fold defaultstate="collapsed" desc="set up positions of start and end markers">
    for (int num = 0; num < len.length; num++) {
      if (num > 0) {
        start[num] = start[num - 1] + len[num - 1] + 1;
      }
      end[num] = start[num] + len[num];
    }
    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="place strings in array">
    for (int line = world1; line < lines.length; line++) {
      for (int bit = 0; bit < parts; bit++) {
        columns[line - world1][bit] = lines[line].substring(start[bit], end[bit]);
      }
    }
    //</editor-fold>
    //--------------------------------------------------------------------------
    //0-HEX
    //--------------------------------------------------------------------------
    //1-NAME
    //--------------------------------------------------------------------------
    //2-UWP
    num = 2;
    String column = "";
    String[] uwpbits = {"", "", "", "", "", "", "", "", ""};
    int[][] ints = new int[14][];
    //--------------------------------------------------------------------------
    //3-REMARKS
    String[] remnames = {"As", "De", "Fl", "Ga", "He", "Ic", "Oc", "Va",
      "Wa", "Di", "Ba", "Lo", "Ni", "Ph", "Hi", "Pa", "Ag", "Na", "Pi",
      "In", "Po", "Pr", "Ri", "Fr", "Ho", "Co", "Lk", "Tr", "Tu", "Tz",
      "Fa", "Mi", "Mr", "Px", "Pe", "Re", "Cp", "Cs", "Cx", "Cy",
      "Sa", "Fo", "Pz", "Da", "Ab", "An"};
    ints[3] = new int[remnames.length];
    String st = "";
    //--------------------------------------------------------------------------
    //4-IMPORTANCE
    int leng = 11;
    ints[4] = new int[leng];
    int[] ras = new int[leng];
    //--------------------------------------------------------------------------
    //5-ECONOMY
    //    String[] ecobits = {"0", "0", "0", "0"};
    String[] ecobits = {"", "", "", "0"};
    ints[5] = new int[ecobits.length];
    //--------------------------------------------------------------------------
    //6-CULTURE
    String[] culbits = {"", "", "", ""};
    ints[6] = new int[culbits.length];
    //--------------------------------------------------------------------------
    //7-NOBLES
    String[] noblenames = {"B-Knight-11", "c-Baronet-12", "C-Baron-13",
      "D-Marquis-14",
      "e-Viscount-15", "E-Count-16", "f-Duke-17", "F-Duke-18", "G-Archduke-19",
      "H-Emperor-20"};
    ints[7] = new int[noblenames.length];
    //--------------------------------------------------------------------------
    //8-BASES
    //<editor-fold defaultstate="collapsed" desc="basenames">
    String[] ctbasenames = {
      "A-Naval Base and Scout Base-Imperial",
      "B-Naval Base and Way Station-Imperial",
      "C-Corsair Base-Vargr",
      "D-Depot-Imperial",
      "E-Embassy Center-Hiver",
      "F-Military and Naval Base",
      "G-Naval Base-Vargr",
      "H-Naval Base and Corsair Base-Vargr",
      "J-Naval Base",
      "K-Naval Base-K’kree",
      "L-Naval Base-Hiver",
      "M-Military Base",
      "N-Naval Base-Imperial",
      "O-Naval Outpost-K’kree",
      "P-Naval Base-Droyne",
      "Q-Military Garrison-Droyne",
      "R-Clan Base-Aslan",
      "S-Scout Base-Imperial",
      "T-Tlauku Base-Aslan",
      "U-Tlauku and Clan Base-Aslan",
      "V-Scout/Exploration Base",
      "W-Way Station-Imperial",
      "X-Relay Station-Zhodani",
      "Y-Depot-Zhodani",
      "Z-Naval/Military Base-Zhodani"};
    String[] t5basenames = {
      "C-Corsair Base-Vargr",
      "D-Naval Depot-Any",
      "K-Naval Base-Any",
      "M-Military Base-Any",
      "N-Naval Base-Imperial",
      "R-Clan Base-Aslan",
      "S-Scout Base-Imperial",
      "T-Tlaukhu Base-Aslan",
      "V-Exploration Base-Any",
      "W-Scout Way Station-Imperial",
      "X-Relay Station-Zhodani"
    };
    //</editor-fold>
    String[] basenames;
    //    basenames = ctbasenames;
    basenames = t5basenames;
    ints[8] = new int[basenames.length];
    //--------------------------------------------------------------------------
    //9-ZONE
    String[] zonenames = {"Green", "Amber", "Red"};
    ints[9] = new int[zonenames.length];
    //--------------------------------------------------------------------------
    //10-PBG
    ints[10] = new int[20];
    String[] pop = {"No", "Low", "Medium", "HIGH"};
    String[] vals = {"0-2", "3-5", "6-8", "9+"};
    String[] xtra = {"Unpopulated", "Thousands", "Millions", "Billions"};
    String pvars = "";
    String bvars = "";
    String gvars = "";
    //</editor-fold>
    //--------------------------------------------------------------------------
    //11-WORLDS
    int nworlds = 20;
    ints[11] = new int[nworlds];
    String sworlds = "";
    //<editor-fold defaultstate="collapsed" desc="comment">
    //--------------------------------------------------------------------------
    //12-ALLIED
    ints[12] = new int[6];
    //--------------------------------------------------------------------------
    //13-STELLAR
    ints[13] = new int[6];
    //--------------------------------------------------------------------------
    //</editor-fold>
    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="step 1 SET ARRAY SIZES & COUNTS">
    for (int world = 0; world < worlds; world++) {
      for (int part = 0; part < parts; part++) {
        column = columns[world][part];
        //<editor-fold defaultstate="collapsed" desc="SET ARRAY SIZES & COUNTS">
        String[] ra = {""};
        switch (part) {
          //<editor-fold defaultstate="collapsed" desc="comment">
          case 0: {//Hex
            ints[part] = new int[0];
            break;
          }
          case 1: {//Name
            ints[part] = new int[0];
            break;
          }
          case 2: {//UWP
            ints[part] = new int[9];
            for (i = 0; i < ints[part].length; i++) {
              column = columns[world][part].substring(i, i + 1);
              if (!uwpbits[i].contains(column)) {
                uwpbits[i] += column;
              }
              ints[part][i] = uwpbits[i].length();
              counted = new int[ints[part][i]];
              for (int n = 0; n < counted.length; n++) {
                if (column.contains(sortString(uwpbits[i], 1)
                        .substring(n, n + 1))) {
                  counted2[i][n] += 1;
                }
              }
            }
            break;
          }
          case 3: {//Trade
            column = columns[world][part];
            for (int i = 0; i < remnames.length; i++) {
              if (column.contains(remnames[i])) {
                ints[part][i] += 1;
              }
            }
            break;
          }
          case 4: {//Importance
            num = Integer.parseInt(column.replace("{", "").replace("}", "")
                    .replace(" ", ""));
            if (column.contains(" " + num + " ")) {
              ints[part][num + 5] += 1;
            }
            column = columns[world][4];
            for (int j = 0; j < ints[4].length; j++) {
              if (column.equals(" " + ras[j] + " ")) {
                ints[4][j] += 1;
                break;
              }
            }
            break;
          }
          case 5: {//Economic
            String[] econames = {"Resource", "Labour", "Infrastructure",
              "Efficiency"};
            column = columns[world][5].substring(1,
                    columns[world][5].length() - 1);
            for (int j = 0; j < ecobits.length; j++) {
              ints[5][j] = ecobits[j].length();
            }
            for (int j = 0; j < 3; j++) {
              st = column.substring(j, j + 1);
              if (!ecobits[j].contains(st)) {
                ecobits[j] += st;
              }
            }
            try {
              num = GlobalMethods.fromHex(column.substring(3));
            } catch (Exception e) {
//              System.out.println("8404 = " + e);
              num = GlobalMethods.fromHex(column.substring(3, 4));
//              System.out.println("num = "+num);
//              System.out.println("column.substring(3) = " + column.substring(3));
//              System.out.println("column.substring(3,4) = " + column.substring(3,4));
//              System.out.println("");
//              System.out.println("num = " + num);
            }
            if (ecobits[3].isEmpty()) {
              ecobits[3] = "" + num;
            } else {
              int[] nums = new int[ecobits[3].split(",").length];
              Arrays.sort(nums);
              if (!ecobits[3].contains("," + num)) {
                ecobits[3] += "," + num;
              }
            }
            counted = new int[ints[part][0]];
            for (int n = 0; n < counted.length; n++) {
              if (column.substring(0, 1).equals(sortString(ecobits[0], 1)
                      .substring(n, n + 1))) {
                counted5[0][n] += 1;
              }
            }
            counted = new int[ints[part][1]];
            for (int n = 0; n < counted.length; n++) {
              if (column.substring(1, 2).equals(sortString(ecobits[1], 1)
                      .substring(n, n + 1))) {
                counted5[1][n] += 1;
              }
            }
            counted = new int[ints[part][2]];
            for (int n = 0; n < counted.length; n++) {
              if (column.substring(2, 3).equals(sortString(ecobits[2], 1)
                      .substring(n, n + 1))) {
                counted5[2][n] += 1;
              }
            }
            counted = new int[11];
            counted5[3][GlobalMethods.fromHex(column.substring(3)) + 5] += 1;
            break;
          }
          //--------------------------------------------------------------------------
          //CULTURE
          case 6: {//Cultural
            String[] culturenames = {"Homogeneity", "Acceptance", "Strangeness",
              "Symbols"};
            column = columns[world][6].substring(1,
                    columns[world][6].length() - 1);
            ints[part] = new int[culturenames.length];
            for (int j = 0; j < culbits.length; j++) {
              ints[part][j] = culbits[j].length();
            }
            for (int j = 0; j < 4; j++) {
              st = column.substring(j, j + 1);
              if (!culbits[j].contains(st)) {
                culbits[j] += st;
              }
            }
            counted = new int[ints[part][0]];
            for (int j = 0; j < 4; j++) {
              for (int n = 0; n < counted.length; n++) {
                if (column.substring(j, j + 1).equals(sortString(culbits[0], 1)
                        .substring(n, n + 1))) {
                  counted6[j][n] += 1;
//                  System.out.println("" + " = " + counted6[0][n]);
                }
              }
            }
            break;
          }
          //--------------------------------------------------------------------------
          //NOBLES
          case 7: {//Nobles
            for (int j = 0; j < noblenames.length; j++) {
              if (column.contains(noblenames[j].substring(0, 1))) {
                ints[part][j] += 1;
              }
            }
            break;
          }
          //--------------------------------------------------------------------------
          //BASES
          case 8: {//Bases
            column = columns[world][part];
            num = basenames.length;
            for (int j = 0; j < num; j++) {
              if (column.contains(basenames[j].substring(0, 1))) {
                ints[8][j] += 1;
              }
            }
            break;
          }
          //--------------------------------------------------------------------------
          //TAS ZONE
          case 9: {//Zone
            column = columns[world][part];
            for (int j = 0; j < 3; j++) {
              if (column.contains(zonenames[j].substring(0, 1))) {
                ints[part][j] += 1;
              }
            }
            if (column.contains("-")) {
              ints[part][0] += 1;
            }
            break;
          }
          //--------------------------------------------------------------------------
          //PBG
          case 10: {//PBGs
            //<editor-fold defaultstate="collapsed" desc="P">
            String p = column.substring(0, 1);
            if (!pvars.contains(p)) {
              pvars += p;
            }
            if (p.equals("0") | p.equals("1") | p.equals("2")) {
              ints[10][0] += 1;
            }
            if (p.equals("3") | p.equals("4") | p.equals("5")) {
              ints[10][1] += 1;
            }
            if (p.equals("6") | p.equals("7") | p.equals("8")) {
              ints[10][2] += 1;
            }
            if (p.equals("9") | p.equals("A") | p.equals("B") | p.equals("C")
                    | p.equals("D") | p.equals("E") | p.equals("F") | p.equals("G")
                    | p.equals("H")) {
              ints[10][3] += 1;
            }
            //</editor-fold>
            //<editor-fold defaultstate="collapsed" desc="B">
            String b = column.substring(1, 2);
            if (!bvars.contains(b)) {
              bvars += b;
            }
            for (int j = 0; j < bvars.length(); j++) {
              num = GlobalMethods.fromHex(bvars.substring(j, j + 1));
              if (b.equals("" + num)) {
                ints[10][4 + num] += 1;
              }
            }
            //</editor-fold>
            //<editor-fold defaultstate="collapsed" desc="G">
            String g = column.substring(2, 3);
            if (!gvars.contains(g)) {
              gvars += g;
            }
            for (int j = 0; j < gvars.length(); j++) {
              num = GlobalMethods.fromHex(gvars.substring(j, j + 1));
              if (g.equals("" + num)) {

                try {
                  ints[10][4 + 8 + num] += 1;
                } catch (Exception e) {
                  System.out.println("num = " + num);
//                                    if (num > 17) {
//                                        num = 17;
//                                    }
                  String out = "8423" + CRLF;
                  out += "part = " + part + CRLF;
                  out += "num = " + num + CRLF;
                  out += "ints[10].length = " + ints[10].length + CRLF;
                  out += "j = " + j + CRLF;
                  out += "g = " + g + CRLF;
                  out += "lines = " + Arrays.toString(lines) + CRLF;
                  out += "world = " + world + CRLF;
                  out += "" + data[0] + CRLF;
                  out += "part = " + part + CRLF;
                  out += "" + "" + CRLF;
//                  JOptionPane.showMessageDialog(null, out);
                  System.out.println(out);
                }
              }
            }
            //            System.out.println(gvars);
            //</editor-fold>
            break;
          }
          //</editor-fold>
          //--------------------------------------------------------------------
          //11-WORLDS
          case 11: {//Worlds
            if (!sworlds.contains(column)) {
              sworlds += column + ",";
            }
            int num2 = Integer.parseInt(column.trim());
            System.out.println("num2 = " + num2);
            if (num2 > 18) {
              //JOptionPane.showMessageDialog(null, "num2>18");
              num2 = 18;
            }
            //0214 = 23!  altered in Deneb.sec
            ints[11][num2] += 1;
            break;
          }
          //--------------------------------------------------------------------------
          //12-ALLIED POWER
          case 12: {//Allied
            ints[part] = new int[0];
            break;
          }
          //--------------------------------------------------------------------------
          //13-STELLAR DETAILS
          case 13: {//Stellar
            String[] stellars = {"1", "2", "3", "4", "O", "B", "A", "F", "G",
              "K",
              "M", "Ia", "Ib", "II", "III", "IV", "V", "VI", "VII", "D", "BD",
              "Companion", "Strange"};
            ra = stellars;
            ints[part] = new int[stellars.length];
            break;
          }
        }
        //</editor-fold>
      }
    }

    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="step 2 PRINTLN ARRAY VALUES">
//    DEBUG = false;
    if (DEBUG) {
      for (int part = 0; part < parts; part++) {
        System.out.println(
                "ints[" + part + "] = new int[" + ints[part].length + "]");
        for (int j = 0; j < ints[part].length; j++) {
          System.out.println(
                  "\tints[" + part + "] [" + j + "] = " + ints[part][j]);
          //<editor-fold defaultstate="collapsed" desc="PRINTLN array values">
          if (part == 2) {
            counted = new int[ints[part][j]];
            for (int n = 0; n < counted.length; n++) {
              System.out.println(
                      "\t\tcounted2[" + j + "][" + n + "] = " + counted2[j][n]);
            }
          }
          if (part == 5) {
            counted = new int[ints[part][j]];
            for (i = 0; i < counted.length; i++) {
              ints[part][j] = counted[i];
              ints[5][3] = ecobits[3].split(",").length;
              System.out.println(
                      "\t\tcounted5[" + j + "][" + i + "] = " + counted5[j][i]);
            }
          }
          if (part == 6) {
            counted = new int[ints[part][j]];
            for (i = 0; i < counted.length; i++) {
              ints[part][j] = counted[i];
              System.out.println(
                      "\t\tcounted6[" + j + "][" + i + "] = " + counted6[j][i]);
            }
          }
          //</editor-fold>
        }
      }
    }
    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="step 3 DISPLAY SYSTEM COUNTS">
    s = "";
    for (int part = 0; part < parts; part++) {
      String[] ra = {""};
      s += "\t" + partnames[part] + CRLF;
      //<editor-fold defaultstate="collapsed" desc="DISPLAY ALL DATA">
      switch (part) {
        //<editor-fold defaultstate="collapsed" desc="comment">
        case 0: {//Hex
          break;
        }
        case 1: {//Name
          break;
        }
        case 2: {//UWP
          String[] uwp = {"Starports", "Sizes", "Atmospheres", "Hydrospheres",
            "Populations", "Governments", "Law Levels", "dashs", "Tech Levels"};
          for (int j = 0; j < 9; j++) {
            num = uwpbits[j].length();
            s += "\t    " + uwp[j] + " = " + sortString(uwpbits[j], 1)
                    + " = " + num + " variations" + CRLF;
            for (int n = 0; n < num; n++) {
              if (counted2[j][n] > 0) {
                s += "\t            " + sortString(uwpbits[j], 1).substring(n,
                        n + 1)
                        + " = " + counted2[j][n] + " systems" + CRLF;
              }
            }
          }
          break;
        }
        case 3: {//Trade
          for (int i = 0; i < remnames.length; i++) {
            if (ints[part][i] > 0) {
              s += "\t        " + remnames[i] + " = " + ints[part][i]
                      + " systems" + CRLF;
            }
          }
          break;
        }
        case 4: {//Importance
          int len = 9;//ints[part].length;
          s += "\t    " + len + " variations" + CRLF;
          for (int j = 5; j > -4; j--) {
            if (ints[part][j + 5] > 0) {
              s += "\t        " + j + " = " + ints[part][j + 5] + " systems"
                      + CRLF;
            }
          }
          break;
        }
        case 5: {//Economic
          String[] eco = {"Resource", "Labour", "Infrastructure", "Efficiency"};
          num = ecobits[0].length();
          s += "\t    " + eco[0] + " = " + sortString(ecobits[0], 1)
                  .toUpperCase()
                  + " = " + num + " variations" + CRLF;
          for (int k = 0; k < num; k++) {
            s += "\t            " + sortString(ecobits[0], 1).toUpperCase()
                    .substring(k, k + 1) + " = " + counted5[0][k] + " systems" + CRLF;
          }
          num = ecobits[1].length();
          s += "\t    " + eco[1] + " = " + sortString(ecobits[1], 1)
                  .toUpperCase()
                  + " = " + num + " variations" + CRLF;
          for (int k = 0; k < num; k++) {
            s += "\t            " + sortString(ecobits[1], 1).toUpperCase()
                    .substring(k, k + 1) + " = " + counted5[1][k] + " systems" + CRLF;
          }
          num = ecobits[2].length();
          s += "\t    " + eco[2] + " = " + sortString(ecobits[2], 1)
                  .toUpperCase()
                  + " = " + num + " variations" + CRLF;
          for (int k = 0; k < num; k++) {
            s += "\t            " + sortString(ecobits[2], 1).toUpperCase()
                    .substring(k, k + 1) + " = " + counted5[2][k] + " systems" + CRLF;
          }
          num = ecobits[3].split(",").length;
          s += "\t    " + eco[3] + " = " + ecobits[3]
                  + " = " + num + " variations" + CRLF;
          int[] strs = sortInts(ecobits[3]);
          for (int j = strs.length - 1; j >= 0; j--) {
            s += "\t            " + strs[j] + " = " + counted5[3][j]
                    + " systems" + CRLF;
          }
          break;
        }
        case 6: {//Cultural
          String[] culturenames = {"Homogeneity", "Acceptance", "Strangeness",
            "Symbols"};
          for (int j = 0; j < 4; j++) {
            num = culbits[j].length();
            s += "\t    " + culturenames[j] + " = "
                    + sortString(culbits[j], 1).toUpperCase()
                    + " = " + num + " variations" + CRLF;
            for (int k = 0; k < num; k++) {
              s += "\t            " + sortString(culbits[j], 1).toUpperCase()
                      .substring(k, k + 1) + " = " + counted6[j][k] + " systems"
                      + CRLF;
            }
          }
          break;
        }
        case 7: {//Nobles
          for (int j = 0; j < 10; j++) {
            if (ints[7][j] > 0) {
              s += "\t        " + noblenames[j] + " = " + ints[7][j]
                      + " systems" + CRLF;
            }
          }
          break;
        }
        case 8: {//Bases
          for (int j = 0; j < basenames.length; j++) {
            if (ints[8][j] > 0) {
              s += "\t        " + basenames[j] + " = " + ints[8][j] + " systems"
                      + CRLF;
            }
          }
          break;
        }
        case 9: {//Zone
          for (int j = 0; j < zonenames.length; j++) {
            if (ints[9][j] > 0) {
              s += "\t        " + zonenames[j] + " = " + ints[9][j] + " systems"
                      + CRLF;
            }
          }
          break;
        }
        case 10: {//PBGs
          pvars = sortString(pvars, 1);
          bvars = sortString(bvars, 1);
          gvars = sortString(gvars, 1);
          for (int j = 0; j < 4; j++) {
            s += "\t    " + pop[j] + " Population (" + vals[j] + ")-" + xtra[j]
                    + " = " + ints[10][j] + " systems" + CRLF;
          }
          for (int j = 0; j < bvars.length(); j++) {
            s += "\t    " + sortString(bvars.substring(j, j + 1), 1)
                    + " Planetoid Belts = " + ints[10][4 + j] + " systems" + CRLF;
          }
          try {
            for (int j = 0; j < gvars.length(); j++) {
              s += "\t    " + sortString(gvars.substring(j, j + 1), 1)
                      + " Gas Giants = " + ints[10][4 + 8 + j] + " systems" + CRLF;
            }
            break;
          } catch (Exception e) {
            System.out.println("8670");
          }
        }
        //</editor-fold>
        case 11: {//Worlds
          for (int j = 0; j < nworlds; j++) {
            if (ints[11][j] > 0) {
              s += "\t    " + j + " = " + ints[11][j] + " systems" + CRLF;
            }
          }
          break;
        }
        case 12: {//Allied
          s += "\t    " + "See top section" + CRLF;
          break;
        }
        case 13: {//Stellar
          String[] stellars = {"1", "2", "3", "4", "O", "B", "A", "F", "G", "K",
            "M", "Ia", "Ib", "II", "III", "IV", "V", "VI", "VII", "D", "BD",
            "Companion"};
          for (int j = 0; j < stellars.length; j++) {
            t = "";
            if (j > 3 & j < 11) {
              t = " Color";
            } else if (j > 10 & j < stellars.length - 4) {
              t = " Size";
            }
            s += "\t    " + stellars[j] + " Stars = " + CRLF;
          }
          break;
        }
      }
      if (ra[0] != "") {
        for (String ra1 : ra) {
          s += "\t        " + ra1 + " = " + CRLF;
        }
      }
      //</editor-fold>
    }
    //</editor-fold>
    return s;
  }

  private String sortString(String portion, int len) {
    String string = "";
    String[] t = new String[portion.length() / len];
    for (int j = 0; j < portion.length(); j += len) {
      t[j] = portion.substring(j * len, (j + 1) * len);
    }
    Arrays.sort(t);
    portion = "";
    for (int j = 0; j < t.length; j++) {
      portion += t[j];
    }
    return portion;
  }

  private int[] sortInts(String portion) {
    num = portion.split((",")).length;
    int[] ra = new int[portion.split(",").length];
    for (int j = 0; j < ra.length; j++) {
      ra[j] = Integer.parseInt(portion.split(",")[j]);
    }
    Arrays.sort(ra);
    num = ra.length;
    for (int j = num - 1; j >= 0; j--) {
    }
    return ra;
  }

  public static void createSubPic() {
    int xo = 0;
    int yo = 0;
    int h = 0;
    int w;
    int l = 0;
    int l3;
    int l4;
    int l5;
    int t = 0;
    try {
      subw = (int) (panel4Sys.getWidth() / 8);
      subh = (int) (panel4Sys.getHeight() / 10.5);
      Graphics g = panel4Sys.getGraphics();
      Graphics2D g2 = (Graphics2D) g;
      g2.setBackground(Color.white);
      g2.clearRect(0, 0, panel4Sys.getWidth(), panel4Sys.getHeight());
      g2.setColor(Color.white);
      Color col;
      for (int j = 0; j < jcb4Sys.getItemCount(); j++) {
        String xy = jcb4Sys.getItemAt(j).toString().substring(0, 4);
        left = Integer.parseInt(xy.substring(0, 2));
        top = Integer.parseInt(xy.substring(2, 4));
        while (left > 8) {
          left -= 8;
        }
        left -= 1;
        while (top > 10) {
          top -= 10;
        }
        top -= 1;
        int mod = 0;
        if (left % 2 == 1) {
          mod += subh / 2;
        }
        col = Color.white;
        switch (shape) {
          case "Square":
            //
            if (j == jcb4Sys.getSelectedIndex()) {
              g.setColor(getTASColor());
            }
            if (j < jcb4Sys.getSelectedIndex() | j > jcb4Sys.getSelectedIndex()) {
              g.setColor(col);
            }
            g2.fillRect((left * subw), mod + (top * subh), (int) (subw * 0.8),
                    (int) (subw * 0.8));
            g2.setPaint(Color.black);
            g2.drawRect((left * subw), mod + (top * subh), (int) (subw * 0.8),
                    (int) (subw * 0.8));
            break;
          case "Round":
            //Allegiance
            System.out.println("" + j + " = " + jcb4Sys.getItemAt(j).toString());
            if (j == jcb4Sys.getSelectedIndex()) {
              g.setColor(getTASColor());
            }
            if (j < jcb4Sys.getSelectedIndex() | j > jcb4Sys.getSelectedIndex()) {
              g.setColor(col);
            }
            g2.fillOval((left * subw), mod + (top * subh), (int) (subw * 0.8),
                    (int) (subw * 0.8));
            g2.setPaint(Color.black);
            g2.drawOval((left * subw), mod + (top * subh), (int) (subw * 0.8),
                    (int) (subw * 0.8));
            break;
          case "Hex":
            // Trade
            h = subh;
            w = h * 11 / 8;
            l3 = w * 3 / 11;
            l4 = w * 4 / 11;
            l5 = w * 5 / 11;
            xo = (left * (w * 8 / 11));
            yo = mod + (top * subh);
            Point a = new Point(l3, 0);
            Point b = new Point(l3 + l5, 0);
            Point c = new Point(l5 + (l3 * 2), l4);
            Point d = new Point(l3 + l5, (l4 * 2));
            Point e = new Point(l3, (l4 * 2));
            Point f = new Point(0, l4);
            Point[] points = new Point[]{a, b, c, d, e, f};
            Polygon p = new Polygon();
            g.setColor(Color.white);
            if (j == jcb4Sys.getSelectedIndex()) {
              g.setColor(getTASColor());
            }
            for (Point point : points) {
              x = (int) (point.getX()) + xo;
              y = (int) (point.getY()) + yo;
              p.addPoint(x, y);
            }
            g.fillPolygon(p);
            g.setColor(Color.black);
            g.drawPolygon(p);
            break;
          case "Vert":
            mod = subh;
            w = subw;
            h = w / 8 * 11;
            l3 = h * 3 / 11;
            l4 = h * 4 / 11;
            l5 = h * 5 / 11;
            xo = (left * (h / 10 * 8));
            yo = mod + (top * subh) + (l5 / 2) + l3;
            a = new Point((int) (l + 0), (int) (t + l3));
            b = new Point((int) (l + l4), (int) t);
            c = new Point((int) (l + (l4 * 2)), (int) (t + l3));
            d = new Point((int) (l + (l4 * 2)), (int) (t + l3 + l5));
            e = new Point((int) (l + l4), (int) (t + (l3 * 2) + l5));
            f = new Point((int) (l + 0), (int) (t + l3 + l5));
            points = new Point[]{a, b, c, d, e, f};
            p = new Polygon();
            g.setColor(Color.white);
            if (j == jcb4Sys.getSelectedIndex()) {
              g.setColor(getTASColor());
            }
            for (Point point : points) {
              x = (int) (point.getX()) + xo + l3;
              y = (int) (point.getY()) + yo;
              if (top % 2 == 0) {
                x -= (l3 + 2);
              }
//              if(left%2==0) {
              y -= l3 + (2 * l5);
//              }
              p.addPoint(x, y);
            }
            g.fillPolygon(p);
            g.setColor(Color.black);
            g.drawPolygon(p);
            break;
        }
      }
    } catch (NumberFormatException e) {
      System.out.println("9339" + " = " + e.toString());
    }
  }

  private void createWorldPic() {
    Panel4T5CounterMaker.counter = "World";
//    Panel4T5CounterMaker.createWorldPic();
  }

  private static void createSDBPic() {
    Panel4T5CounterMaker.createSDBPic();
  }

  private static void createSquadronPic() {
    Panel4T5CounterMaker.createSquadronPic();
//    createCounters("Squadrons");
  }

  private static void createDefBatPic() {
    Panel4T5CounterMaker.createDefBatPic();
  }

  private static void createTroopPic() {
    Panel4T5CounterMaker.createTroopPic();
  }

  static void createPopPic() {
    Panel4T5CounterMaker.createPopPic();
  }

  static void createBeltPic() {
    Panel4T5CounterMaker.createBeltPic();
  }

  static void createGasPic() {
    Panel4T5CounterMaker.createGasPic();
  }

  static void createWorldsPic() {
    Panel4T5CounterMaker.createWorldsPic();
  }

  @SuppressWarnings("unchecked")
  private void writeXMLNeighbours() {
    String s = "";
    @SuppressWarnings("unchecked")
    ListModel<String> dlm = jl4Jump.getModel();
//    for (int i = 0; i < 10; i++) {
//      js4Dist.setValue(i);
    dlm = jl4Jump.getModel();
    for (int j = 0; j < dlm.getSize(); j++) {
      String ss = dlm.getElementAt(j);
      int len = ss.length();
      if (len > 4) {
        try {
          s += "\"" + ss.substring(0, 4) + "\"" + CRLF;
        } catch (Exception e) {
          System.out.println("" + " = " + e.toString() + " - " + s);
        }
      }
    }
    System.out.println(s);
    String loc = Panel4T5Locator.jcb4Sys.getSelectedItem().toString().trim();
    String name = loc + " - Jump " + js4Dist.getValue();
    Panel4T5Scripting.Folder.setSelectedItem("Routes");
    Panel4T5Scripting.Name.setText(name);
    GlobalMethods.saveTextFile(_JS + FS + "Routes", name, ".txt", s);
    writeXML();
    showFullNames();
//    }
  }

  private void jcb2cb(JComboBox<String> jcb) {
    if (running) {
      if (jcb != null) {
        if (jcb.getSelectedIndex() > -1) {
          if (!jcb.getSelectedItem().toString().equals("")) {
            String txt = jcb.getSelectedItem().toString().trim();
            StringSelection sel = new StringSelection(txt);
            try {
              cb.setContents(sel, null);
            } catch (Exception e) {
              System.out.println("9050");
            }
          }
        }
      }
    }
  }

  private void jtf2cb(JTextField jtf) {
    String txt = jtf.getText().trim();
    StringSelection sel = new StringSelection(txt + CRLF);
    cb.setContents(sel, null);
    System.out.println(sel);
  }

  private void jl2cb(JLabel jl) {
    String txt = jl.getText().trim();
    StringSelection sel = new StringSelection(txt);
    cb.setContents(sel, null);
    System.out.println(sel);
  }

  private String updateNPC() {
    return GlobalMethods.showNPC();
  }

  //////////////////////////////////////////////////////////////////////////////
  private void jcb4SecAction(ActionEvent evt) {
    try {
      addSubsectors();
      setXY();
      showXY();
      jta4Sys.setText("");
      dcbm = new DefaultComboBoxModel<String>();
      jcb4Sys.setModel(dcbm);
      jcb4All.setModel(cbm);
      boolean ok = true;
      String s = jcb4Sec.getSelectedItem().toString();
      for (int j = 0; j < cbm.getSize(); j++) {
        if (cbm.getElementAt(j).equals(s)) {
          ok = false;
        }
      }
      if (ok) {
        jcb4All.addItem(s);
      }
      jcb4All.setSelectedItem(s);
//      jcb2cb(jcb4Sec);
    } catch (Exception e) {
      System.out.println("2114" + " = " + e.toString());
    }
  }

  public void jcb4SubAction(ActionEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    addSystems();
    if (jcb4Sys.getItemCount() > 0) {
      jcb4Sys.setSelectedIndex(selected);
    }
    panel4Sub.unColor();
    whiten();
    setUWP();
    writeSectorInfo();
    writeSubsectorInfo();
    loadSaved();
//    jcb2cb(jcb4Sub);
  }

  private void jcb4SysAction(ActionEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    try {

      setSubMinMaxXY(jcb4Sys.getSelectedItem().toString().substring(0, 4));
      jcb4Star.removeAllItems();
      showDetails();
      setUWP();
      js4DistStateChanged(ce);
      jta4OrbMouseClicked(me);
      showStrength();
      doJumps();
      jLabel4.setText(jcb4Sys.getSelectedItem().toString().trim() + " - " + UWP);
      setLang();
      updateChart();
      loadSaved();
      setLang();
      updateChart();
      Panel4T5CounterMaker.bc[0] = "Mainworld";
      String Sec = jcb4Sec.getSelectedItem().toString();
      String Sub = jcb4Sub.getSelectedItem().toString();
      String Sys = jcb4Sys.getSelectedItem().toString();
      txt2cb(Sec + "/" + Sub + "/" + Sys);
      Panel4T5CounterMaker.Folder.setSelectedItem("World");
      Panel4T5Troop.systemChange();
      Panel4T5Squadron.systemChange();
      Panel4T5CounterMaker.newWay();
//      jcb4All.setSelectedItem("jta4Orb");
      for (int j = 0; j < jcb4All.getItemCount(); j++) {
        if ("jta4Orb".equals(jcb4All.getModel().getElementAt(j))) {
          jcb4All.setSelectedIndex(j);
          break;
        }
      }
      jta4All.setText(jta4Orb.getText());
      jcb4AllAction(evt);
    } catch (Exception e) {
      //<editor-fold defaultstate="collapsed" desc="JOP">
      {
        JTextArea jta = new JTextArea(e.toString(), 50, 50);
        JScrollPane jsp = new JScrollPane(jta);
//        JOptionPane.showMessageDialog(null, jsp);
//        System.out.println("txt" + " = " + e.toString());
      }
//</editor-fold>
    } finally {

      //GlobalMethods.saveTextFile(dir, file, ext, txt);
    }
  }

  private void panel4SysClick(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    findSystem(panel4Sys.getToolTipText());
    if (evt.getClickCount() > 1) {
      if (shape == "Square") {
        //Trade in hexes
        shape = "Hex";
      } else if (shape == "Hex") {
        //Allegiance in Rounds
        shape = "Vert";
      } else if (shape == "Vert") {
        //Allegiance in Rounds
        shape = "Round";
      } else if (shape == "Round") {
        //War in Squares
        shape = "Square";
      }
    }
    loadSaved();
    String Sec = jcb4Sec.getSelectedItem().toString();
    String Sub = jcb4Sub.getSelectedItem().toString();
    String Sys = jcb4Sys.getSelectedItem().toString();
    txt2cb(Sec + "/" + Sub + "/" + Sys);
////    createWorldPic();
    Panel4T5CounterMaker.Folder.setSelectedItem("World");
    Panel4T5Troop.systemChange();
    Panel4T5Squadron.systemChange();
    ta4Read.grabFocus();
  }

  private void panel4SysMove(MouseEvent evt) {
    try {
      x = (1 + (evt.getX() / subw));
      y = (1 + (evt.getY() / subh));
      if (x % 2 == 0) {
        y = (1 + ((evt.getY() - (subh / 2)) / subh));
      }
      switch (jcb4Sub.getSelectedItem().toString().substring(0, 1)) {
        case "A": {
          x += 0;
          y += 0;
          break;
        }
        case "B": {
          x += 8;
          y += 0;
          break;
        }
        case "C": {
          x += 16;
          y += 0;
          break;
        }
        case "D": {
          x += 24;
          y += 0;
          break;
        }
        case "E": {
          x += 0;
          y += 10;
          break;
        }
        case "F": {
          x += 8;
          y += 10;
          break;
        }
        case "G": {
          x += 16;
          y += 10;
          break;
        }
        case "H": {
          x += 24;
          y += 10;
          break;
        }
        case "I": {
          x += 0;
          y += 20;
          break;
        }
        case "J": {
          x += 8;
          y += 20;
          break;
        }
        case "K": {
          x += 16;
          y += 20;
          break;
        }
        case "L": {
          x += 24;
          y += 20;
          break;
        }
        case "M": {
          x += 0;
          y += 30;
          break;
        }
        case "N": {
          x += 8;
          y += 30;
          break;
        }
        case "O": {
          x += 16;
          y += 30;
          break;
        }
        case "P": {
          x += 24;
          y += 30;
          break;
        }
      }
      if (x < 10) {
        X = "0" + x;
      } else {
        X = "" + x;
      }
      if (y < 10) {
        Y = "0" + y;
      } else {
        Y = "" + y;
      }
      panel4Sys.setToolTipText("" + X + Y);
      for (int j = 0; j < jcb4Sys.getItemCount(); j++) {
        if (jcb4Sys.getItemAt(j).startsWith("" + X + Y)) {
          panel4Sys.setToolTipText(jcb4Sys.getItemAt(j).trim());
          break;
        } else {
//          System.out.println("9023 = " + j);
        }
      }
      if (jcb4Sys.getSelectedItem().toString().trim().equals(panel4Sys
              .getToolTipText())) {
        Panel4T5CounterMaker.Folder.setSelectedItem("World");
        createWorldPic();
      }
    } catch (Exception e) {
      System.out.println("1062" + " = " + e.toString());
      System.out.println("x = " + x);
      System.out.println("X = " + X);
      System.out.println("y = " + y);
      System.out.println("Y = " + Y);
    }
    createSubPic();
  }

  private void js4DistChange(ChangeEvent evt) {
    if (!js4Dist.getValueIsAdjusting()) {
      calcCost();
      doJumps();
    }
  }

  private void jcb4StarAction(ActionEvent evt) {
    jcb4All.setSelectedItem("jta4Orb");
    createSystemPic(jcb4Star.getSelectedItem().toString());
//    jcb2cb(jcb4Star);
  }

  private void jLabel3Click(MouseEvent evt) {
    String it = jCheckBox2.getText();
    switch (it) {
      case "Unrefined":
        cost = unrefined;
        break;
      case "Refined":
        cost = refined;
        break;
    }
    String var = "1";
    var = JOptionPane.showInputDialog(it + " Cost per Ton (KCr)", cost);
    switch (jCheckBox2.getText()) {
      case "Unrefined":
        unrefined = Integer.parseInt(var);
        break;
      case "Refined":
        refined = Integer.parseInt(var);
        break;
    }
    calcCost();
  }

  private void jcb2Action(ActionEvent evt) {
    if (jCheckBox2.isSelected()) {
      jCheckBox2.setText("Refined");
      jCheckBox2.setToolTipText("" + refined + "KCr per ton");
    } else {
      jCheckBox2.setText("Unrefined");
      jCheckBox2.setToolTipText("" + unrefined + "KCr per ton");
    }
    calcCost();
  }

  private void jcb1Action(ActionEvent evt) {
    if (jCheckBox1.isSelected()) {
      jCheckBox1.setText("KdT");
    } else {
      jCheckBox1.setText("dT");
    }
    calcCost();
  }

  private void jta4OrbClick(MouseEvent evt) {
//    jta4Orb.setText("");
//    createOrbitDetail();
  }

  private void jcb4SysClick(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    if (evt.getClickCount() > 1) {
      findCapital();
    }
    String Sec = jcb4Sec.getSelectedItem().toString();
    String Sub = jcb4Sub.getSelectedItem().toString();
    String Sys = jcb4Sys.getSelectedItem().toString();
    txt2cb(Sec + "/" + Sub + "/" + Sys);
  }

  @SuppressWarnings("unchecked")
  private void jcb4SecClick(MouseEvent evt) {
    if (evt.getClickCount() > 1) {
      downloadOptions();
    }
    jcb2cb(jcb4Sec);
  }

  @SuppressWarnings("unchecked")
  private void jcb4StarClick(MouseEvent evt) {
    jcb4All.setSelectedItem("jta4Sec");
    if (evt.getClickCount() > 1) {
      try {
        loadTexts();
//        loadOrbitPics();
      } catch (Exception e) {
        System.out.println("1179" + " = " + e);
      }
    }
    jcb2cb(jcb4Star);
  }

  static void SDBsClick(MouseEvent evt) {
    sdbs1.setText("" + worldupdate("SDBs"));
    txt2cb("SDB squadrons = " + sdbs1.getText());
  }

  static void TroopsClick(MouseEvent evt) {
    troopunits.setText("" + worldupdate("TROOPUNITS"));
    txt2cb("Troops = " + troopunits.getText());
  }

  static void RonsClick(MouseEvent evt) {
    squadrons.setText("" + worldupdate("SQUADRONS"));
    txt2cb("Starship squadron pts = " + squadrons.getText());
  }

  static void CFClick(MouseEvent evt) {
    defbats.setText("" + worldupdate("DEFENCEBATTS"));
    txt2cb("World Defence CFs = " + defbats.getText());
  }

  private void SDBs1Click(MouseEvent evt) {
    args[0] = worldupdate("SDBs");
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      String method = Thread.currentThread().getStackTrace()[1].getMethodName();
      System.out.println("\t" + method);
      //JOptionPane.showMessageDialog(null, method);
    }
    //</editor-fold>
    Panel4T5TableView.main(new String[]{"SDBSquadrons", getpop(), gettl()});
  }

  private void squadronsClick(MouseEvent evt) {
    args[0] = worldupdate("SQUADRONS");
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      String method = Thread.currentThread().getStackTrace()[1].getMethodName();
      System.out.println("\t" + method);
      //JOptionPane.showMessageDialog(null, method);
    }
    //</editor-fold>
    Panel4T5TableView.main(new String[]{"MaxStarshipSquadrons", gettl(), sdbs1
      .getText(), squadrons.getText()});
  }

  private void defbatsClick(MouseEvent evt) {
    args[0] = worldupdate("DEFENCEBATTS");
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      String method = Thread.currentThread().getStackTrace()[1].getMethodName();
      System.out.println("\t" + method);
      //JOptionPane.showMessageDialog(null, method);
    }
    //</editor-fold>
    Panel4T5TableView.main(
            new String[]{"DefenceBattalionsCombatFactor", getpop(), gettl(), defbats
                      .getText()});
  }

  private void troopsunitClick(MouseEvent evt) {
    args[0] = worldupdate("TROOPUNITS");
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      String method = Thread.currentThread().getStackTrace()[1].getMethodName();
      System.out.println("\t" + method);
      //JOptionPane.showMessageDialog(null, method);
    }
    //</editor-fold>
    Panel4T5TableView.main(
            new String[]{"InitialProduction", getpop(), gettl(), troopunits
                      .getText()});
  }

  private void jl4JumpClick(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      //System.out.println("" + " = " + );
    }
    //</editor-fold>
    String oldsec = jcb4Sec.getSelectedItem().toString();
    String oldsub = jcb4Sub.getSelectedItem().toString();
    String oldsys = jcb4Sys.getSelectedItem().toString();
    String newsec = sC.getText();
    String newsub = sB.getText();
    String newsys = sS.getText();
    boolean insec = false;
    boolean insub = false;
    boolean insys = false;
    if (oldsec.startsWith(newsec)) {
      insec = true;
      //<editor-fold defaultstate="collapsed" desc="DEBUG">
      if (DEBUG) {
        System.out.print("" + " = " + "" + CRLF);
        System.out.println("insec");
      }
      //</editor-fold>
    }
    if (oldsub.startsWith(newsub)) {
      insub = true;
      //<editor-fold defaultstate="collapsed" desc="DEBUG">
      if (DEBUG) {
        System.out.print("" + " = " + "" + CRLF);
        System.out.println("insub");
      }
      //</editor-fold>
    }
    if (newsys.startsWith(oldsys)) {
      insys = true;
      //<editor-fold defaultstate="collapsed" desc="DEBUG">
      if (DEBUG) {
        System.out.print("" + " = " + "" + CRLF);
        System.out.println("insys");
      }
      //</editor-fold>
    }
    if (evt.getClickCount() > 1) {
      if (!insec) {
        jcb4Sec.setSelectedItem(newsec);
      }
      if (!insub) {
        for (int j = 0; j < jcb4Sub.getItemCount(); j++) {
          if (jcb4Sub.getItemAt(j).toString().startsWith(sB.getText())) {
            jcb4Sub.setSelectedIndex(j);
          }
        }
      }
      boolean found = false;
      try {
        for (int j = 0; j < jcb4Sys.getItemCount(); j++) {
          if (jcb4Sys.getItemAt(j).toString().startsWith(sS.getText().substring(
                  0, 4))) {
            jcb4Sys.setSelectedIndex(j);
            found = true;
          }
        }
        if (!found) {
          System.out.println("2275 MT" + " = " + X + Y);
        }
      } catch (Exception e) {
        System.out.println("2278 = Empty hex");
      }
    }
    sCMouseClicked(me);
    sBMouseClicked(me);
    sSMouseClicked(me);
    String outline = "";
    f = new File(T5 + FS + sC.getText() + ".sec");
    String[] newlines = GlobalMethods.getLinesFromFile(f);
    for (int j = 0; j < newlines.length; j++) {
      if (newlines[j].startsWith("---- -")) {
        int start = newlines[j].indexOf(" ");
        int end = newlines[j].substring(start).indexOf(" ");
        System.out.println("start" + " = " + start);
        System.out.println("end" + " = " + end);
      }
      break;
    }
    saveDestTreeMap();
  }

  private void jl4JumpChange(javax.swing.event.ListSelectionEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      System.out.println("evt.getValueIsAdjusting()" + " = " + evt
              .getValueIsAdjusting());
    }
    //</editor-fold>
    if (evt.getValueIsAdjusting() == false) {
      destChange();
      //<editor-fold defaultstate="collapsed" desc="DEBUG">
      if (DEBUG) {
        System.out.println("xdestChange()");
      }
      //</editor-fold>
      graphChange();
      //<editor-fold defaultstate="collapsed" desc="DEBUG">
      if (DEBUG) {
        System.out.println("graphChange()");
      }
      //</editor-fold>
    }
//    showDest();
  }

  private void jcb4AllAction(ActionEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    JTextArea jta = new JTextArea();
    boolean found = false;
    String sel = jcb4All.getSelectedItem().toString();
    if (sel.startsWith("jta4")) {
      //<editor-fold defaultstate="collapsed" desc="switch (sel) {">
      switch (sel) {
        case "jta4All": {
          writeAllInfo();
          jta = jta4All;
          break;
        }
        case "jta4Sec": {
          writeSectorInfo();
          jta = jta4Sec;
          found = true;
          break;
        }
        case "jta4Sub": {
          writeSubsectorInfo();
          jta = jta4Sub;
          found = true;
          break;
        }
        case "jta4Sys": {
          jta = jta4Sys;
          found = true;
          break;
        }
        case "jta4Line": {
          jta = jta4Line;
          found = true;
          break;
        }
        case "jta4Info": {
          jta = jta4Info;
          found = true;
          break;
        }
        case "jta4Near": {
          jta = jta4Near;
          found = true;
          break;
        }
        case "jta4Orb": {
          jta = jta4Orb;
          found = true;
          break;
        }
        case "jta4Dest": {
          jump = js4Dist.getValue();
          found = true;
          String txt = "";
          for (int j = 0; j < 10; j++) {
            js4Dist.setValue(j);
            js4DistStateChanged(ce);
            txt += GlobalMethods.comment("-", 80);
            for (int k = 0; k < jl4Jump.getModel().getSize(); k++) {
              txt += "Jump " + j + " = " + jl4Jump.getModel().getElementAt(k)
                      + CRLF;
            }
          }
          jta4Dest.setText(txt);
          js4Dist.setValue(jump);
          js4DistStateChanged(ce);
          jta = jta4Dest;
          break;
        }
        case "jta4Str": {
          jta = jta4Str;
          found = true;
          break;
        }
        case "jta4HTML": {
          jta = jta4HTML;
          found = true;
          break;
        }
        case "jta4UWP": {
          System.out.println("9752 jta4UWP");
          jta = jta4UWP;
          found = true;
          break;
        }
        case "jta4Bases": {
          jta = jta4Bases;
          found = true;
          break;
        }
      }
      //</editor-fold>
    } else {
      //  Sector file from disk
      jta.setText("");
      for (i = 0; i < jcb4Sec.getItemCount(); i++) {
        if (jcb4Sec.getItemAt(i).equals(jcb4All.getSelectedItem().toString())) {
          found = true;
          String path = _SEC + FS + jcb4All.getSelectedItem().toString()
                  + ".sec";
          String[] lin = GlobalMethods.getLinesFromFile(new File(path));
          for (int j = 0; j < lin.length; j++) {
            jta.append(lin[j] + CRLF);
          }
        }
      }
      if (!found) {
        JOptionPane.showMessageDialog(jf, "9646 !FOUND " + found);
      }
    }
    jta4All.setText(jta.getText());
    if (jcb4Options.getSelectedIndex() >= 0) {
      jcb2cb(jcb4All);
    }

  }

  private void panel4WorldPicClick(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    //    boolean DEBUG = false;
    //    if (DEBUG) { // true or false
    //      System.out.print(GlobalMethods.comment("=", 80));
    //      System.out.println("\t" + getClass().getName() + " = " + Thread.currentThread().getStackTrace()[1].getMethodName());
    //      System.out.println("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());
    //    }
    //</editor-fold>
//    createWorldPic();
//    updateChart();

  }

  private void jLabel4Click(MouseEvent evt) {
    createWorldPic();
    saveHomeTreeMap();
    txt2cb(jLabel4.getText());
    Panel4T5CounterMaker.Folder.setSelectedItem("World");
//    if (evt.getClickCount() > 1) {
//      writeXMLNeighbours();
//    }
  }

  private void jtf4WordClick(MouseEvent evt) {
    getWord(evt);
  }

  private void jcb4LangAction(ActionEvent evt) {
    getWord(me);
//    jtf4WordMouseClicked(me);
//    jcb2cb(jcb4Lang);
    updateNPC();
  }

  private void jtf4UWPAction(ActionEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + getClass().getName() + " = " + Thread
              .currentThread().getStackTrace()[1].getMethodName());
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    jtf4UWPMouseClicked(me);
    if (jtf4UWP.getText() != "") {
      jtf2cb(jtf4UWP);
    }
  }

  public void jtf4UWPClick(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    //DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      //System.out.println("" + " = " + );
    }
    //</editor-fold>
    String txt = jtf4UWP.getText().replace(" ", "").replace(CRLF, "").replace(
            "\t", "");
    jtf4UWP.setText(txt);
    if (jtf4UWP.getText().length() != 0 & jtf4UWP.getText().length() != 9
            & jtf4UWP.getText().length() != 6) {
      JOptionPane.showMessageDialog(jp,
              "enter UWP (i.e. A788999-C)" + CRLF + "OR UPP (999AAA)" + CRLF + txt);
      jtf4UWP.setText("");
      jta4UWP.setText("");
      jcb4All.setSelectedItem("jta4Orb");
    } else if (jtf4UWP.getText().length() == 6) {
      String upp = jtf4UWP.getText().trim().toUpperCase();
      String old = UWP;
      String UPP = upp;
      UWP = old;
      upp2Chart();
    } else if (jtf4UWP.getText().length() == 9) {
      jta4UWP.setText("" + jtf4UWP.getText().trim().toUpperCase() + CRLF);
      String uwp = jtf4UWP.getText().trim().toUpperCase();
      String old = UWP;
      UWP = uwp;
      String str = "";
      str += getSP() + CRLF;
      str += getSiz() + CRLF;
      str += getAtmo() + CRLF;
      str += getHydro() + CRLF;
      str += getPop() + CRLF;
      str += getGov() + CRLF;
      str += getLaw() + CRLF;
      str += getTech() + CRLF;
      jta4UWP.append(str);
      jcb4All.setSelectedItem("jta4UWP");
//      jcb4All.setSelectedItem("jta4Orb");
      UWP = old;
      setUWP();
      uwp2Chart();
    } else if (jtf4UWP.getText().length() == 0) {
      jcb4All.setSelectedItem("jta4Orb");
    }
    txt2cb(jtf4UWP.getText());
  }

  private void jcb4OptionsAction(ActionEvent evt) {
    try {
      String str = jcb4Options.getSelectedItem().toString();
      System.out.println("str" + " = " + str);
      switch (str) {
        case "Launch": {
          launch();
          break;
        }
        case "Squadrons": {
          Panel4T5Squadron.main(args);
          break;
        }
        case "Troops": {
          Panel4T5Troop.main(args);
          break;
        }
        case "Counter": {
          Panel4T5CounterMaker.main(new String[]{"Test"});
          break;
        }
        case "Scripting": {
          new Panel4T5Scripting();
          break;
        }
        case "Box": {
          Panel4Boxer.main(args);
          break;
        }
        case "Backup": {
          Panel4T5Backup.main(args);
          break;
        }
        case "LPT": {
          linkpictext.Panel4LPT.jf.setVisible(!linkpictext.Panel4LPT.jf.isVisible());
          linkpictext.Panel4LPT.folderChange();
          break;
        }
        case "XML": {
          xml();
          break;
        }
        case "T5": {
//          fx.t5.T5.main(args);
          break;
        }
        case "Empire": {
          Empire.main(args);
          break;
        }
      }
      if (jcb4Options.getSelectedIndex() >= 0) {
        jcb2cb(jcb4Options);
      }
    } catch (Exception e) {
      //<editor-fold defaultstate="collapsed" desc="JOP">
      {
        JTextArea jta = new JTextArea("", 50, 50);
        JScrollPane jsp = new JScrollPane(jta);
        JOptionPane.showMessageDialog(null, jsp);
      }
//</editor-fold>
    } finally {

    }
  }

  private void jButton1Pressed(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    findCapital();
  }

  private void jButton1Released(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
//    Panel4JFX.main(args);
    saveSubSecPic();
  }

  private void sCMouseClick(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      System.out.println("" + " = " + sortOutSubName());
    }
    //</editor-fold>
    sB.setText(sortOutSubName());
  }

  private void sBMouseClick(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      System.out.println("" + " = " + sortOutSysName());
    }
    //</editor-fold>
    sS.setText(sortOutSysName());
  }

  @SuppressWarnings("unchecked")
  private void sSMouseClick(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    DefaultListModel dlm = (DefaultListModel) jl4Jump.getModel();
    try {
      int idx = jl4Jump.getSelectedIndex();
      if (!jl4Jump.getModel().getElementAt(idx).equals(sS.getText())) {
        if (sS.getText().equals("")) {
          sS.setText(jl4Jump.getModel().getElementAt(idx).toString().substring(0,
                  4));
        }
        dlm.setElementAt(sS.getText(), idx);
      }
      jl4Jump.setModel(dlm);
    } catch (Exception e) {
//            JTextArea ta = new JTextArea(40,40);
//            ta.setText(e.toString());
//            JScrollPane c =  new JScrollPane(ta);
//            //c.add(ta);
//            JOptionPane.showMessageDialog(this,c);

    }
  }

  private void jl4JumpPressed(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    dest = jl4Jump.getSelectedValue().toString();
  }

  private void jl4JumpReleased(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      //System.out.println("" + " = " + );
    }
    //</editor-fold>
    dest = jl4Jump.getSelectedValue().toString();
  }

  private void jLabel4Property(java.beans.PropertyChangeEvent evt) {
    saveHomeTreeMap();
//    Panel4T5CounterMaker.Folder.setSelectedItem("World");
//    Panel4T5Troop.systemChange();
//    Panel4T5Squadron.systemChange();
  }

  private void panel4ClickClick(MouseEvent evt) {
    File file = new File(T5);
    saveCounter(file);
  }

  private void jLabel5MouseClick(MouseEvent evt) {
    createPopPic();
    txt2cb("Population " + Panel4T5CounterMaker.countPop());
  }

  private void jLabel6MouseClick(MouseEvent evt) {
    createBeltPic();
    txt2cb("Planetoid Belts = " + jLabel9.getText());
    Panel4Mining.main(args);
  }

  private void jLabel7MouseClick(MouseEvent evt) {
    createGasPic();
    txt2cb("Gas Giants = " + jLabel10.getText());
  }

  private void jLabel11MouseClick(MouseEvent evt) {
    createWorldsPic();
    txt2cb("Other worlds = " + jLabel12.getText());
  }

  private void jComboBox1Action(ActionEvent evt) {
    String def = "";
    s = jComboBox1.getSelectedItem().toString().trim();
    switch (s) {
      case "0-Hex": {
        def = "1910";
        break;
      }

      case "1-Name": {
        def = "Regina";
        break;
      }

      case "2-UWP": {
        def = "A788999-C";
        break;
      }

      case "Starport": {
        def = "A";
        break;
      }

      case "Size": {
        def = "7";
        break;
      }

      case "Atmosphere": {
        def = "8";
        break;
      }

      case "Hydrosphere": {
        def = "8";
        break;
      }

      case "Population": {
        def = "9";
        break;
      }

      case "Government": {
        def = "9";
        break;
      }

      case "Law Level": {
        def = "9";
        break;
      }

      case "Tech Level": {
        def = "C";
        break;
      }

      case "3-Remarks": {
        def = "Ri Pa Ph An Cp (Amindii)2 Varg0 Asla0 Sa";
        break;
      }

      case "4-Importance": {
        def = "4";
        break;
      }

      case "5-Economic": {
        def = "D7E+5";
        break;
      }

      case "Resources": {
        def = "D";
        break;
      }

      case "Labour": {
        def = "7";
        break;
      }

      case "Infrastructure": {
        def = "E";
        break;
      }

      case "Efficiency": {
        def = "5";
        break;
      }

      case "6-Cultural": {
        def = "9C6D";
        break;
      }

      case "Homogeneity": {
        def = "9";
        break;
      }

      case "Acceptance": {
        def = "C";
        break;
      }

      case "Strangeness": {
        def = "6";
        break;
      }

      case "Symbols": {
        def = "D";
        break;
      }

      case "7-Nobles": {
        def = "BcCeF";
        break;
      }

//      case "B-Knight": {
//        def = "";
//        break;
//      }
//
//      case "c-Baronet": {
//        def = "";
//        break;
//      }
//
//      case "C-Baron": {
//        def = "";
//        break;
//      }
//
//      case "D-Marquis": {
//        def = "";
//        break;
//      }
//
//      case "e-Viscount": {
//        def = "";
//        break;
//      }
//
//      case "E-Count": {
//        def = "";
//        break;
//      }
//
//      case "f-Duke": {
//        def = "";
//        break;
//      }
//
//      case "F-Duke": {
//        def = "";
//        break;
//      }
//
//      case "G-Archduke": {
//        def = "";
//        break;
//      }
//
//      case "H-Emperor": {
//        def = "";
//        break;
//      }
      case "8-Bases": {
        def = "NS";
        break;
      }

      case "9-Zones": {
        def = "-";
        break;
      }

//      case "Green": {
//        def = "";
//        break;
//      }
//
//      case "Amber": {
//        def = "";
//        break;
//      }
//
//      case "Red": {
//        def = "";
//        break;
//      }
      case "10-PBG": {
        def = "703";
        break;
      }

//      case "No pop": {
//        def = "";
//        break;
//      }
//
//      case "Low pop": {
//        def = "";
//        break;
//      }
//
//      case "Med pop": {
//        def = "";
//        break;
//      }
//
//      case "HIGH POP": {
//        def = "";
//        break;
//      }
      case "11-Worlds": {
        def = "8";
        break;
      }

      case "12-Allegiance": {
        def = "ImDd";
        break;
      }

      case "13-Stellar": {
        def = "F7 V BD M3 V";
        break;
      }

      case "Color": {
        def = "";
        break;
      }

      case "Decimal": {
        def = "";
        break;
      }
      case "Star Size": {
        def = "";
        break;
      }
      case "Amount": {
        def = "";
        break;
      }
    }
    jtf4Find.setText(def);
    if (jComboBox1.getSelectedIndex() >= 0) {
      jcb2cb(jComboBox1);
    }
  }

  private void jtf4FindMouseClick(MouseEvent evt) {
//    jtf4Find.getText();
    jtf2cb(jtf4Find);
  }

  private void jComboBox19Click(MouseEvent evt) {
    calcCost();
  }

  private void jcb4SysItemChange() {
    Panel4T5Troop.systemChange();
    Panel4T5Squadron.systemChange();
  }

  private void panel4PicMouseMove(MouseEvent evt) {
//    createWorldPic();
    Panel4T5CounterMaker.Folder.setSelectedItem("World");

  }

  private void jcb4OptionsMouseClick(MouseEvent evt) {
    if (evt.getClickCount() > 1) {
      jcb4Options.setSelectedIndex(jcb4Options.getSelectedIndex());
    }
  }

  private void jComboBox1MouseClick(MouseEvent evt) {
    if (evt.getClickCount() > 1) {
      DBPublic.LocateSystems(jComboBox1.getSelectedItem().toString().trim(),
              jtf4Find.getText().trim());
    }
  }

  private void jtf4UPPAction(ActionEvent evt) {
    jtf4UPP.setText(rollUPP());
    String upp = jtf4UPP.getText().trim().toUpperCase();
    String old = UWP;
    String UPP = upp;
    UWP = old;
    upp2Chart();
  }

  private void jcb4LangMouseClick(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      String method = Thread.currentThread().getStackTrace()[1].getMethodName();
      System.out.println("\t" + method);
      //JOptionPane.showMessageDialog(null, method);
    }
    //</editor-fold>
    getWord(evt);
  }

  private void jtf4UPPMouseClick(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      String method = Thread.currentThread().getStackTrace()[1].getMethodName();
      System.out.println("\t" + method);
      //JOptionPane.showMessageDialog(null, method);
    }
    //</editor-fold>
    jtf4UPP.setText(rollUPP());
    String upp = jtf4UPP.getText().trim().toUpperCase();
    String old = UWP;
    String UPP = upp;
    UWP = old;
    upp2Chart();
  }

  private void jcb4CareerAction(ActionEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      String method = Thread.currentThread().getStackTrace()[1].getMethodName();
      System.out.println("\t" + method);
      //JOptionPane.showMessageDialog(null, method);
    }
    //</editor-fold>
  }

  private void jcb4CareerMouseClick(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      String method = Thread.currentThread().getStackTrace()[1].getMethodName();
      System.out.println("\t" + method);
      //JOptionPane.showMessageDialog(null, method);
    }
    //</editor-fold>
    if (jcb4Career.getSelectedItem().toString().equals("-Choose-")) {
      int num = GlobalMethods.roll1d();
      jcb4Career.setSelectedIndex(num);
    }
    num = GlobalMethods.roll1d();
    js4Terms.setValue(num);
    jtf4WordClick(evt);
    jtf4UPPAction(ae);
    setRanks();
    //jButton2.doClick();
  }

  private void js4TermsStateChange(ChangeEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      String method = Thread.currentThread().getStackTrace()[1].getMethodName();
      System.out.println("\t" + method);
      //JOptionPane.showMessageDialog(null, method);
    }
    //</editor-fold>
  }

  private void js4TermsMouseClick(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      String method = Thread.currentThread().getStackTrace()[1].getMethodName();
      System.out.println("\t" + method);
      //JOptionPane.showMessageDialog(null, method);
    }
    //</editor-fold>
    if (evt.getClickCount() > 1) {
      num = GlobalMethods.roll1d();
      js4Terms.setValue(num);
      jtf4WordClick(evt);
      jtf4UPPAction(ae);
    }
  }

  private void jButton2Action(ActionEvent evt) {
    txt2cb(updateNPC());
//    new TestMap();
  }

  private void jtf4WordKeyPress(java.awt.event.KeyEvent evt) {
  }

  private void jtf4UPPKeyPress(java.awt.event.KeyEvent evt) {
  }

  private void jButton1Action(ActionEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
  }

  private void jcb4SubClick(MouseEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      String s = "";
      s += GlobalMethods.comment("=", 80) + CRLF;
      String method = Thread.currentThread().getStackTrace()[1].getMethodName();
      s += "\t" + method + CRLF;
//      s += "" + " = " + "" + CRLF;
      System.out.print(s);
//      JOptionPane.showMessageDialog(null, s);
    }
    //</editor-fold>
    if (evt.getClickCount() > 1) {
      File f = new File(getSysPath());
      if (f.exists()) {
        int reply = JOptionPane.showConfirmDialog(jf.getContentPane()
                .findComponentAt(1, 351),
                "Are you sure you want to overwrite " + jcb4Sys.getSelectedItem()
                        .toString().trim() + "?");
        if (reply == JOptionPane.YES_OPTION) {
          saveAll();
        }
      } else {
        f.mkdir();
        saveAll();
      }
    }
    jcb2cb(jcb4Sub);
    createSubPic();
  }

  public static String stylesheet;

  public static int sheetnum;

  private void xml() {
    Locator.main(args);
  }

  private void jcb4RankClick(ActionEvent evt) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
//        jcb4Rank.setSelctectionModel(new String[] {"R0 ", "R1 ", "R2 ", "R3 ", "R4 ", "R5 ", "R6 "};
    boolean DEBUG = true;
    if (DEBUG) { // true or false
      String s = "";
      s += GlobalMethods.comment("=", 80) + CRLF;
      String method = Thread.currentThread().getStackTrace()[1].getMethodName();
      s += "\t" + method + CRLF;
//      s += "" + " = " + "" + CRLF;
      System.out.print(s);
//      JOptionPane.showMessageDialog(null, s);
    }
    //</editor-fold>
    int num = jcb4Rank.getSelectedIndex();
    js4Terms.setValue((int) 1 + (num * 3) / 2);
    jtf4WordClick(me);
    jtf4UPPAction(ae);
//        jButton2.doClick();
  }

  @SuppressWarnings("unchecked")
  public static void setRanks() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = true;
    if (DEBUG) { // true or false
      String s = "";
      s += GlobalMethods.comment("=", 80) + CRLF;
      String method = Thread.currentThread().getStackTrace()[1].getMethodName();
      s += "\t" + method + CRLF;
      s += "" + " = " + "" + CRLF;
      s += "" + " = " + "" + CRLF;
      System.out.print(s);
//      JOptionPane.showMessageDialog(null, s);
    }
    //</editor-fold>
    String[] ranks = null;
    switch (jcb4Career.getSelectedItem().toString()) {
      case "Navy":
      case "Navy Enlisted": {
        ranks = new String[]{"R1 Spacehand", "R2 Able Spacer",
          "R3 2nd P.O.", "R4 1st P.O.", "R5 Chief P.O.",
          "R6 Master Chief P.O."};
        break;
      }
      case "Navy Officer": {
        ranks = new String[]{"O1 Ensign", "O2 Sublieutenant",
          "03 Lieutenant", "04 Lt. Commander", "05 Commander",
          "O6 Captain", "O7 Admiral"};
        break;
      }
      case "Marine":
      case "Marine Enlisted": {
        ranks = new String[]{"M1 Private", "M2 Corporal",
          "M3 Sergeant", "M4 Staff Sgt.", "M5 Master Sgt.",
          "M6 Sgt. Major"};
        break;
      }
      case "Marine Officer": {
        ranks = new String[]{"O1 2nd Lt.", "O2 1st Lt.", "03 Captain",
          "04 Force Commander", "05 Lt. Colonel", "O6 Colonel",
          "O7 General"};
        break;
      }
      case "Army":
      case "Army Enlisted": {
        ranks = new String[]{"S1 Private", "S2 Corporal",
          "S3 Sergeant", "S4 Staff Sergeant", "S5 Master Sergeant",
          "S6 Sergeant Major"};
        break;
      }
      case "Army Officer": {
        ranks = new String[]{"O1 2nd Lieutenant", "O2 1st Lieutenant",
          "O3 Captain", "O4 Major", "O5 Lt. Colonel", "O6 Colonel",
          "O7 General", ""};
        break;
      }
      case "Scout": {
        ranks = new String[]{"", "", "", "", "", "", "", ""};
        break;
      }
      case "Other": {
        ranks = new String[]{"", "", "", "", "", "", "", ""};
        break;
      }
      case "Merchant": {
        ranks = new String[]{"R0 Spacehand", "R1 Steward Apprentice",
          "R2 Drive Helper", "M1 4th. Officer", "M2 3rd Officer",
          "M3 2nd Officer", "M4 1st Officer", "M5 Captain",
          "M6 Senior Captain"};
        break;
      }
      default: {
        break;
      }
    }
    dcbm = new DefaultComboBoxModel(ranks);
    jcb4Rank.setModel(dcbm);
  }

  //////////////////////////////////////////////////////////////////////////////
  private void writeAllInfo() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = true;
    if (DEBUG) { // true or false
      String s = "";
      s += GlobalMethods.comment("=", 80) + CRLF;
      String method = Thread.currentThread().getStackTrace()[1].getMethodName();
      s += "\t" + method + CRLF;
      s += "" + " = " + "" + CRLF;
      s += "" + " = " + "" + CRLF;
      System.out.print(s);
    }
    //</editor-fold>
    String all = jta4All.getText();
    System.out.println("all = " + CRLF + all + CRLF);
    jta4All.setText(all);
  }

  private void panel4MapClick(MouseEvent evt) {
//    ConsoleWindow.getOutput().setText("");
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = true;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    jcb4All.setSelectedIndex(8);
    loadSaved();
    jta4AllClick(evt);
    try {
      loadOrbitPics();
    } catch (Exception e) {
      System.out.println("10407 e = " + e);
    } finally {

      if (evt.getClickCount() > 1) {
        jcb4All.setSelectedItem("jta4Orb");
        ConsoleWindow.getOutput().setText("");
        jcb4Star.setSelectedItem(jcb4Star.getModel().getElementAt(0));
        createSystemPic(jcb4Star.getSelectedItem().toString());
        File f = new File(getSysPath() + FS + jcb4Sys.getSelectedItem().toString().trim() + "/jta4Orb.txt");
        if (f.exists()) {
          jta4All.setText(GlobalMethods.loadTextFile(f.toString()));
          //<editor-fold defaultstate="collapsed" desc="IFD">
          {
            String s = "";
            DEBUG = true;  // true or false;
            if (DEBUG) { // true or false
              s += "//////////////////////////////////////////////" + CRLF;
              s += "panels.Panel4T5Locator.panel4MapClick()" + CRLF;
              s += "\t" + Thread.currentThread().getStackTrace()[1].getMethodName() + CRLF;
              System.out.println(s);
            }
          }
          //</editor-fold>
        }
      }
    }
  }

  private void jta4AllClick(MouseEvent evt) {
    if (evt.getClickCount() > 1) {
      if (jcb4All.getSelectedItem().toString().trim().equals("jta4Orb")) {
        //<editor-fold defaultstate="collapsed" desc="IFD">
        {
          boolean DEBUG = true;
          //DEBUG = false;
          if (DEBUG) { // true or false
            System.out.print(GlobalMethods.comment("=", 80));
            System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
                    .getMethodName());
            System.out.println("createOrbitDetail()");
            System.out.println("createSystemPic(jcb4Star.getSelectedItem().toString())");
            System.out.println("saveFullPic()");
            System.out.println("loadOrbitPics()");
            System.out.println("saveJtas()");
          }
        }
        //</editor-fold>
        createOrbitDetail();
        createSystemPic(jcb4Star.getSelectedItem().toString());
        saveFullPic();
        loadOrbitPics();
        //loadSaved();
        saveJtas();
      }
    }
  }

  private void updatePic(MouseEvent me) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = true;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    ConsoleWindow.getOutput().setText("");
    System.out.println("updatePic()");
    jcb4All.setSelectedItem("jta4Orb");
//    createOrbitDetail();
//    createSystemPic(jcb4Star.getSelectedItem().toString());
  }

  //<editor-fold defaultstate="collapsed" desc="createOrbitDetail">
  void createOrbitDetail() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = true;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="setup">
    jta4Orb.setText("");
//        cleanOrbits();
    stars = jcb4Star.getItemCount();
    try {
      g = Integer.parseInt(data[10].substring(8, 9));
    } catch (Exception e) {
      g = 0;
      System.out.println("10638" + " createOrbitDetail() = " + e.toString());
    }
    try {
      b = Integer.parseInt(data[10].substring(7, 8));
    } catch (Exception e) {
      b = 0;
      System.out.println("10644" + " createOrbitDetail() = " + e.toString());
    }
    try {
      orbitnum = Integer.parseInt(data[11].substring(4));
    } catch (Exception e) {
      orbitnum = 0;
      System.out.println("10650" + " createOrbitDetail() = " + e.toString());
    }
    //upto 4 systems with seperate orbital lists
    orbitnum = -1;
    eo1 = -1;
    eo2 = -1;
    eo3 = -1;
    try {
      stars = jcb4Star.getItemCount();
      Stars = new String[stars];
      for (int j = 0; j < stars; j++) {
        Stars[j] = jcb4Star.getItemAt(j).toString();
      }
      Primary = jcb4Star.getItemAt(0).toString();
    } catch (Exception e) {
      System.out.println("10665 createOrbitDetail e = " + e);
      Primary = "M0 III";
    }
    jta4Orb.setText("Primary = " + Primary + CRLF);// + getStarData(Stars[0]));
    orbit = new String[orbits];
    for (int j = 0; j < orbit.length; j++) {
      orbit[j] = "";
    }
    int rnd1;
    addStarDetail(-1, jcb4Star.getItemAt(0).toString());
    //</editor-fold>
    systems = 1;
    orbitnum = -1;
    eo1 = 0;
    eo2 = 0;
    eo3 = 0;
    //<editor-fold defaultstate="collapsed" desc="if (stars == 1)">
    if (stars == 1) {//no extras required
      es0 = "Primary";
      orbitnum = -1;
    }
    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="if (stars == 2)">
    if (stars == 2) {//pick random for 2nd}
      rnd1 = (int) (Math.random() * 3) + 1;
      switch (rnd1) {
        case 1: {
          es1 = "Inner";
          eo1 = GlobalMethods.roll1d() - 1;
          break;
        }
        case 2: {
          es1 = "Outer";
          eo1 = GlobalMethods.roll1d() + 5;
          break;
        }
        case 3: {
          es1 = "Remote";
          eo1 = GlobalMethods.roll1d() + 11;
          break;
        }
      }
      es2 = null;
      eo2 = 0;
      es3 = null;
      eo3 = 0;
    }
    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="if (stars == 3)">
    if (stars == 3) {//pick MT, include others}
      rnd1 = (int) (Math.random() * 3) + 1;
      switch (rnd1) {
        case 1: {//Inner system clear
          es1 = "Outer";
          eo1 = GlobalMethods.roll1d() + 5;
          es2 = "Remote";
          eo2 = GlobalMethods.roll1d() + 11;
          break;
        }
        case 2: {//Outer system clear
          es1 = "Inner";
          eo1 = GlobalMethods.roll1d() - 1;
          es2 = "Remote";
          eo2 = GlobalMethods.roll1d() + 11;
          break;
        }
        case 3: {//Remote system clear
          es1 = "Inner";
          eo1 = GlobalMethods.roll1d() - 1;
          es2 = "Outer";
          eo2 = GlobalMethods.roll1d() + 5;
          break;
        }
      }
      es3 = null;
      eo3 = 0;
    }
    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="if (stars == 4)">
    if (stars == 4) {//pick all, include all}
      es1 = "Inner";
      eo1 = GlobalMethods.roll1d() - 1;
      es2 = "Outer";
      eo2 = GlobalMethods.roll1d() + 5;
      es3 = "Remote";
      eo3 = GlobalMethods.roll1d() + 11;
    }
    //</editor-fold>
    //<editor-fold defaultstate="collapsed" desc="ADD STARS">
    //PLACE STARS IN ORBITS
    try {
      eo1 = nearestTo(eo1);
      orbit[eo1] += "STAR " + jcb4Star.getItemAt(1).toString();// + getStarData(Stars[1]);
      if (orbit[eo1].contains("BD")) {
        orbit[eo1] += "\tBrown Dwarf\tS=24";
      }
      //<editor-fold defaultstate="collapsed" desc="DEBUG">
      if (DEBUG) {
        System.out.println("o2" + " = " + eo1);
        System.out.println("" + eo1 + " = " + orbit[eo1]);
      }
      //</editor-fold>
      eo2 = nearestTo(eo2);
      orbit[eo2] += "STAR " + jcb4Star.getItemAt(2).toString();// + getStarData(Stars[2]);
      if (orbit[eo2].contains("BD")) {
        orbit[eo2] += "\tBrown Dwarf\tS=24";
      }
      //<editor-fold defaultstate="collapsed" desc="DEBUG">
      if (DEBUG) {
        System.out.println("o3" + " = " + eo2);
        System.out.println("" + eo2 + " = " + orbit[eo2]);
      }
      //</editor-fold>
      eo3 = nearestTo(eo3);
      orbit[eo3] += "STAR " + jcb4Star.getItemAt(3).toString();// + getStarData(Stars[3]);
      if (orbit[eo3].contains("BD")) {
        orbit[eo3] += "\tBrown Dwarf\tS=24";
      }
      //<editor-fold defaultstate="collapsed" desc="DEBUG">
      if (DEBUG) {
        System.out.println("o4" + " = " + eo3);
        System.out.println("" + eo3 + " = " + orbit[eo3]);
      }
      //</editor-fold>
    } catch (Exception e) {
    }
    //</editor-fold>
    //ADD OTHER PARTS OF SYSTEM
    addMainworld();
    showHab(Stars[0]);
    addGGs();
    addPBs();
    addOthers();
    int starss = 1;
    for (int j = min; j < orbits; j++) {
      orbit[j] = fixRingMoons(j);//Put alphabetically by orbits range
      jta4Orb.append(j + " = " + orbit[j] + CRLF);
      if (orbit[j].startsWith("STAR")) {
        if (!orbit[j].contains("BD")) {
          addStarDetail(j, jcb4Star.getItemAt(starss).toString() + CRLF);
          starss += 1;
        } else {
          starss += 1;
        }
      }
    }
    int syscount = jcb4Star.getItemCount();
    for (int j = 0; j < Integer.parseInt("" + jcb4Star.getItemCount()); j++) {
      if (jcb4Star.getItemAt(j).toString().contains("BD")) {
        syscount -= 1;
      }
    }
    jta4Orb.append("Unfilled = " + countUnused() + CRLF);
    jta4Orb.append("syscount = " + syscount + CRLF);
    try {
      int s = Stars.length - 1;
      int u = countUnused();
      int w = Integer.parseInt(data[11].substring(4));
      int sum = s + u + w;
      if (sum < orbits) {
        //        xcreateOrbitDetail();
        //createOrbitDetail();
        //<editor-fold defaultstate="collapsed" desc="DEBUG">
        if (DEBUG) {
          System.out.print("5332" + " = " + "createOrbitDetail" + CRLF);
        }
        //</editor-fold>
      }
    } catch (Exception e) {
      System.out.println("4573 createOrbitDetail()" + " = " + e.toString());
    }
    int count = 0;
    min = Integer.parseInt(getMinOrbit(jcb4Star.getItemAt(0).toString()));
    jta4Orb.append("min" + " = " + min + CRLF);
    for (int j = min; j < orbit.length; j++) {
      if (!"".equals(orbit[j])) {
        count += 1;
      }
    }
    jta4Orb.append(getW(null) + CRLF);
    jta4Orb.append("Extra Stars = " + (Stars.length - 1) + CRLF);
    jta4Orb.append("count" + " = " + count + CRLF);
    String txt = jta4All.getText();
//    createSystemPic(jcb4Star.getSelectedItem().toString());
//        GlobalMethods.saveTextFile("C:/", "out", ".txt", txt);

  }
  //</editor-fold>

  private void createSystemPic(String star) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = true;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
      try {
        System.out.println("star = " + star);
      } catch (Exception e) {
        System.out.println("star is wrong 10882");
      }
    }
    //</editor-fold>

//    for (int j = 0; j < orbit.length; j++) {
//      orbit[j] = "";
//    }
    getStar();
    int s = 600;
    int d = s / orbits;
    int n = 0;
    BufferedImage bi = new BufferedImage(s, s, TYPE_INT_ARGB);
    Graphics g = bi.createGraphics();//panel4Orbit.getGraphics();//
    Graphics2D g2 = (Graphics2D) g;
    col = Color.white;
    g2.setColor(col);
    g2.fillRect(0, 0, s, s);
    col = getStarCol();
    g2.setColor(col);
//        int[] siz = {10,20,30,40,50,60};
    int size = 40;
    switch (star.substring(2).trim()) {
      case "Ia": {
        size = 240;
        break;
      }
      case "Ib": {
        size = 200;
        break;
      }
      case "II": {
        size = 160;
        break;
      }
      case "III": {
        size = 120;
        break;
      }
      case "IV": {
        size = 80;
        break;
      }
      case "V": {
        size = 40;
        break;
      }
      default: {
        size = 40;
        break;
      }
    }
    g2.fillOval(-(size / 2), -(size / 2), size, size);
    col = Color.black;
    g2.setColor(col);
    g2.drawString(star, 15, 15);
    for (int j = 0; j < orbits; j++) {
      n = d * (1 + j);
      int hz = Integer.parseInt(GlobalMethods.getHZ(jcb4Star.getSelectedItem()
              .toString()));
      if (!"".equals(orbit[j])) {
        if (j < hz - 1) {
          g2.setColor(Color.red);
        } else if (j > hz + 1) {
          g2.setColor(Color.blue);
        } else {
          g2.setColor(Color.green);
        }
        g2.drawOval(-n, -n, 2 * n, 2 * n);
        g2.setColor(Color.lightGray);
        if (orbit[j].isEmpty()) {
          try {
            orbit[j] = "";
            System.out.println("j = " + j);
          } catch (Exception e) {
            System.out.println(" e = " + e);
          } finally {

          }
        }
        if (orbit[j].contains(CRLF)) {
          string = orbit[j].substring(0, orbit[j].indexOf("\n"));
        } else {
          string = orbit[j];
        }
        if (string.contains("Mainworld")) {
          g2.setColor(Color.black);
        }
        g2.drawString("" + j + " = " + string, 10, n + 10);
      }
    }
    int n1;
    int n2;
    int n3;
    int d1;
    int d2;
    int d3;
    n1 = getD1000Limit(Stars[jcb4Star.getSelectedIndex()]);
    d1 = d * (n1 + 1);
    g2.setColor(Color.gray);
    g2.fillRect(0, 0, d1, 5);
    g2.fillRect(0, 0, 5, d1);
    n2 = getD100Limit(Stars[jcb4Star.getSelectedIndex()]);
    d2 = d * (n2 + 1);
    g2.setColor(Color.blue);
    g2.fillRect(0, 0, d2, 5);
    g2.fillRect(0, 0, 5, d2);
    n3 = getD10Limit(Stars[jcb4Star.getSelectedIndex()]);
    if (n3 < 0) {
      n3 = 0;
    }
    d3 = d * (1 + n3);
    g2.setColor(Color.pink);
    g2.fillRect(0, 0, d3, 5);
    g2.fillRect(0, 0, 5, d3);
    try {
      File f = new File(Panel4T5Locator.getSysPath() + FS + jcb4Sys
              .getSelectedItem().toString().trim() + FS + jcb4Sys.getSelectedItem()
                      .toString().substring(0, 4) + "-Orbits.gif");
      ImageIO.write(bi, "gif", f);
    } catch (IOException ex1) {
      System.out.println("10912" + " = " + ex1);
    } finally {
      System.out.println("10915 = finally");
    }

  }

  public static void saveFullPic() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = true;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    jf.setSize(1260, 1000);
    File f = new File(Panel4T5Locator.getSysPath() + FS + jcb4Sys
            .getSelectedItem().toString().trim() + FS + jcb4Sys
                    .getSelectedItem().toString().substring(0, 4) + "-Maps.gif");
    Graphics g = panel4Sys.getGraphics();
    Robot r = null;
    try {
      r = new Robot();
    } catch (AWTException ex) {
      System.out.println("6345" + " = " + ex);
    }
    bi = r.createScreenCapture(new Rectangle(
            panel4Maps.getLocationOnScreen().x, panel4Sys.getLocationOnScreen().y, 600,
            600));
    try {
      ImageIO.write(bi, "gif", f);
    } catch (IOException ex1) {
      System.out.println("6352" + " = " + ex1);
    }
  }

  private static void saveJtas() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = true;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    String folder = "C://T5"
            + "/" + jcb4Sec.getSelectedItem().toString().trim()
            + "/" + jcb4Sub.getSelectedItem().toString().trim()
            + "/" + jcb4Sys.getSelectedItem().toString().trim()
            + "/" + jcb4Sys.getSelectedItem().toString().trim();
    String name = "";
    String ext = ".txt";
    String txt = "";
    int index = jcb4All.getSelectedIndex();
    for (int j = 0; j < jcb4All.getItemCount(); j++) {
      jcb4All.setSelectedIndex(j);
      name = jcb4All.getSelectedItem().toString().trim();
      txt = jta4All.getText();
//      Panel4Add.saveTextFile(folder, name, ext, txt);
    }
    jcb4All.setSelectedIndex(index);
  }

  public static void saveJtas(String Se, String Su, String Sy) {
    if (Panel4T5Locator.isRunning()) {
      jcb4Sec.setSelectedItem(Se);
      jcb4Sub.setSelectedItem(Su);
      jcb4Sys.setSelectedItem(Sy);
      saveJtas();
    }
  }

  private void loadOrbitPics() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = true;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
              .getMethodName());
    }
    //</editor-fold>
    BufferedImage bi = null;
    Graphics g = panel4Maps.getGraphics();
    File f;
    try {
      //Main orbital map
      f = new File(getSysPath() + FS + jcb4Sys.getSelectedItem().toString()
              .trim() + FS + jcb4Sys.getSelectedItem().toString()
                      .substring(0, 4) + "-Orbits.gif");//Maps.gif
      if (f.exists()) {
        bi = ImageIO.read(f);
        g.drawImage(bi, 0, 0, null);
      } else {
        createOrbitDetail();
        System.out.println("10999 = NO");
      }
      //SubSector map
      f = new File(getSysPath() + FS + jcb4Sys.getSelectedItem().toString()
              .trim() + FS + jcb4Sys.getSelectedItem().toString()
                      .substring(0, 4) + "-Subsector.gif");
      if (f.exists()) {
        bi = ImageIO.read(f);
        g.setColor(Color.white);
        g.fillRect(600 - bi.getWidth(), 0, bi.getWidth(), 250);
        g.setColor(Color.black);
        g.drawImage(bi, 600 - bi.getWidth(), 0, null);
        g.fillRect(600, 0, 600, 250);
      } else {
        System.out.println("11013 = NO");
      }
      //System Box
      g.drawLine(399, 0, 399, bi.getHeight());
      g.drawLine(400, bi.getHeight(), 600, bi.getHeight());
      f = new File(getSysPath() + FS + jcb4Sys.getSelectedItem().toString()
              .trim() + FS + jcb4Sys.getSelectedItem().toString()
                      .substring(0, 4) + "-System.gif");
      if (f.exists()) {
        bi = ImageIO.read(f);
        g.drawImage(bi, 400, 270, null);
      } else {
        System.out.println("11025 = NO");
      }
      g.drawLine(400, 270, 400, 470);
      g.drawLine(400, 270, 600, 270);
      g.drawLine(400, 470, 600, 470);
      //UWP Chart
      f = new File(getSysPath() + FS + jcb4Sys.getSelectedItem().toString()
              .trim() + FS + jcb4Sys.getSelectedItem().toString()
                      .substring(0, 4) + "-UWP.gif");
      if (f.exists()) {
        bi = ImageIO.read(f);
        g.drawImage(bi, 600 - bi.getWidth(), 600 - bi.getHeight(), null);
      } else {
        System.out.println("11038 = NO");
      }
      g.drawLine(600 - bi.getWidth(), 600 - bi.getHeight(), 600, 600 - bi
              .getHeight());
      g.drawLine(600 - bi.getWidth(), 600 - bi.getHeight(), 600 - bi.getWidth(),
              600);
    } catch (IOException ex) {
      System.out.println("11045" + " = " + ex.toString());
    }
    g.drawLine(0, 0, 600, 0);
    g.drawLine(600, 0, 600, 600);
    g.drawLine(600, 600, 0, 600);
    g.drawLine(0, 600, 0, 0);
  }

}
