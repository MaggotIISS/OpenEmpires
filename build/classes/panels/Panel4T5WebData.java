/*

 Copyright (C) 2014 Mark Ferguson



 This program is free software: you can redistribute it and/or modify

 it under the terms of the GNU General Public License as published by

 the Free Software Foundation, either version 3 of the License, or

 (at your option) any later version.



 This program is distributed in the hope that it will be useful,

 but WITHOUT ANY WARRANTY; without even the implied warranty of

 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 GNU General Public License for more details.



 You should have received a copy of the GNU General Public License

 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 */
package panels;

import static dbviewer.globals.GlobalVariables.CRLF;
import static dbviewer.globals.GlobalVariables.FS;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.util.Arrays;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;

/**
 <p>
 @author maggot
 */
public class Panel4T5WebData extends javax.swing.JPanel {

  /**
   JFrame
   */
  public static JFrame jf = new JFrame();
  private static JPanel jp = new JPanel();
  private static String trav = "http://travellermap.com/";
  private static String api = trav + "api";
  private static String data = trav + "data";
  private static String webpath = data + "/" + "Spinward%20Marches";
  private static String C = "C:/";
  private static String home = "/T5/";

  static String hdpath = C + home;
  //private static String hdpath = GlobalVariables.CB + home;

  private static int i = 0;
  private static ActionEvent ae;
  private static URI uri;
  private static URL url;
  private static MouseEvent me;
  private static int[] parts;
  private static String[] bits = null;
  private static int num = 0;
  private static int j = 0;

  int[] len;
  int start;
//  int start;
  int end = 0;

  //<editor-fold defaultstate="collapsed" desc="starthtml">
  private static String[] starthtml = {"<!DOCTYPE html>\n"
    + "<html>\n"
    + "  <head>\n"
    + "    <title>TODO:</title>\n"
    + "    <meta charset=\"UTF-8\">\n"
    + "    <meta name=\"viewport\" content=\"width=device-width\">\n"
    + "  </head>\n"
    + "  <body>\n"};
  //</editor-fold>
  //<editor-fold defaultstate="collapsed" desc="endhtml">
  private static String[] endhtml = {"\n"
    + "  </body>\n"
    + "</html>\n"};
  //</editor-fold>

  /**
   <p>
   @param string strings to start
   */
  public static void main(String[] string) {
    checkCreate();
    jp = new Panel4T5WebData();
    jf = new Frame4();
    jf.getContentPane().add(jp);
    jf.setSize(700, 200);
//    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    jLabel1.setForeground(Color.GREEN);
    jLabel2.setForeground(Color.GREEN);
//    setTitle();
//    subsecupdate.setVisible(false);
//    skyrig.setVisible(false);
    jf.setBackground(Color.black);
    jp.setBackground(Color.black);
    jp.setOpaque(true);
    jLabel3.setVisible(true);
//        jComboBox1.setSelectedItem("Spinward Marches");
    jf.setVisible(true);

    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    if (Panel4SubSector.isRunning()) {
      jf.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
    }
    jLabel3.setVisible(false);

  }

  /**
   Creates new form Panel42ndSurvey
   */
  @SuppressWarnings("unchecked")
  public Panel4T5WebData() {
    try {
      this.url = new URL(data);
    } catch (MalformedURLException ex) {
      System.out.println("ex = " + ex);
    }
    initComponents();
    downloadSectors();
    readWeb(data);
    sec2Combo();
    String[] secs = loadTextFile(hdpath, "Sectors", ".txt").split(CRLF);
    jcb4Sec.removeAllItems();
    for (int i = 0; i < secs.length; i++) {
      jcb4Sec.addItem(secs[i]);
    }
    jcb4Sec.setSelectedItem("Spinward Marches");
    auto.setVisible(false);
    worldTest.setVisible(false);
  }

  /**
   This method is called from within the constructor to initialize the form.
   WARNING: Do NOT modify this code. The content of this method is always
   regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    html = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jcb4Sec = new javax.swing.JComboBox();
    x = new javax.swing.JTextField();
    hex = new javax.swing.JTextField();
    y = new javax.swing.JTextField();
    let = new javax.swing.JTextField();
    sub = new javax.swing.JTextField();
    sec = new javax.swing.JTextField();
    jump = new javax.swing.JTextField();
    auto = new javax.swing.JLabel();
    sys = new javax.swing.JTextField();
    style = new javax.swing.JComboBox();
    scale = new javax.swing.JTextField();
    option = new javax.swing.JTextField();
    skyrig = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    subsecupdate = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    out = new javax.swing.JTextArea();
    jScrollPane4 = new javax.swing.JScrollPane();
    orig = new javax.swing.JList();
    jScrollPane7 = new javax.swing.JScrollPane();
    jScrollPane1 = new javax.swing.JScrollPane();
    sector = new javax.swing.JTextArea();
    jScrollPane9 = new javax.swing.JScrollPane();
    jScrollPane2 = new javax.swing.JScrollPane();
    sector1 = new javax.swing.JTextArea();
    jScrollPane10 = new javax.swing.JScrollPane();
    jTextArea1 = new javax.swing.JTextArea();
    jScrollPane11 = new javax.swing.JScrollPane();
    jTextArea2 = new javax.swing.JTextArea();
    jScrollPane3 = new javax.swing.JScrollPane();
    jta = new javax.swing.JTextArea();
    worldTest = new javax.swing.JLabel();
    jScrollPane5 = new javax.swing.JScrollPane();
    jTextArea3 = new javax.swing.JTextArea();
    jScrollPane6 = new javax.swing.JScrollPane();
    jTextArea4 = new javax.swing.JTextArea();

    jLabel1.setText("J9");
    jLabel1.setToolTipText("click to view");
    jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jLabel1MouseClicked(evt);
      }
    });

    jLabel4.setText("data");
    jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jLabel4MouseClicked(evt);
      }
    });

    html.setText("to .html");
    html.setToolTipText("Write web page");
    html.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        htmlMouseClicked(evt);
      }
    });

    setBackground(new java.awt.Color(0, 0, 0));

    jLabel3.setForeground(java.awt.Color.green);
    jLabel3.setText("download all");
    jLabel3.setToolTipText("click and wait OR select in combo");
    jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jLabel3MouseClicked(evt);
      }
    });

    jcb4Sec.setToolTipText("select sector");
    jcb4Sec.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jcb4SecMouseClicked(evt);
      }
    });
    jcb4Sec.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jcb4SecActionPerformed(evt);
      }
    });

    x.setText("0");
    x.setToolTipText("Sector X");

    hex.setText("1910");
    hex.setToolTipText("Sector wide coordinates");

    y.setText("0");
    y.setToolTipText("Sector Y");

    let.setText("C");
    let.setToolTipText("Subsector Letter");

    sub.setText("XXX");
    sub.setToolTipText("Subsector");
    sub.setEnabled(false);

    sec.setText("XXX");
    sec.setToolTipText("Sector");
    sec.setEnabled(false);

    jump.setText("9");
    jump.setToolTipText("Jump Range");

    auto.setForeground(java.awt.Color.green);
    auto.setText("auto");
    auto.setToolTipText("write 1 world");
    auto.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        autoMouseClicked(evt);
      }
    });

    sys.setText("Regina");

    style.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "poster", "print", "atlas", "candy" }));
    style.setToolTipText("Style");
    style.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        styleActionPerformed(evt);
      }
    });

    scale.setText("91");
    scale.setToolTipText("Scale(64)");

    option.setText("58207 ");
    option.setToolTipText("Options");
    option.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        optionActionPerformed(evt);
      }
    });

    skyrig.setForeground(java.awt.Color.green);
    skyrig.setText("SkyRig");
    skyrig.setToolTipText("select 7 worlds");
    skyrig.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        skyrigMouseClicked(evt);
      }
    });

    jLabel2.setForeground(java.awt.Color.green);
    jLabel2.setText("offline");
    jLabel2.setToolTipText("online/offline");
    jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jLabel2MouseClicked(evt);
      }
    });

    subsecupdate.setForeground(java.awt.Color.green);
    subsecupdate.setText("fromSub");
    subsecupdate.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        subsecupdateMouseClicked(evt);
      }
    });

    jLabel5.setForeground(java.awt.Color.green);
    jLabel5.setText("toTxt");
    jLabel5.setToolTipText("Create .txt files");
    jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jLabel5MouseClicked(evt);
      }
    });

    out.setColumns(20);
    out.setRows(1);
    out.setToolTipText("out");

    orig.setModel(new javax.swing.AbstractListModel() {
      String[] strings = { "   <iframe", "   src=\"http://travellermap.com/iframe.htm?sector=Spinward%20Marches&hex=1910\"", "   style=\"width: 900px; height: 700px; border: solid 1px black;\">", "   </iframe>", "   <img src=\"http://www.travellermap.com/?x=-97.004&y=73&scale=120\">", "   <img src=\"http://travellermap.com/api/jumpmap?sector=Spinward%20Marches&hex=1910&jump=9&scale=120&options=58207&style=poster\">", "   <img src=\"http://travellermap.com/api/jumpmap?sector=Spinward%20Marches&hex=1910&jump=9&scale=120&options=58207&style=candy\">", "   <img src=\"http://travellermap.com/api/jumpmap?sector=Spinward%20Marches&hex=1910&jump=9&scale=120&options=58207&style=atlas\">", "   <img src=\"http://travellermap.com/api/jumpmap?sector=Spinward%20Marches&hex=1910&jump=9&scale=120&options=58207&style=print\">", "   http://www.travellermap.com/world?sector=Spinward%20Marches&hex=1910", "   http://travellermap.com/api/poster?sector=spin&scale=120&options=58207&style=atlas", "   http://travellermap.com/api/coordinates?sx=-4&sy=-1", "   http://travellermap.com/api/coordinates?sx=-4&sy=-1&hx=19&hy=10", "   http://travellermap.com/api/coordinates?sector=Spinward%20Marches&hex=1910", "   http://travellermap.com/api/coordinates?sector=Spinward%20Marches", "   http://travellermap.com/api/credits?sector=Spinward%20Marches &scale=120&options=58207 &style=atlas", "   http://travellermap.com/api/credits?sector=Spinward%20Marches&hex=1910", "   http://travellermap.com/api/credits?sx=-4&sy=-1", "   http://travellermap.com/api/credits?sx=-4&sy=-1&hx=19&hy=10", "   http://travellermap.com/api/credits?x=-4&y=-1", "   http://www.travellermap.com/api/credits?x=-110&y=-70", "   http://travellermap.com/api/sec?sector=Spinward%20Marches", "   http://travellermap.com/api/sec?sector=Spinward%20Marches&hex=1910", "   http://travellermap.com/api/sec?sx=-4&sy=-1", "   http://travellermap.com/api/metadata?sector=Spinward%20Marches", "   http://travellermap.com/api/metadata?sx=-4&sy=-1", "   http://www.travellermap.com/api/metadata?sector=Spinward%20Marches", "   http://www.travellermap.com/api/msec?sector=Spinward%20Marches", "   http://www.travellermap.com/api/universe?era=1000", "   http://www.travellermap.com/api/tile?x=-24.5&y=-18&scale=120&options=887&style=poster", "   http://travellermap.com/api/poster?sector=Spinward%20Marches", "   http://travellermap.com/api/poster?sector=Spinward%20Marches", "   http://travellermap.com/api/jumpmap?x=-4&y=-1", "   http://travellermap.com/api/jumpmap?sx=-4&-1=sy&hx=19&hy=10", "   http://travellermap.com/api/jumpmap?sector=Spinward%20Marches&hex=1910", "   http://travellermap.com/api/msec?sector=Spinward%20Marches", "   http://travellermap.com/api/msec?sx=-4&sy=-1", "   http://travellermap.com/api/jumpworlds?x=-4&y=-1", "   http://travellermap.com/api/jumpworlds?sx=-4&sy=-1&hx=19&hy=10", "   http://travellermap.com/api/jumpworlds?sector=Spinward%20Marches&hex=1910", "   http://travellermap.com/api/search?q=terra", "   http://travellermap.com/api/universe", "   http://www.travellermap.com/api/coordinates?sector=Spinward%20Marches&hex=1910", "   http://travellermap.com/data", "   http://travellermap.com/data/Spinward%20Marches/image", "   http://travellermap.com/data/Spinward%20Marches/A/image", "   http://travellermap.com/data/Spinward%20Marches/B/image", "   http://travellermap.com/data/Spinward%20Marches/C/image", "   http://travellermap.com/data/Spinward%20Marches/D/image", "   http://travellermap.com/data/Spinward%20Marches/E/image", "   http://travellermap.com/data/Spinward%20Marches/F/image", "   http://travellermap.com/data/Spinward%20Marches/G/image", "   http://travellermap.com/data/Spinward%20Marches/H/image", "   http://travellermap.com/data/Spinward%20Marches/I/image", "   http://travellermap.com/data/Spinward%20Marches/J/image", "   http://travellermap.com/data/Spinward%20Marches/K/image", "   http://travellermap.com/data/Spinward%20Marches/L/image", "   http://travellermap.com/data/Spinward%20Marches/M/image", "   http://travellermap.com/data/Spinward%20Marches/N/image", "   http://travellermap.com/data/Spinward%20Marches/O/image", "   http://travellermap.com/data/Spinward%20Marches/P/image", "   http://travellermap.com/data/Spinward%20Marches/image", "   http://travellermap.com/data/Spinward%20Marches", "   http://travellermap.com/data/Spinward%20Marches/tab", "   http://travellermap.com/data/Spinward%20Marches/sec", "   http://travellermap.com/data/Spinward%20Marches/metadata", "   http://travellermap.com/data/Spinward%20Marches/msec", "   http://travellermap.com/data/Spinward%20Marches/image", "   http://travellermap.com/data/Spinward%20Marches/coordinates", "   http://travellermap.com/data/Spinward%20Marches/credits", "   http://travellermap.com/data/Spinward%20Marches/A", "   http://travellermap.com/data/Spinward%20Marches/B", "   http://travellermap.com/data/Spinward%20Marches/C", "   http://travellermap.com/data/Spinward%20Marches/D", "   http://travellermap.com/data/Spinward%20Marches/E", "   http://travellermap.com/data/Spinward%20Marches/F", "   http://travellermap.com/data/Spinward%20Marches/G", "   http://travellermap.com/data/Spinward%20Marches/H", "   http://travellermap.com/data/Spinward%20Marches/I", "   http://travellermap.com/data/Spinward%20Marches/J", "   http://travellermap.com/data/Spinward%20Marches/K", "   http://travellermap.com/data/Spinward%20Marches/L", "   http://travellermap.com/data/Spinward%20Marches/M", "   http://travellermap.com/data/Spinward%20Marches/N", "   http://travellermap.com/data/Spinward%20Marches/O", "   http://travellermap.com/data/Spinward%20Marches/P", "   http://travellermap.com/data/Spinward%20Marches/c/tab", "   http://travellermap.com/data/Spinward%20Marches/c/sec", "   http://travellermap.com/data/Spinward%20Marches/c/image", "   http://travellermap.com/data/Spinward%20Marches/1910/coordinates", "   http://travellermap.com/data/Spinward%20Marches/1910/credits", "   http://travellermap.com/data/Spinward%20Marches/1910/jump/9", "   http://travellermap.com/data/Spinward%20Marches/1910/jump/9/image", "   http://travellermap.com/data/Spinward%20Marches/coordinates", "   http://travellermap.com/data/Spinward%20Marches/1910/coordinates", "   http://travellermap.com/data/Spinward%20Marches/credits", "   http://travellermap.com/data/Spinward%20Marches/1910/credits", "   http://travellermap.com/data/Spinward%20Marches", "   http://travellermap.com/data/Spinward%20Marches/sec", "   http://travellermap.com/data/Spinward%20Marches/tab", "   http://travellermap.com/data/Spinward%20Marches/c", "   http://travellermap.com/data/Spinward%20Marches/c/sec", "   http://travellermap.com/data/Spinward%20Marches/c/tab", "   http://travellermap.com/data/Spinward%20Marches/metadata", "   http://travellermap.com/data/Spinward%20Marches/msec", "   http://travellermap.com/data/Spinward%20Marches/1910/jump/9", "   http://travellermap.com/data/Spinward%20Marches/1910/jump/9/image", "   http://travellermap.com/data" };
      public int getSize() { return strings.length; }
      public Object getElementAt(int i) { return strings[i]; }
    });
    orig.setToolTipText("orig");
    orig.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        origMouseClicked(evt);
      }
    });
    jScrollPane4.setViewportView(orig);

    sector.setColumns(20);
    sector.setRows(5);
    sector.setToolTipText("sector");
    sector.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        sectorMouseClicked(evt);
      }
    });
    jScrollPane1.setViewportView(sector);

    jScrollPane7.setViewportView(jScrollPane1);

    sector1.setColumns(20);
    sector1.setRows(5);
    sector1.setToolTipText("sector1");
    sector1.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        sector1MouseClicked(evt);
      }
    });
    jScrollPane2.setViewportView(sector1);

    jScrollPane9.setViewportView(jScrollPane2);

    jTextArea1.setColumns(20);
    jTextArea1.setRows(5);
    jTextArea1.setToolTipText("jTextArea1");
    jScrollPane10.setViewportView(jTextArea1);

    jTextArea2.setColumns(20);
    jTextArea2.setRows(5);
    jTextArea2.setToolTipText("jTextArea2");
    jTextArea2.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jTextArea2MouseClicked(evt);
      }
    });
    jTextArea2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
      public void propertyChange(java.beans.PropertyChangeEvent evt) {
        jTextArea2PropertyChange(evt);
      }
    });
    jScrollPane11.setViewportView(jTextArea2);

    jta.setColumns(20);
    jta.setRows(5);
    jta.setToolTipText("jta");
    jta.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jtaMouseClicked(evt);
      }
    });
    jScrollPane3.setViewportView(jta);

    worldTest.setForeground(java.awt.Color.green);
    worldTest.setText("worldTest");
    worldTest.setToolTipText("toSecs");
    worldTest.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        worldTestMouseClicked(evt);
      }
    });

    jTextArea3.setColumns(20);
    jTextArea3.setRows(5);
    jTextArea3.setToolTipText("jTextArea3");
    jScrollPane5.setViewportView(jTextArea3);

    jTextArea4.setColumns(20);
    jTextArea4.setLineWrap(true);
    jTextArea4.setRows(5);
    jTextArea4.setToolTipText("jTextArea4");
    jTextArea4.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jTextArea4MouseClicked(evt);
      }
    });
    jScrollPane6.setViewportView(jTextArea4);
    jTextArea4.getAccessibleContext().setAccessibleParent(jScrollPane6);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
          .addComponent(out, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
          .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
          .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
          .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE))
        .addGap(0, 0, 0)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane10)
          .addComponent(jScrollPane5)
          .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
          .addComponent(jScrollPane11))
        .addContainerGap())
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jcb4Sec, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(y, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(sec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(sub, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(let, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(hex, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jump, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(sys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(layout.createSequentialGroup()
            .addComponent(style, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(scale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(subsecupdate)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(auto)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(skyrig)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(worldTest)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel5)
          .addComponent(jLabel3))
        .addGap(0, 125, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jcb4Sec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(let, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(hex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(sub, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(sec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(y, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jump, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(sys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel2)
          .addComponent(jLabel3))
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(auto)
          .addComponent(style, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(scale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(option, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(skyrig)
          .addComponent(subsecupdate)
          .addComponent(worldTest)
          .addComponent(jLabel5))
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jScrollPane10)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane11)
            .addGap(9, 9, 9)
            .addComponent(jScrollPane5)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane6)
            .addGap(36, 36, 36))
          .addGroup(layout.createSequentialGroup()
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(out, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void jcb4SecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb4SecActionPerformed
    jta.setText("");
    sector.setText("");
    if (jcb4Sec.getSelectedItem() != null) {
      if (jLabel2.getText() == "online") {
        //readWeb(data + FS + jComboBox1.getSelectedItem().toString() + FS + "tab");
        readWeb(data + FS + jcb4Sec.getSelectedItem().toString());
        save(webpath);
      } else {
        readHD(webpath);
      }
      try {
        setTitle();
        String[] c = jf.getTitle().split(",");
        x.setText(c[0]);
        y.setText(c[1]);
        sec.setText(c[2]);
      } catch (Exception e) {
      }
      worldTestMouseClicked(me);
    }
  }//GEN-LAST:event_jcb4SecActionPerformed

  private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
  }//GEN-LAST:event_jLabel1MouseClicked

  private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
    if (jLabel2.getText() == "offline") {
      jLabel2.setText("online");
      jLabel3.setVisible(true);
    } else {
      jLabel2.setText("offline");
      jLabel3.setVisible(false);
    }
  }//GEN-LAST:event_jLabel2MouseClicked

  private void sectorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sectorMouseClicked
    clear(evt, sector);
  }//GEN-LAST:event_sectorMouseClicked

  private void jtaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtaMouseClicked
    clear(evt, jta);
  }//GEN-LAST:event_jtaMouseClicked

  private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
    downloadSectors();
  }//GEN-LAST:event_jLabel3MouseClicked

  private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
    if (jLabel4.getText() == "api") {
      jLabel4.setText("data");
    } else {
      jLabel4.setText("api");
    }
  }//GEN-LAST:event_jLabel4MouseClicked

  private void sector1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sector1MouseClicked
    clear(evt, sector1);
  }//GEN-LAST:event_sector1MouseClicked

  private void origMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_origMouseClicked
    out.setText(orig.getSelectedValue().toString().replace("Spinward%20Marches",
      sec.getText()).trim()
      .replace("/c/", "/" + Panel4T5WebData.let.getText() + "/")
      .replace("1910", Panel4T5WebData.hex.getText())
      .replace("sx=-4", "sx=" + Panel4T5WebData.x.getText())
      .replace("sy=-1", "sy=" + Panel4T5WebData.y.getText())
      .replace("hx=19", "hx=" + Panel4T5WebData.hex.getText().substring(0, 2))
      .replace("hy=10", "hy=" + Panel4T5WebData.hex.getText().substring(2, 4))
      .replace("jump/9", "jump/" + Panel4T5WebData.jump.getText())
      .replace("&subsector=C", "&subsector=" + let.getText())
    );
    if (out.getText().endsWith("/c")) {
      out.setText(out.getText().replace("/c", "/" + Panel4T5WebData.let
        .getText()));
    }
    if (out.getText().contains("q=terra")) {
      out.setText(out.getText().replace("q=terra", "q=" + sys.getText()));
    }
    if (out.getText().contains("style=poster")) {
      out.setText(out.getText().replace("&style=poster", "&style=" + style
        .getSelectedItem().toString()));
    }
    if (out.getText().contains("scale=64")) {
      out.setText(out.getText()
        .replace("&scale=64", "&scale=" + scale.getText()));
    }
    if (out.getText().contains("options=887")) {
      out.setText(out.getText().replace("&options=887", "&options=" + option
        .getText()));
    }
    if (i == 3 | i == 7) {
      out.append("<br>");
    }
    if (i > 7) {
      out.setText("<a href=\"" + out.getText() + "\">" + out.getText() + "<br>");
    } else {
      out.setText(out.getText());
    }
  }//GEN-LAST:event_origMouseClicked

  private void autoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_autoMouseClicked
    sector1.setText("");
    //jComboBox1.setSelectedItem("Spinward Marches");
//    for (int j = 0; j < starthtml.length; j++) {
//      sector1.append(starthtml[j]);
//    }
    for (i = 0; i < orig.getModel().getSize(); i++) {
      orig.setSelectedIndex(i);
      origMouseClicked(me);
      sector1.append(out.getText() + CRLF);
    }
//    for (int j = 0; j < endhtml.length; j++) {
//      sector1.append(endhtml[j]);
//    }
    htmlMouseClicked(me);
  }//GEN-LAST:event_autoMouseClicked

  private void styleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_styleActionPerformed
//    autoMouseClicked(me);
  }//GEN-LAST:event_styleActionPerformed

  private void skyrigMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_skyrigMouseClicked
    String s = "";
    jump.setText("9");
    scale.setText("64");
    style.setSelectedIndex(0);
    sector1.setText("");
// select worlds in SkyRig Route
    //Regina
    let.setText("C");
    hex.setText("1910");
    sys.setText("Regina");
    autoMouseClicked(me);
    s += sector1.getText() + CRLF + CRLF + CRLF;
    htmlMouseClicked(me);
    //Roup
    let.setText("C");
    hex.setText("2007");
    sys.setText("Roup");
    autoMouseClicked(me);
    s += sector1.getText() + CRLF + CRLF + CRLF;
    htmlMouseClicked(me);
    //Feri
    let.setText("C");
    hex.setText("2005");
    sys.setText("Feri");
    autoMouseClicked(me);
    s += sector1.getText() + CRLF + CRLF + CRLF;
    htmlMouseClicked(me);
    //Boughene
    let.setText("C");
    hex.setText("1904");
    sys.setText("Boughene");
    autoMouseClicked(me);
    s += sector1.getText() + CRLF + CRLF + CRLF;
    htmlMouseClicked(me);
    //Efate
    let.setText("C");
    hex.setText("1705");
    sys.setText("Efate");
    autoMouseClicked(me);
    s += sector1.getText() + CRLF + CRLF + CRLF;
    htmlMouseClicked(me);
    //Lysen
    let.setText("B");
    hex.setText("1307");
    sys.setText("Lysen");
    autoMouseClicked(me);
    s += sector1.getText() + CRLF + CRLF + CRLF;
    htmlMouseClicked(me);
    //Jewell
    let.setText("B");
    hex.setText("1106");
    sys.setText("Jewell");
    autoMouseClicked(me);
    s += sector1.getText() + CRLF + CRLF + CRLF;

    sector1.append(s);
    sys.setText("Sky Rig");
    hex.setText("1910");
    let.setText("C");
    htmlMouseClicked(me);
  }//GEN-LAST:event_skyrigMouseClicked

  private void htmlMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_htmlMouseClicked
    String txt = sector1.getText();
    sector1.setText("");
    for (int j = 0; j < starthtml.length; j++) {
      sector1.append(starthtml[j]);
    }
    sector1.append(CRLF + txt + CRLF);
    for (int j = 0; j < endhtml.length; j++) {
      sector1.append(endhtml[j]);
    }
    sector1.setText(sector1.getText().replace("TODO:", sys.getText()));
    saveTextFile(C + home, sys.getText(), "html", sector1.getText());
  }//GEN-LAST:event_htmlMouseClicked

  private void subsecupdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subsecupdateMouseClicked
    try {
      String s = Panel4SubSector.jList1.getSelectedValue().toString();
      System.out.println("s = " + s);
      String sec = Panel4Locator.getSectorName();
      jcb4Sec.setSelectedItem(sec.toString());
      let.setText(Panel4Locator.getSubSector().substring(0, 1));
      hex.setText(s.substring(0, 4));
      sys.setText(s.substring(5));
    } catch (Exception e) {

    }
    htmlMouseClicked(me);
    autoMouseClicked(me);
  }//GEN-LAST:event_subsecupdateMouseClicked

  private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
    jTextArea1.setText("");
    jTextArea2.setText("");
    jTextArea3.setText("");
    String ss = "";
    String[] sss;
    int n = 0;
    try {
      for (int k = 0; k < jcb4Sec.getModel().getSize(); k++) {//10; k++) {//
        jcb4Sec.setSelectedIndex(k);
        jcb4SecActionPerformed(ae);
        sss = sector.getText().split(CRLF);
        String xy = sss[4].substring(2);
        String sec = jcb4Sec.getSelectedItem().toString();
        jTextArea1.append("# " + sec + "," + xy + CRLF);
        jTextArea2.append("# " + sec + "," + xy + CRLF);
        jTextArea3.append("# " + sec + "," + xy + CRLF);
        for (int j = 0; j < sss.length; j++) {
          if (sss[j].startsWith("# Name")) {
            jTextArea2.append("# " + sss[j].substring(8) + CRLF);
            jTextArea3.append(sss[j].substring(8) + CRLF);
          }
          if (sss[j].startsWith("# Subsector")) {
            jTextArea2.append("  " + sss[j].substring(12) + CRLF);
          }

          if ((sss[j] != "")
            & (!sss[j].startsWith("#")
            & (!sss[j].startsWith("-"))
            & (!sss[j].startsWith("Hex")))
            & (sss[j].length() > 0)) {
            ss += sss[j] + CRLF;
            jTextArea1.append(sss[j].toString() + CRLF);
          }
          n += sss[j].length();
        }
      }
    } catch (Exception e) {
    }
    saveTextFile(hdpath, "Subsectors", ".txt", jTextArea2.getText());
    saveTextFile(hdpath, "Worlds", ".txt", jTextArea1.getText());
    //saveTextFile(hdpath, "Names", ".txt", jTextArea3.getText());
  }//GEN-LAST:event_jLabel5MouseClicked

  private void worldTestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_worldTestMouseClicked
    subsecupdateMouseClicked(me);
    String[] lines = sector.getText().split(CRLF);
    if (lines.length > 0) {
      for (j = 0; j < lines.length; j++) {
        if (lines[j].contains("---- ")) {
          num = j;
          bits = lines[num].split(" ");
          parts = new int[bits.length];
          getSpaceInfo(lines[j]);
          break;
        }
      }

      jTextArea2.setText("");
      String string;
////    System.out.println("" + " = " + Panel4Locator.getSystem());
////      if (lines.length > 0) {
//      for (int k = num; k < lines.length; k++) {
//        if (lines[k].substring(5, 25).trim().equals(sys.getText())) {
//          start = 0;
//          end = 0;
//          string = lines[k];
//          for (i = 0; i < bits.length; i++) {
//            end = start + bits[i].length();
//            //Panel4T5DB.uwpsec[i] + " = " +
//            jTextArea2.append(start + "-" + end + " = " + string.substring(start, end) + CRLF);//
//            System.out.print(string.substring(start, end) + " ");
//            start += bits[i].length() + 1;
//            num += 1;
//          }
//          jTextArea2.append("" + CRLF);
//          System.out.println("worldTestMouseClicked");
//        }
//      }
    }
  }//GEN-LAST:event_worldTestMouseClicked

  private void jcb4SecMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcb4SecMouseClicked
    if (evt.getClickCount() > 1) {
      for (int k = 0; k < jcb4Sec.getItemCount(); k++) {
        jcb4Sec.setSelectedIndex(k);
        jcb4SecActionPerformed(ae);
      }
    }
  }//GEN-LAST:event_jcb4SecMouseClicked

  private void jTextArea2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea2MouseClicked
    if (evt.getClickCount() > 2) {
      jTextArea2.setText("");
    }
  }//GEN-LAST:event_jTextArea2MouseClicked

  private void jTextArea4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea4MouseClicked
    Panel4T5DB.main(new String[]{});
  }//GEN-LAST:event_jTextArea4MouseClicked

  private void jTextArea2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextArea2PropertyChange
//    Panel4SubSector.jTextArea3.setText(jTextArea2.getText());
  }//GEN-LAST:event_jTextArea2PropertyChange

  private void optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_optionActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel auto;
  static javax.swing.JTextField hex;
  private javax.swing.JLabel html;
  private static javax.swing.JLabel jLabel1;
  private static javax.swing.JLabel jLabel2;
  private static javax.swing.JLabel jLabel3;
  private static javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane10;
  private javax.swing.JScrollPane jScrollPane11;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JScrollPane jScrollPane5;
  private javax.swing.JScrollPane jScrollPane6;
  private javax.swing.JScrollPane jScrollPane7;
  private javax.swing.JScrollPane jScrollPane9;
  private javax.swing.JTextArea jTextArea1;
  private javax.swing.JTextArea jTextArea2;
  private javax.swing.JTextArea jTextArea3;
  private javax.swing.JTextArea jTextArea4;
  public static javax.swing.JComboBox jcb4Sec;
  private static javax.swing.JTextArea jta;
  static javax.swing.JTextField jump;
  static javax.swing.JTextField let;
  private javax.swing.JTextField option;
  private javax.swing.JList orig;
  private javax.swing.JTextArea out;
  private javax.swing.JTextField scale;
  static javax.swing.JTextField sec;
  private javax.swing.JTextArea sector;
  private javax.swing.JTextArea sector1;
  private static javax.swing.JLabel skyrig;
  private javax.swing.JComboBox style;
  static javax.swing.JTextField sub;
  private javax.swing.JLabel subsecupdate;
  private javax.swing.JTextField sys;
  private javax.swing.JLabel worldTest;
  static javax.swing.JTextField x;
  static javax.swing.JTextField y;
  // End of variables declaration//GEN-END:variables

  private void getSpaceInfo(String string) {
//    System.out.println("string" + " = " + string + " = " + string.length());
    bits = string.split(" ");
//    System.out.println("bits.length" + " = " + bits.length);
    len = new int[bits.length];
    start = 0;
    for (int i = 0; i < bits.length; i++) {
      len[i] = bits[i].length();
      end = start + bits[i].length();
//      System.out.println(start + "-" + (len[i] + start));
//      jTextArea1.append(start + "-" + end + " = " + string.substring(start, end) + CRLF);
      start += bits[i].length() + 1;
    }
//    System.out.println("string.length()" + " = " + string.length());
  }

  void readWeb(String wp) {
    try {
      webpath = fix(wp);
      url = new URL(webpath);
      URLConnection myURLConnection = null;
      try {
        myURLConnection = url.openConnection();
      } catch (IOException ex) {
      }
      myURLConnection.connect();
      URLConnection u;
      u = url.openConnection();
      BufferedReader in;
      in = new BufferedReader(new InputStreamReader(u.getInputStream()));
      String inputLine;
      while ((inputLine = in.readLine()) != null) {
        sector.append(inputLine + CRLF);
      }
      in.close();
    } catch (MalformedURLException ex) {
    } catch (IOException ex) {
    }
    readInfo();
  }

  @SuppressWarnings("unchecked")
  private void sec2Combo() {
    String[] parts;
    String[] lines = sector.getText().split(",");
    DefaultComboBoxModel cbm = new DefaultComboBoxModel();
    for (int i = 0; i < lines.length; i++) {
      lines[i] = (lines[i].
        replace("[", "").
        replace("]", "").
        replace("(", "").
        replace(")", "").
        replace("{", "").
        replace("}", "").
        replace("\"", "").
        replace("\\", "").
        replace("//", "/").
        replace(":", ""));
      if (lines[i].startsWith("Name")) {
        String a = lines[i].substring(9);
        jcb4Sec.addItem(a);
      }
    }
    cbm = (DefaultComboBoxModel) jcb4Sec.getModel();
    String[] strs = new String[cbm.getSize()];
    for (int i = 0; i < cbm.getSize(); i++) {
      strs[i] = (String) cbm.getElementAt(i);
    }
    Arrays.sort(strs);
    cbm.removeAllElements();
    for (int i = 0; i < strs.length; i++) {
      cbm.addElement(strs[i]);
    }
    jcb4Sec.setModel(cbm);
    jta.setText("");
    sector.setText("");
    String sectors = "";
    for (int i = 0; i < cbm.getSize(); i++) {
      sector.append(cbm.getElementAt(i).toString() + CRLF);
      sectors += cbm.getElementAt(i).toString() + CRLF;
    }
    saveTextFile(hdpath, "Sectors", ".txt", sectors);
  }

  private static String fix(String webpath) {
    String search = " ";
    String rep = "%20";
    webpath = (webpath.replace(search, rep).replace("\\", "/"));
    System.out.println("webpath = " + webpath);
    return webpath;
  }

  private void readInfo() {
    jta.setText("");
    String[] lines = sector.getText().split("\n");
    for (int i = 0; i < lines.length; i++) {
      if (lines[i].startsWith("#")) {
        jta.append(lines[i] + CRLF);
      }
    }
  }

  private void save(String s) {
//    int start = fix(s).lastIndexOf("/") + 1;
//    int end = fix(s).length();
    System.out.println("Save " + webpath);
    if (jcb4Sec.getSelectedItem() != null) {
      String savepath = hdpath + (jcb4Sec.getSelectedItem().toString().replace(
        "/", "\\"));
      System.out.println("savepath = " + savepath.replace("/", "\\"));
      saveTextFile(hdpath, jcb4Sec.getSelectedItem().toString(), ".sec", sector
        .getText());
    }
  }

  private void downloadSectors() {
    for (int i = 0; i < jcb4Sec.getModel().getSize(); i++) {
      jcb4Sec.setSelectedIndex(i);
      readWeb(jcb4Sec.getSelectedItem().toString());
    }
  }

  private void readHD(String web) {
    String path = jcb4Sec.getSelectedItem().toString();
    //String out = hdpath.replace("/", FS) + path + ".sec";
    sector.setText(loadTextFile(hdpath.replace("/", FS), path, ".sec"));
    readInfo();
  }

  private void clear(MouseEvent evt, JTextArea jt) {
    if (evt.getClickCount() > 1) {
      jt.setText("");
    }
  }

  private static void setTitle() {
    try {
      String[] all = jta.getText().split(CRLF);
      String[] d = all[3].split(",");
      //jf.setTitle(d[0].substring(2) + "," + d[1] + "," + jComboBox1.getSelectedItem().toString());
      jf.setTitle(d[0].substring(2) + "," + d[1] + "," + all[2].substring(2));
    } catch (Exception e) {
    }
  }

  private static void checkCreate() {
    File f = new File(C + home);
    if (!f.exists()) {
      f.mkdir();
    }
  }

  static String getTitle() {
    return jf.getTitle().toString();
  }

  /**
   <p>
   @param folder folder
   @param name   name
   @param ext    ext
   @param txt    txt
   */
  public static void saveTextFile(String folder, String name, String ext,
    String txt) {
//    //<editor-fold defaultstate="collapsed" desc="DEBUG">
//    boolean DEBUG = false;
//    if (DEBUG) { // true or false
//      System.out.print(globals.GlobalMethods.comment("=", 20));
//      System.out.println("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());
//      System.out.print(globals.GlobalMethods.comment("-", 20));
//    }
////</editor-fold>
    String string;
    string = null;
    //JOptionPane.showMessageDialog(null, string);
    try {
      string = folder + FS + name + "." + ext.toLowerCase();
      string = string.replace(FS + FS, FS);
      string = string.replace("..", ".");
//      JOptionPane.showMessageDialog(null, string);
      try (PrintWriter out = new PrintWriter(new FileWriter(new File(string)))) {
        out.print(txt);
        out.close();
      }
    } catch (IOException ex) {
      //System.out.println("" + " = " + ex);
    }
  }

  /**
   <p>
   @param folder folder
   @param name   name
   @param ext    ext
   @return String of text (whole file)
   */
  public static String loadTextFile(String folder, String name, String ext) {
    //<editor-fold defaultstate="collapsed" desc="DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(dbviewer.globals.GlobalMethods.comment("=", 20));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
        .getMethodName());
      System.out.print(dbviewer.globals.GlobalMethods.comment("-", 20));
    }
//</editor-fold>
    String txt = "";
    try {
      String string = folder + FS + name + "." + ext;
      string = string.replace(FS + FS, FS);
      string = string.replace("..", ".");
      File f = new File(string);
      String[] lines = getLinesFromFile(f);
      for (String line : lines) {
        txt += line + CRLF;
//        System.out.println("i = " + i);
      }
    } catch (Exception e) {
      System.out.println("Exception" + " = " + e);
    }
    return txt;
  }

  /**
   <p>
   @param f file to load lines from
   @return text
   */
  public static String[] getLinesFromFile(File f) {
    String line;
    String[] lines = new String[dbviewer.globals.GlobalMethods.countLines(f)];
    int max = 0;
    int i = 0;
    try {
      BufferedReader in = new BufferedReader(new FileReader(f));
      try {
        while ((line = in.readLine()) != null) {
          //line = line.trim();
          lines[i++] = line;
        }
        in.close();

      } catch (IOException ex) {
        //Logger.getLogger(GlobalMethods.class.getName()).log(Level.SEVERE, null, ex);
      }
    } catch (FileNotFoundException ex) {
      //Logger.getLogger(GlobalMethods.class.getName()).log(Level.SEVERE, null, ex);
    }
    return lines;
  }

}
