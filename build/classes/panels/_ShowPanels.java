/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package panels;import static dbviewer.DBViewer.jfc;import dbviewer.globals.FilteredListing;import static dbviewer.globals.GlobalVariables.SRC;import java.awt.BorderLayout;import java.awt.Container;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.io.File;import java.util.logging.Level;import java.util.logging.Logger;import javax.swing.DefaultListModel;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JList;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener;/** <p> @author maggot.iiss */public class _ShowPanels {  static Frame4 af;  JList<String> jl;  JScrollPane jsp;  static JButton jb;  Panel4 jp;  Container contents;  DefaultListModel<String> dlm;  int total;  /**   <p>   @param args strings to start   */  public static void main(String[] args) {    _ShowPanels _showPanels = new _ShowPanels();  }  /**   _ShowPanels   */  public _ShowPanels() {    createOutputWindow();    searchPanels();    displayOutput();    jp.updateUI();  }  private void createOutputWindow() {    af = new Frame4();    af.setTitle(this.getClass().getCanonicalName());    af.setBounds(0, 300, 200, 700);    af.setLayout(new BorderLayout());    af.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);    jp = new Panel4();    jp.setLayout(new BorderLayout());    contents = af.getContentPane();    jl = new JList<>();    ListSelectionListener lsl = new ListSelectionListenerImpl();    MouseListener ml = new MouseListenerImpl();    jl.addListSelectionListener(lsl);    jl.addMouseListener(new MouseListenerImpl());    jsp = new JScrollPane(jl);    contents.add(jsp, "West");    jb = new JButton("OPEN");    ActionListener al = new ActionListenerImpl();    jb.addActionListener(al);    contents.add(jb, "South");    contents.add(jp, "Center");    //System.out.print("createOutputWindow complete");  }  private void searchPanels() {    String[] dirs = new String[]{      dbviewer.globals.GlobalVariables.JTPanels    };    String[] names;    String name;    dlm = new DefaultListModel<String>();    for (int i = 0; i < dirs.length; i++) {      names = FilteredListing.getFilteredListing(dirs[i], "java");      if ((names != null)) {        for (int j = 0; j < names.length; j++) {          name = names[j].substring(0, names[j].length() - 5);          dlm.add(j + total, name);        }        total += names.length;      }    }    //System.out.print("Total = " + total);    //System.out.print("searchPanels complete");  }  private void displayOutput() {    jl.setModel(dlm);    af.setVisible(true);    af.validate();    //System.out.print("displayOutput complete");  }  private static class ListSelectionListenerImpl implements    ListSelectionListener {    public ListSelectionListenerImpl() {    }    @Override    public void valueChanged(ListSelectionEvent e) {      if (!e.getValueIsAdjusting()) {        jfc.setCurrentDirectory(new File(SRC));        //int ret = jfc.showOpenDialog(af);      }    }  }  private static class MouseListenerImpl extends MouseAdapter {    public MouseListenerImpl() {    }    @Override    public void mouseClicked(MouseEvent e) {      if (e.getClickCount() == 2) {        //System.out.print("" + "DoubleClick\n");        jb.doClick();      } else {      }    }  }  private class ActionListenerImpl implements ActionListener {    public ActionListenerImpl() {    }    @Override    @SuppressWarnings("unchecked")    public void actionPerformed(ActionEvent e) {      JPanel jp2 = null;// = new panels.panAdvantages();      if (!jl.getValueIsAdjusting() && !jl.isSelectionEmpty()) {        String selected = jl.getSelectedValue().toString();        selected = "panels." + selected.substring(0, selected.length());        try {          JPanel pan = new Panel4(this.getClass().getName());          af.setTitle(jl.getSelectedValue().toString());          JFrame af = new Frame4(pan);          af.setTitle(jl.getSelectedValue().toString());          af.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);          Class<JPanel> cl = (Class<JPanel>) Class.forName(selected);          try {            // PLAN IS TO DISPLAY SELECTED PANEL ON FORM            // WHICH IS DONE LIKE            //JPanel jp2 = new jtrav.panels.panAdvantages(); //WORKS WITH ONE            //jp2 = (JPanel) ob; //WILL NOT WORK            //jp2 = new (JPanel) ob; //WILL NOT WORK            jp2 = cl.newInstance(); //YESSSSSSSSSSSSSSS!          } catch (InstantiationException | IllegalAccessException ex) {            Logger.getLogger(_ShowPanels.class.getName())              .log(Level.SEVERE, null, ex);          }          af.setContentPane(jp2);        } catch (ClassNotFoundException ex) {          Logger.getLogger(_ShowPanels.class.getName()).log(Level.SEVERE, null,            ex);        }      }    }  }}