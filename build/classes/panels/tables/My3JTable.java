/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package panels.tables;import javax.swing.JTable;import javax.swing.table.AbstractTableModel;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableColumn;import javax.swing.table.TableColumnModel;import javax.swing.table.TableModel;/** <p> @author maggot.iiss */public final class My3JTable extends JTable {  static DefaultTableModel dtm = new My0DefaultTableModel();  static AbstractTableModel atm = new My1AbstractTableModel();  static TableModel tm = new My2TableModel();  static JTable jt;  static TableColumnModel tcm = new My4TableColumnModel();  static TableColumn tc = new My5TableColumn();  private static String CRLF = System.lineSeparator();  /**   <p>   @param args strings to start   */  public static void main(String[] args) {    //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());    jt = new My3JTable();  }  /**   My3JTable   */  public My3JTable() {    super();    //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());    dtm.addColumn("ID");    dtm.addRow(new Object[]{"0,0"});    split();    showDefaultTableModel();    split();    showAbstractTableModel();    split();    showTableModel();    split();    showJTable();    split();    showTableColumnModel();    split();  }  /**   showDefaultTableModel   */  public void showDefaultTableModel() {    //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());    //System.out.print("dtm.getColumnName(0)" + " = " + dtm.getColumnName(0));    //System.out.print("dtm.toString()" + " = " + dtm.toString());    //System.out.print("dtm.equals(new My0DefaultTableModel())" + " = " + dtm.equals(new My0DefaultTableModel()));    //System.out.print("dtm.findColumn(\"ID\")" + " = " + dtm.findColumn("ID"));    //System.out.print("dtm.getClass()" + " = " + dtm.getClass());    //System.out.print("dtm.getColumnClass(0)" + " = " + dtm.getColumnClass(0));    //System.out.print("dtm.getColumnCount()" + " = " + dtm.getColumnCount());    //System.out.print("dtm.getDataVector()" + " = " + dtm.getDataVector());    //System.out.print("dtm.getRowCount()" + " = " + dtm.getRowCount());    //System.out.print("dtm.getValueAt(0, 0)" + " = " + dtm.getValueAt(0, 0));    //System.out.print("dtm.isCellEditable(0, 0)" + " = " + dtm.isCellEditable(0, 0));  }  /**   showAbstractTableModel   */  public void showAbstractTableModel() {    //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());    //System.out.print("atm.getColumnName(0)" + " = " + atm.getColumnName(0));    //System.out.print("atm.findColumn(\"ID\")" + " = " + atm.findColumn("ID"));    //System.out.print("atm.getClass()" + " = " + atm.getClass());    //System.out.print("atm.getColumnClass(0)" + " = " + atm.getColumnClass(0));    ////System.out.print("" + " = " + atm.getListeners(null));    //System.out.print("atm.getRowCount()" + " = " + atm.getRowCount());    //System.out.print("atm.getTableModelListeners()" + " = " + atm.getTableModelListeners());    //System.out.print("atm.isCellEditable(0, 0)" + " = " + atm.isCellEditable(0, 0));    ////System.out.print("" + " = " + atm.);  }  /**   showTableModel   */  public void showTableModel() {    //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());    //System.out.print("tm.getColumnName(0)" + " = " + tm.getColumnName(0));    //System.out.print("tm.toString()" + " = " + tm.toString());    //System.out.print("tm.getClass()" + " = " + tm.getClass());    //System.out.print("tm.getColumnClass(0)" + " = " + tm.getColumnClass(0));    //System.out.print("tm.getColumnCount()" + " = " + tm.getColumnCount());    //System.out.print("tm.getRowCount()" + " = " + tm.getRowCount());    //System.out.print("tm.getValueAt(0, 0)" + " = " + tm.getValueAt(0, 0));    //System.out.print("tm.isCellEditable(0, 0)" + " = " + tm.isCellEditable(0, 0));  }  /**   showJTable   */  public void showJTable() {    //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());//    //System.out.print("jt.getColumnName(0)" + " = " + jt.getColumnName(0));//    //System.out.print("jt.getName()" + " = " + jt.getName());//    //System.out.print("jt.getToolTipText()" + " = " + jt.getToolTipText());//    //System.out.print("jt.getUIClassID()" + " = " + jt.getUIClassID());//    //System.out.print("jt.toString()" + " = " + jt.toString());  }  /**   showTableColumnModel   */  public void showTableColumnModel() {    //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());  }  /**   showTableColumn   */  public void showTableColumn() {  }  /**   split   */  public void split() {    //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());    //System.out.print();    for (int i = 0; i < 40; i++) {      //System.out.print(" = " + CRLF);    }    //System.out.print();    //System.out.print();  }}