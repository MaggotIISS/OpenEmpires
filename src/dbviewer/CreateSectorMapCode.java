/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer;import java.awt.Color;import java.awt.Container;import java.awt.Dimension;import java.awt.GridLayout;import java.awt.Image;import java.awt.Label;import java.awt.TextField;import java.awt.Toolkit;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.FocusListener;import java.awt.event.ItemListener;import java.awt.event.TextListener;import java.io.File;import java.io.Serializable;import java.util.ArrayList;import javax.swing.JButton;import javax.swing.JComboBox;import javax.swing.JFileChooser;import javax.swing.JFrame;import javax.swing.JTextField;/** class CreateSectorMapCode extends JFrame implements ActionListener, TextListener // @author Maggot-IISS @version 1.0 link = <a href="...">label</a> link = "added to See also section"	//added to See also section link package.class#feature	//link link ActionPerformed() */class CreateSectorMapCode extends JFrame implements Serializable, ActionListener,  ItemListener, TextListener, FocusListener {  static final long serialVersionUID = -3555951457399873666L;  /**   Command line startup   @param args strings to start   */  public static void main(String[] args) {    //System.out.print("public static void main(String [] args)");    CreateSectorMapCode sec1 = new CreateSectorMapCode();  }  /**   Create a new Sector Map giving top and left start numbers and dimensions.   link ActionPerformed() tX	Number of sectors across tY Number of Sectors   down tXs Left - Right starts at tYs Top - Bottom starts at   */  public CreateSectorMapCode() {    super("CreateSectorMapCode");    setBounds(200, 0, 400, 200);    setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);    //setLocation(0, 0);    setName("Sectors");//		ConsoleWindow.init();    Container contents = getContentPane();    contents.setBackground(Color.white);    GridLayout flowManager = new GridLayout(5, 3);    contents.setLayout(flowManager);    Label label = new Label("Across");    contents.add(label);    tX = new JTextField("12");    tX.addActionListener(this.sow);    tX.setToolTipText("Sectors across");    contents.add(tX);    tXs = new JTextField("-4");    tXs.addActionListener(this);    tXs.setToolTipText("Left Starts @ ");    contents.add(tXs);    label = new Label("Down");    contents.add(label);    tY = new JTextField("9");    tY.addActionListener(this);    tY.setToolTipText("Sectors Down");    contents.add(tY);    tYs = new JTextField("-3");    tYs.addActionListener(this);    tYs.setToolTipText("Top Starts @");    contents.add(tYs);    X = Integer.parseInt(tX.getText());    Xstart = Integer.parseInt(tXs.getText());    Y = Integer.parseInt(tY.getText());    Ystart = Integer.parseInt(tYs.getText());    eq = X * Y;    but0 = new JButton("GO");    but0.addActionListener(this);    contents.add(but0);    label = new Label("" + eq + "Boxes");    contents.add(label);    label = new Label("Start @");    contents.add(label);    jcb = new JComboBox();    jcb.addActionListener(this);    contents.add(jcb);    tf = new TextField();    tf.addActionListener(this);    tf.addFocusListener(this);    contents.add(tf);    but = new JButton("Write");    but.addActionListener(this);    but.setEnabled(false);    contents.add(but);    Label index = new Label("0");    contents.add(index);    pack();//----------------------------------------------    chooser = DBViewer.jfc;    chooser.setCurrentDirectory(new File("."));    chooser.setSelectedFile(new File(getTitle()));    chooser.addActionListener(this.sow);//----------------------------------------------    al = new ArrayList<>();    al.ensureCapacity(100);    //System.out.print("ArrayList size of " + al.size());    //al.set(1, (String) "Test");    //System.out.print("");    ////System.out.print("ArrayList capacity of "+ al.length());//----------------------------------------------    jcb.removeAllItems();    setContentPane(contents);//----------------------------------------------    sow = new SaveOutputWindow(getTitle());    //sow.setTitle("SectorNames");    sow.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);    sow.setSize(400, 700);    sow.setLocation(400, 0);    sow.clear();//----------------------------------------------    /*     JFrame frame = new ClassBrowserTestFrame(); frame.setLocation(400,0);     frame.setSize(800,400);     frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);     *///----------------------------------------------/*     JFrame frame1 = new DesktopFrame();     frame1.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);     frame1.setLocation(0,400); frame1.setSize(400,400);     * //----------------------------------------------     JFrame frame2 = new PlanetTableFrame();     frame2.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);     frame2.setLocation(0,800);     *///    FindDirectories fd = new FindDirectories();/*     ?????????????????????????????????????????????????     *///    //System.out.print(fd);//    //System.out.print(chooser);    Toolkit tk = Toolkit.getDefaultToolkit();    Dimension screensize = tk.getScreenSize();    int wid = screensize.width;    int hgt = screensize.height;//----------------------------------------------    //frame1.setSize(wid/4,hgt/4);    //System.out.print(this.getName());    this.setName("SectorMaps");    //System.out.print(this.getName());//----------------------------------------------/*     ImageViewerFrame frame3 = new ImageViewerFrame();     frame3.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);     frame3.setLocation(400,400); frame3.setVisible(true);     *///----------------------------------------------//		SaveJavaCode sjc = new SaveJavaCode();//----------------------------------------------/*     JFrame f = new JFrame("GridBag Layout Example"); GridBags gb = new     GridBags(); gb.init();     f.add("Center", gb); f.pack(); f.setSize(f.getPreferredSize());     f.setVisible(true);     *///----------------------------------------------    setVisible(true);//    frame.setVisible(true);    sow.setVisible(true);//    frame1.setVisible(true);//	  frame2.setVisible(true);//	  f.setVisible(true);//----------------------------------------------/*     int r = Dice.roll(3); //System.out.print("	int r = Dice.roll(3) = " +     r);     *///----------------------------------------------    Image img = tk.getImage("resources/skulls/128x128red.png");//    frame.setIconImage(img);//    frame1.setIconImage(img);//    frame2.setIconImage(img);//    frame3.setIconImage(img);    sow.setIconImage(img);//    f.setIconImage(img);//    sjc.setIconImage(img);    this.setIconImage(img);//----------------------------------------------    ////System.out.print(System.getProperties());    pack();    validate();  }  /**   actionPerformed(ActionEvent e)   */  @Override  @SuppressWarnings("unchecked")  public void actionPerformed(ActionEvent e) {    //System.out.print("");    //System.out.print("public void actionPerformed(ActionEvent e)");    //System.out.print("e.getClass() = " + e.getClass());    //System.out.print("e.getClass().getName() = " + e.getClass().getName());    //System.out.print("e.getActionCommand() = " + e.getActionCommand());    //System.out.print("getName() = " + getName());    //----------------------------------------------    switch (e.getActionCommand()) {      case "GO":        but.setEnabled(true);        but0.setEnabled(false);        X = 0;        Xstart = 0;        Y = 0;        Ystart = 0;        eq = 0;        //System.out.print("GOGOGO");        X = Integer.parseInt(tX.getText());        Xstart = Integer.parseInt(tXs.getText());        Y = Integer.parseInt(tY.getText());        Ystart = Integer.parseInt(tYs.getText());        eq = X * Y;        //		lab.setText("NOW I GOT U");        System.out.print("X=" + X);        System.out.print("Xstart=" + Xstart);        System.out.print("Y=" + Y);        System.out.print("Ystart=" + Ystart);        //System.out.print("eq=" + eq);        jcb.removeAllItems();        SecNames = new String[eq];        //----------------------------------------------        for (int i = 0; i < eq; i++) {          SecNames[i] = "Untitled";          String line = "" + i;          //System.out.print("" + i + " = " + SecNames[i]);          jcb.addItem(line);        }        int k = 0;        for (int i = 0; i < X; i++) {          for (int j = 0; j < Y; j++) {            //String line = ""+ k; // + " = "+ SecNames[k];            String line = "" + SecNames[k];            //System.out.print("" + line);            //jcb.addItem(line);            k++;          }        }        /*         * /*         */        break;      case "comboBoxChanged": {        int i = jcb.getSelectedIndex();        //System.out.print("comboBoxChanged to SecNames[" + i + "]");        ////System.out.print("" + i + " = " + SecNames[i]);        tf.setText(SecNames[i]);        break;      }      case "Write":        //System.out.print("Write");        ////System.out.print(chooser);        sow.clear();        sow.append("import java.awt.*;" + CRLF);        sow.append("import java.awt.event.*;" + CRLF);        sow.append("import javax.swing.*;" + CRLF);        sow.append("import javax.swing.event.*;" + CRLF);        sow.append("	" + CRLF);        sow.append("class CreateSectors {" + CRLF);        sow.append("	public static void main(String [] args) {" + CRLF);        sow.append("		CreateSectors cs = new CreateSectors();" + CRLF);        sow.append("	}" + CRLF);        sow.append("	" + CRLF);        sow.append("	public CreateSectors() {" + CRLF);        sow.append("	" + CRLF);        sow.append("		String [] SecNames = {" + CRLF);        for (int i = 0; i < SecNames.length; i++) {          sow.append("			\"" + SecNames[i] + "\"");          if (i < SecNames.length - 1) {            sow.append("," + CRLF);          }        }        sow.append(CRLF);        sow.append("		};" + CRLF);        sow.append("	}" + CRLF);        sow.append("}" + CRLF);        //sow.fname = "CreateSectors.java";        //chooser.setSelectedFile(new File(sow.fname));        break;      default: {        int i = jcb.getSelectedIndex();        SecNames[i] = tf.getText();        tf.setText(SecNames[i]);        break;      }    }//----------------------------------------------    int i = jcb.getSelectedIndex();    String words = jcb.getSelectedItem().toString();    //System.out.print("");    //System.out.print("getSelectedIndex = " + i);    //System.out.print("getSelectedItem = " + words);  }  /**   textValueChanged(java.awt.event.TextEvent te)   */  @Override  public void textValueChanged(java.awt.event.TextEvent te) {    //System.out.print("");    //System.out.print("public String textValueChanged(TextEvent te)");  }  /**   itemStateChanged(java.awt.event.ItemEvent) CHECKBOXES   */  @Override  public void itemStateChanged(java.awt.event.ItemEvent ie) {    //System.out.print("");    //System.out.print("itemStateChanged " + ie.getClass());  }  /**   focusLost   */  @Override  public void focusLost(java.awt.event.FocusEvent fe) {    //System.out.print("");    //System.out.print("focusLost(java.awt.event.FocusEvent fe)");    int i = jcb.getSelectedIndex();    //System.out.print("jcb.getSelectedIndex() = " + i);    String s = (String) jcb.getSelectedItem();    SecNames[i] = tf.getText();    String words = tf.getText();    //System.out.print("words = " + words);  }  /**   focusGained   */  @Override  public void focusGained(java.awt.event.FocusEvent fe) {    //System.out.print("");    //System.out.print("focusGained");  }  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }//==========================================================  /**   JFileChooser chooser;   */  private JFileChooser chooser;  /**   X = Number of Sectors across   */  private int X = 0;  /**   Xstart = Number of Sector in Left column   */  private int Xstart = 0;  /**   Y = Number of Sectors down   */  private int Y = 0;  /**   Ystart = Number of Sector in Top row   */  private int Ystart = 0;  /**   eq = Total number of Sectors   */  private int eq = 0;  /**   tX = JTextField to enter Numbers   */  private JTextField tX;  /**   tXs = JTextField to enter Left Start Number   */  private JTextField tXs;  /**   tY = JTextField to enter Numbers   */  private JTextField tY;  /**   tYs = JTextField to enter Top Start Number   */  private JTextField tYs;  /**   jcb = JComboBox to hold Sector Coordinates and name   */  private JComboBox jcb;  /**   public TextField tf   */  private TextField tf;  /**   JButton but1 = new JButton();   */  private JButton but1 = new JButton();  /**   public Button but = new JButton()   */  private JButton but = new JButton();  /**   public Button but0 = new JButton()   */  private JButton but0 = new JButton();  /**   private SaveOutputWindow sow   */  private SaveOutputWindow sow;  /**   public String [] SecNames   */  private String[] SecNames;  /**   Label idx;   */  private Label idx;  /**   Label lab;   */  private Label lab;  /**   public ArrayList al;   */  private ArrayList<String> al;  /**   final static String CRLF = System.getProperty("line.separator")   */  final static String CRLF = System.getProperty("line.separator");}