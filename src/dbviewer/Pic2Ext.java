/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer;import java.awt.BorderLayout;import java.awt.Image;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import javax.imageio.ImageIO;import javax.swing.DefaultListModel;import javax.swing.JButton;import javax.swing.JFileChooser;import javax.swing.JFrame;import javax.swing.JList;import javax.swing.JScrollPane;import javax.swing.JTextField;/** <p> @author maggot.iiss */public class Pic2Ext {  private static String startdir = "C:\\Users\\maggot\\Downloads";  private static File dir;  private static String[] files;  private static JTextField jtf;  private static String ext = "gif";  private static DefaultListModel<String> dlm = new DefaultListModel<>();  private static JList<String> jl = new JList<>();  private static int folders = 0;  private static JFrame jf = new JFrame();  private static JFileChooser jfc;  /**   @param args the command line arguments   */  public static void main(String[] args) {    setFrame();    setJFC();  }  private static void setFrame() {    jf.setLayout(new BorderLayout());    jf.setBounds(200, 0, 300, 300);    jf.addWindowListener(new WindowAdapter() {      @Override      public void windowClosed(WindowEvent e) {        System.exit(0);      }    });    jl.addMouseListener(new MouseAdapter() {      @Override      public void mouseClicked(MouseEvent e) {        if (e.getClickCount() > 1) {          dlm.clear();          jl.setModel(dlm);          setJFC();        }      }    });    JScrollPane jsp = new JScrollPane(jl);    jf.getContentPane().add(jsp, BorderLayout.CENTER);    jtf = new JTextField("gif");    jtf.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        ext = jtf.getText().toLowerCase();      }    });    jf.getContentPane().add(jtf, BorderLayout.NORTH);    JButton jb = new JButton("Go");    jb.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        for (int i = 0; i < jl.getModel().getSize(); i++) {          jl.setSelectedIndex(i);          startdir = jl.getSelectedValue();          convertPics(startdir);        }      }    });    jf.getContentPane().add(jb, BorderLayout.SOUTH);    jf.setVisible(true);  }  private static void setJFC() {    jfc = new JFileChooser();    jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);    jfc.setCurrentDirectory(new File(startdir));    jfc.showOpenDialog(jfc);    startdir = jfc.getSelectedFile().toString();    //System.out.print("jfc.getSelectedFile().toString() = " + jfc.getSelectedFile().toString());    dlm.addElement(jfc.getSelectedFile().toString());    jl.setModel(dlm);    listDirs(startdir);  }  private static void listDirs(String dir) {    try {      File pathName = new File(dir);      String[] fileNames = pathName.list();      // enumerate all files in the directory      for (int i = 0; i < fileNames.length; i++) {        File f = new File(pathName.getPath(), fileNames[i]);        // if the file is again a directory, call the main method recursively        if (f.isDirectory()) {          //System.out.print(f.getCanonicalPath());          dlm.addElement(f.getCanonicalPath());          listDirs(f.getPath());        }      }    } catch (IOException e) {      e.printStackTrace();    }    jl.setModel(dlm);  }  private static void convertPics(String dir) {    File d = new File(dir);    files = d.list();    int num = 0;    for (int i = 0; i < files.length; i++) {      if (files[i].toLowerCase().endsWith("bmp")        | files[i].toLowerCase().endsWith("jpg")        | files[i].toLowerCase().endsWith("jpeg")        | files[i].toLowerCase().endsWith("gif")        | files[i].toLowerCase().endsWith("png")) {        num += 1;        //pic2gif(startdir, files[i].toString());        pic2ext(startdir, files[i].toString(), ext);      }    }    //System.out.print("number converted = " + num);    jf.setTitle("number converted = " + num);    folders += 1;  }  /**   <p>   @param path path of file   @param file name of file   @param ext  extension of file   @return count of images converted   */  public static int pic2ext(String path, String file, String ext) {    int count = 0;    //System.out.print("pic2ext(" + path + "," + file + "," + ext + ")");    Image image = null;    try {      image = ImageIO.read(new File(startdir, file));    } catch (IOException e) {    }    try {      BufferedImage bi = (BufferedImage) image; // retrieve image      File outputfile;      if (!file.endsWith(".jpeg")) {        outputfile = new File(path, file.substring(0, file.length() - 3) + ext);      } else {        outputfile = new File(path, file.substring(0, file.length() - 4) + ext);      }      ImageIO.write(bi, ext, outputfile);      jf.setTitle(outputfile.toString());      count += 1;    } catch (IOException e) {    }    return count;  }  /**   <p>   @return name of class   */  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }}