/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer;//~--- JDK imports ------------------------------------------------------------import java.awt.BorderLayout;import java.awt.Container;import java.awt.Panel;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.io.PrintWriter;import java.util.ArrayList;import javax.swing.JButton;import javax.swing.JCheckBox;import javax.swing.JFileChooser;import javax.swing.JFrame;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTextArea;import javax.swing.JTextField;import panels.Panel4;import panels.Panel4Conflict;/** Create SaveOutputWindow and display */@SuppressWarnings("serial")public class SaveOutputWindow extends JFrame implements ActionListener {  final static JTextField stf = new JTextField(20);  static JCheckBox jcb;  /**   @return the fname   */  public static String getFname() {    return fname;  }  /**   @param aFname the fname to set   */  public static void setFname(String aFname) {    fname = aFname;  }  /**   @return the jta   */  public static JTextArea getJta() {    return jta;  }  /**   @param aJta the jta to set   */  public static void setJta(JTextArea aJta) {    jta = aJta;  }//---------------------------------------------------  //<editor-fold defaultstate="collapsed" desc="main">  /**   Command line startup Create a SaveOutputWindow with default title   <p>   @param args arguments   */  public static void main(String[] args) {    //System.out.print("");    //System.out.print("main");    String Words = "Ready";    SaveOutputWindow sow = new SaveOutputWindow();    //SaveOutputWindow sow1 = new SaveOutputWindow("What");  }  //</editor-fold>  /**   SaveOutputWindow()   */  public SaveOutputWindow() {    super();    //System.out.print("");    //System.out.print("SaveOutputWindow");//    setTitle(super.getTitle());    setSize(420, 500);    setLocation(200, 0);    setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);    setVisible(true);    setName("SOW");    chooser = DBViewer.jfc;    Container contents = getContentPane();    BorderLayout gbl = new BorderLayout();    contents.setLayout(gbl);    JPanel jp = new JPanel();    jta = new JTextArea(20, 35);    jta.addMouseListener(new MouseAdapter() {      @Override      public void mouseClicked(MouseEvent e) {        if (3 == e.getClickCount()) {          jta.setText("");        }      }    });    JScrollPane jsp = new JScrollPane(getJta());    contents.add(jsp, "Center");    Panel panNorth = new Panel();    JButton openButton = new JButton("O");    openButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        openIt();      }    });    panNorth.add(openButton);    JButton saveButton = new JButton("S");    saveButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        saveIt();        chooser.setSelectedFile(new File(chooser.getSelectedFile().toString()));      }    });    panNorth.add(saveButton);    if (OUT == true) {      chooser = Panel4Conflict.jfc;    }//    final JTextField jtf = new JTextField(chooser.getSelectedFile().toString(), 25);//    panNorth.add(jtf);    chooser.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {//        jtf.setText(chooser.getSelectedFile().toString());      }    });    add(panNorth, "North");    setContentPane(contents);    JPanel js = new Panel4("Search");//        stf = new JTextField(20);    stf.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        searchFor(stf.getText());      }    });    jcb = new JCheckBox("Exact");    jcb.setSelected(true);    JButton jb = new JButton("Search");    jb.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        searchFor(stf.getText());      }    });    //jcb.addActionListener(new ActionListener());    js.add(stf, "West");    js.add(jb, "Center");    js.add(jcb, "East");    add(js, "South");  }  /**   SaveOutputWindow(String name) Create SaveOutputWindow with a supplied title   (name)   <p>   @param name Name of window   */  public SaveOutputWindow(String name) {    this();    //System.out.print("SaveOutputWindow " + name);    this.setTitle(name);    fname = name;  }  /**   <p>   @param jfc JFileChooser   */  public SaveOutputWindow(JFileChooser jfc) {    //this();    chooser = jfc;    //new SaveOutputWindow(chooser);  }  /**   saveIt   */  public void saveIt() {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      //System.out.print("Start SAVE");    }    //</editor-fold>    //int ret = chooser.showSaveDialog(this);    //DBViewer.jfc.setCurrentDirectory(new File("."));    //DBViewer.jfc.setSelectedFile(new File(super.getTitle()));    int ret;    if ((ret = DBViewer.jfc.showSaveDialog(DBViewer.jfc))      == JFileChooser.APPROVE_OPTION) {      //setFname(DBViewer.jfc.getName().toString());      String file = DBViewer.jfc.getSelectedFile().toString();      DBViewer.jfc.setSelectedFile(new File(file));      //System.out.print("SAVE " + file);      setTitle(file);//      //System.out.print("" + " = " + DBViewer.jfc.getName());//      //System.out.print("" + " = " + DBViewer.jfc.getSelectedFile().toString());      try {        try (PrintWriter out = new PrintWriter(new FileWriter(file))) {          out.print(getJta().getText());          //System.out.print("" + " = " + "Saving");        }      } catch (IOException ex) {        //System.out.print(ex);      }      //System.out.print("" + " = " + "Saved");    }  }  /**   openIt   */  public void openIt() {    String file = DBViewer.jfc.getSelectedFile().toString();    chooser.showOpenDialog(this);    //System.out.print("OPEN " + file);    setFname(file);    getJta().setText("");    try {      BufferedReader in = new BufferedReader(new FileReader(getFname()));      String line;      while ((line = in.readLine()) != null) {        getJta().append(line + CRLF);      }      in.close();    } catch (IOException iox) {      //System.out.print(iox);    }    setTitle(SaveOutputWindow.getFname().toString());  }  /**   openItAll load a text file of names, load each one and run   GetJavaReflections to get output   */  public void openItAll() {    chooser.showOpenDialog(this);    //System.out.print("OPEN " + getFname());    setFname(chooser.getSelectedFile().getName());    // jta.setText("");    try {      BufferedReader in = new BufferedReader(new FileReader(getFname()));      String line;      while ((line = in.readLine()) != null) {        getJta().append(line + CRLF);      }      in.close();    } catch (IOException iox) {      //System.out.print(iox);    }    // now ready to count lines for a long loop    int lines = countLines();    for (int i = 0; i < lines; i++) {      //System.out.print("i = " + i);    }  }  /**   <p>   @return 1   */  public int countLines() {    return 1;  }  /**   actionPerformed(java.awt.event.ActionEvent)   <p>   @param e Event   */  @Override  public void actionPerformed(java.awt.event.ActionEvent e) {    chooser.setCurrentDirectory(new File("."));    fname = this.getTitle();    //fname = (getSelectedFile().toString() + ".career").trim();    chooser.setSelectedFile(new File(fname));    switch (e.getActionCommand()) {      case "S":        saveIt();        break;      case "O":        openIt();        break;    }  }  /**   setText(String text)   <p>   @param text Text to use   */  public void setText(String text) {    //System.out.print("");    //System.out.print("setText(String)");    getJta().setText(text);  }  /**   append(String words)   <p>   @param words Words to use   */  public void append(String words) {//    //System.out.print("");//    //System.out.print("append");    getJta().append(words);  }  /**   clear()   */  public void clear() {    //System.out.print("");    //System.out.print("clear");    getJta().setText("");  }  /**   getText()   <p>   @return text   */  public String getText() {    return getJta().getText();  }  /**   <p>   @param string to set as Current Directory of JFileChooser   */  public void setCurrentDirectory(String string) {    chooser.setCurrentDirectory(new File(string));  }  /**   <p>   @return JFileChooser current dir   */  public String getCurrentDirectory() {    return chooser.getCurrentDirectory().toString();  }  /**   <p>   @param text text to setSelectedFile in JFileChooser;   */  public void setSelectedFile(String text) {    fname = text;    chooser.setSelectedFile(new File(fname));  }  /**   <p>   @param text word to search for   */  public static void setSearchWord(String text) {    stf.setText(text);  }  /**   <p>   @param text word to search for in SaveOutputWindow   */  public static void searchFor(String text) {    setSearchWord(text);    ////System.out.print("SaveOutputWindow.fname" + " = " +fname);    ArrayList<String> al = new ArrayList<>();    try {      BufferedReader in = new BufferedReader(new FileReader(SaveOutputWindow        .getFname()));      //BufferedReader in = new BufferedReader(new FileReader(fname));      String line;      int num = 0;      try {        while ((line = in.readLine()) != null) {          num += 1;          if (jcb.isSelected()) {//Exact match            if (line.contains(text)) {              //System.out.print("" + line);              al.add(line);            }          } else if (!jcb.isSelected()) {//All cases            if (line.toLowerCase().contains(text.toLowerCase())) {              //System.out.print("" + line);              al.add(line);            }          }        }        in.close();      } catch (IOException ex) {//                Logger.getLogger(dbviewer.SaveOutputWindow.class.getName()).log(Level.SEVERE, null, ex);      }    } catch (FileNotFoundException ex) {//            Logger.getLogger(dbviewer.SaveOutputWindow.class.getName()).log(Level.SEVERE, null, ex);    }//        for (int i=0; i<al.size()-1; i++) {//            //System.out.print("al.get("+i+")" + " = " +al.get(i));//        }  }//---------------------------------------------------  /**   <p>   @return JFileChooser selected file   */  public String getSelectedFile() {    return chooser.getSelectedFile().toString();  }  // private static String Words;  private static final String CRLF = System.getProperty("line.separator");  private static final String FSEP = System.getProperty("file.separator");  private static String fname = "";  private static JTextArea jta;  private JFileChooser chooser;  private boolean OUT = false;}