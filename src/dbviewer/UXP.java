/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer;/** Universal Xperimental Profiles <p> @author maggot.iiss */public class UXP {  //<editor-fold defaultstate="collapsed" desc="Variables">  private String name = "";  /**   string   */  public static String string = "";  private static String UPP = "777777";  private static int[] num = {42, 7, 7, 7, 7, 7, 7};  private static int highest = 0;  private static int line = 0;  private static String desired;  private static final int STRENGTH = 1;  private static final int DEXTERITY = 2;  private static final int ENDURANCE = 4;  private static final int INTELLIGENCE = 8;  private static final int EDUCATION = 16;  private static final int SOCIAL = 32;  private static final String Str = "STR ";  private static final String Dex = "DEX ";  private static final String End = "END ";  private static final String Int = "INT ";  private static final String Edu = "EDU ";  private static final String Soc = "SOC ";  private static final int STR = 1;  private static final int DEX = 2;  private static final int END = 3;  private static final int INT = 4;  private static final int EDU = 5;  private static final int SOC = 6;  //</editor-fold>  /**   @param args the command line arguments   */  public static void main(String[] args) {    System.out.print(" = " + bestOfMany(100));  }  /**   <p>   @param max number of UPPs to generate   @return string representing best roll of many   */  public static String bestOfMany(int max) {    highest = 0;    String[] strings = new String[max];    for (int i = 0; i < max; i++) {      strings[i] = getUpp();    }    findBestOfMany(max, strings);    return (string);  }  /**   <p>   @return name of class   */  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }  /**   <p>   @return random UPP as string   */  public static String getUpp() {    int[] rand = randomUPP();    int total = 0;    String lines = "";    String anum;    for (int i = 1; i < 7; i++) {      anum = num2Hex(rand[i]);      total += rand[i];//      System.out.print(anum);      lines += anum;      if (total > highest) {        highest = total;      }    }    rand[0] = total;//    //System.out.print(" = " + total);    lines += " = " + total;    return lines;  }  /**   <p>   @return UPP randomly rolled with 2d6   */  public static int[] randomUPP() {    for (int i = 1; i < 7; i++) {      num[i] = roll(2, 6);    }    num[0] = num[1] + num[2] + num[3] + num[4] + num[5] + num[6];    return num;  }  /**   <p>   @param times to   @param sides of dice   @return times * D sides totalled up as int   */  public static int roll(int times, int sides) {    int anum = 0;    for (int i = 0; i < times; i++) {      anum += (int) (Math.random() * sides) + 1;    }    return anum;  }  /**   <p>   @param num number to hexify   @return string containing number value   */  public static String num2Hex(int num) {    char c;    if (num < (10)) {      c = (char) (num + 48);    } else {      c = (char) (num + 55);    }    String a = "" + c;    return a;  }  /**   <p>   @param max number of strings in array (same as ra.length?)   @param ra  array of strings   @return return UPP and 6 extra lines of Attributes and Values   */  public static String findBestOfMany(int max, String[] ra) {    System.out.print(" highest = " + highest);    int a = 0;    int i;    int number = 0;    for (i = 0; i < max; i++) {      if (ra[i].contains(" = " + highest)) {        System.out.println(" on line " + i + ".  ");        //System.out.print(ra[i]);        string = ra[i];        number = i;        for (int j = 0; j < 6; j++) {//          //System.out.print("" +ra[i]);          //a = hex2Num(j,ra[i]);          String start = null;          switch (j) {            case 0: {              start = Str;              break;            }            case 1: {              start = Dex;              break;            }            case 2: {              start = End;              break;            }            case 3: {              start = Int;              break;            }            case 4: {              start = Edu;              break;            }            case 5: {              start = Soc;              break;            }          }          System.out.println("" + start + " " + ra[i].substring(j, j + 1) + ".  ");          //String numi = ra[i].substring(j,j+1);          //System.out.print(" = " + hex2Num(j, ra[i]));        }      }    }    return string;  }  /**   <p>   @param num number of times to check best   @return best value as a string   */  public static String getBestOfMany(int num) {    String[] strings = new String[num];    for (int i = 0; i < num; i++) {      strings[i] = getUpp();    }    return findBestOfMany(num, strings);  }  /**   <p>   @param idx index in string   @param str string to search   @return int as decimal   */  public static int hex2Num(int idx, String str) {    char i = str.charAt(idx);    if (i - 55 < 10) {      i -= 48;    } else {      i -= 55;    }    return i;  }  /**   <p>   @param idx  index of letter   @param nums string to convert   @return number rolled   */  public static int hex2Nums(int idx, String nums) {    desired = nums.substring(idx, idx + 1);//    //System.out.print("idx = " + idx);//    //System.out.print("nums = " + nums);//    //System.out.print("desired = " +desired);    int ret;    switch (desired) {      case "A":        ret = 10;        break;      case "B":        ret = 11;        break;      case "C":        ret = 12;        break;      case "D":        ret = 13;        break;      case "E":        ret = 14;        break;      case "F":        ret = 15;        break;      default:        //        //System.out.print("default desired = " +desired);        ret = Integer.parseInt(desired);        break;    }    return ret;  }  /**   <p>   @param num to convert   @return decimal equivalent of hexadecimal value (0-F)   */  public static int get(int num) {    return hex2Num(num, string);  }  /**   <p>   @param UPP UPP   @return updated UPP with total at end   */  public static String addTotal(String UPP) {    int total = 0;    for (int i = 0; i < 6; i++) {      total += UXP.hex2Num(i, UPP);    }    string = "" + UPP + " = " + total;    return string;  }  /**   <p>   @param mod = modifier   @param UPP UPP to change   @return updated UPP   */  public static String changeStats(String mod, String UPP) {    //find where mod and stat are    int pos = mod.indexOf("+");    String numa;    String stat;    if (pos == 0) {      numa = mod.substring(0, 3).trim();      stat = mod.substring(mod.length() - 3, mod.length());    } else {      stat = mod.substring(0, 3).trim();      numa = mod.substring(mod.length() - 3, mod.length());    }    Debug.debug("numa = " + numa);    Debug.debug("stat = " + stat);    Debug.debug("mod = " + mod);    Debug.debug("UPP = " + UPP);    int idx = 0;    switch (stat) {      case "STR":        idx = 0;        break;      case "DEX":        idx = 1;        break;      case "END":        idx = 2;        break;      case "INT":        idx = 3;        break;      case "EDU":        idx = 4;        break;      case "SOC":        idx = 5;        break;    }    pos = idx;    Debug.debug("stat at position = " + pos);    String update = UPP.substring(0, pos);    String req = "" + UXP.hex2Num(idx, UPP);    int now = Integer.parseInt(req);    now += Integer.parseInt(numa.trim());    String updated = update;    updated += UXP.num2Hex((now));    updated += UPP.substring(pos + 1, UPP.length());    Debug.debug("update = " + update);    Debug.debug("req = " + req);    Debug.debug("now = " + now);    Debug.debug("updated = " + updated);    return updated;  }}