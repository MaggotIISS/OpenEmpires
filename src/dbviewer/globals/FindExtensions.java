/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer.globals;import dbviewer.DBViewer;import dbviewer.ExtensionFileFilter;import dbviewer.ImagePreviewer;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.io.File;import java.util.ArrayList;import java.util.Arrays;import java.util.Date;import javax.swing.DefaultListModel;import javax.swing.JFileChooser;import javax.swing.JFrame;import javax.swing.JList;import javax.swing.JPanel;import javax.swing.JScrollPane;import panels.Frame4;import panels.Panel4;/** <p> @author maggot */public class FindExtensions {  /**   JFileChooser   */  public static JFileChooser jfc = DBViewer.jfc;  /**   <p>   @param args strings to start   */  public static void main(String[] args) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("" + " = " + );    }    //</editor-fold>    Date startnow = new Date();    dirs = listDirs(start);    for (int i = 0; i < dirs.length; i++) {      exts = listExtensions(listFiles(new File(dirs[i])));    }    showFrame();    Date endnow = new Date();    //System.out.print("" + " = " + (double) (endnow.getTime() - startnow.getTime()) / 1000 + " seconds");    //System.out.print("dirs.length" + " = " + dirs.length);    //System.out.print("exts.length" + " = " + exts.length);    for (int i = 0; i < exts.length; i++) {      ////System.out.print("" + "." + exts[i]);    }  }  /**   <p>   @param dir dir to search   @return array of directories below dir   */  public String[] getDirs(String dir) {    return listDirs(dir);  }  /**   <p>   @param dir dir to search   @return all files in dir   */  public String[] getFiles(File dir) {    return listFiles(dir);  }  /**   <p>   @param exts extensions to find   @return all extensions in all folders   */  public String[] getExtensions(String[] exts) {    return listExtensions(exts);  }  /**   <p>   @param dir dir to search   @return dirs as String[]   */  public static String[] listDirs(String dir) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("" + " = " + );    }    //</editor-fold>    ArrayList al = FindDirectories.listDirs(dir);    dirs = new String[al.size() + 1];    dirs[0] = dir;    for (int i = 1; i < (al.size() + 1); i++) {      dirs[i] = al.get(i - 1).toString();    }    return dirs;  }  /**   <p>   @param listFiles filenames to search   @return list of extensions   */  @SuppressWarnings("unchecked")  public static String[] listExtensions(String[] listFiles) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("" + " = " + );    }    //</editor-fold>    String ext;    for (int i = 0; i < listFiles.length; i++) {      int pos = listFiles[i].lastIndexOf(".");      if (pos > 0) {        ext = listFiles[i].substring(pos + 1);        for (int j = 0; j < listFiles.length; j++) {          if (!s.contains(ext)) {            s.add(ext);            dlm.addElement(ext);          }        }      }    }    String[] ss = new String[s.size()];    for (int i = 0; i < dlm.size(); i++) {      ss[i] = (String) dlm.get(i);    }    Arrays.sort(ss);    jl = new JList<>(ss);    return ss;  }  /**   <p>   @param file file to search   @return list of files   */  @SuppressWarnings("unchecked")  public static String[] listFiles(File file) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("" + " = " + );    }    //</editor-fold>    String[] flist = file.list();    ArrayList<String> al = new ArrayList<>();    String[] list = null;    if (flist != null) {      for (int i = 0; i < flist.length; i++) {        File f = new File(flist[i]);        if (!f.isDirectory()) {          al.add(f.toString().toLowerCase());        }      }      list = new String[al.size()];      for (int i = 0; i < al.size(); i++) {        list[i] = (String) al.get(i);      }      return list;    }    return list;  }  private static void showFrame() {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("" + " = " + );    }    //</editor-fold>    final JPanel jp4e = new Panel4("FindExtensions");    jp4e.add(new JScrollPane(jl));    final JFrame jf = new Frame4(jp4e);    jf.setSize(100, 700);    jl.addMouseListener(new MouseAdapter() {      @Override      @SuppressWarnings("unchecked")      public void mouseClicked(MouseEvent me) {        contains = new ArrayList();        jf.setTitle(jl.getSelectedValue().toString());        DefaultListModel dlmd = new DefaultListModel();        String[] ret = findFoldersWith(start, jl.getSelectedValue().toString());        if (ret != null) {          for (int i = 0; i < ret.length; i++) {            //System.out.print("[" + i + "]" + " = " + ret[i]);            dlmd.addElement(ret[i]);          }          @SuppressWarnings("unchecked")          final JList jl = new JList(dlmd);          final JPanel jp4dirs = new Panel4(jl.getName());          jp4dirs.add(new JScrollPane(jl));          final JFrame jf1 = new Frame4(jp4dirs);          jf1.setTitle("Dirs with " + jf.getTitle());          jl.addMouseListener(new MouseAdapter() {            @Override            public void mouseClicked(MouseEvent me) {              ExtensionFileFilter eff = new ExtensionFileFilter();              eff.addExtension(jf.getTitle());              eff.setDescription(jf.getTitle().toUpperCase() + " files");              ImagePreviewer ipv = new ImagePreviewer(jfc);              DBViewer.jfc.setAccessory(ipv);              DBViewer.jfc.setAcceptAllFileFilterUsed(true);              javax.swing.filechooser.FileFilter[] ff = jfc                .getChoosableFileFilters();              for (int i = 0; i < ff.length; i++) {                jfc.removeChoosableFileFilter(ff[i]);              }              if (me.getClickCount() > 1) {                String string = jf.getTitle();                jfc.setCurrentDirectory(new File(jl.getSelectedValue()                  .toString()));                jfc.setDialogTitle("Load " + string + " files");                jfc.setBounds(500, 0, 300, 700);                jfc.setFileFilter(eff);                int ret = jfc.showOpenDialog(DBViewer.Group);                if (ret == JFileChooser.APPROVE_OPTION) {                  //System.out.print("Open File " + jfc.getSelectedFile());                }              }            }          });        }      }      @SuppressWarnings("unchecked")      public String[] findFoldersWith(String dir, String ext) {        //<editor-fold defaultstate="collapsed" desc="DEBUG">        boolean DEBUG = false;        if (DEBUG) { // true or false          //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName() + " " + ext);          ////System.out.print("" + " = " + );        }        //</editor-fold>        // PUT FOLDERS CONTAINING FILES WITH EXTENSION EXT IN A LIST        boolean flag = false;  //folder not already in list        for (int i = 0; i < dirs.length; i++) {          //check if folder contains files ending in ext variable (bat)          String[] files = listFiles(new File(dirs[i]));          for (int j = 0; j < files.length; j++) {            if ((files[j].toString().toLowerCase().endsWith("." + ext              .toLowerCase())) & (flag == false)) {              contains.add(dirs[i]);              flag = true;            }          }          flag = false;        }        String[] ret = new String[contains.size()];        for (int i = 0; i < contains.size(); i++) {          ret[i] = contains.get(i).toString();        }        return ret;      }    });  }  /**   <p>   @return name of class   */  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }  //--------------------------------------  static ArrayList contains = new ArrayList();  static String start = dbviewer.globals.GlobalVariables.CB;  static DefaultListModel dlm = new DefaultListModel();  static String[] dirs;  static String[] files;  static String[] exts;  static JList jl = new JList();  static ArrayList<String> s = new ArrayList<>();}