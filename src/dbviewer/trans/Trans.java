/*

 Copyright (C) 2014 Mark Ferguson



 This program is free software: you can redistribute it and/or modify

 it under the terms of the GNU General Public License as published by

 the Free Software Foundation, either version 3 of the License, or

 (at your option) any later version.



 This program is distributed in the hope that it will be useful,

 but WITHOUT ANY WARRANTY; without even the implied warranty of

 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 GNU General Public License for more details.



 You should have received a copy of the GNU General Public License

 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 */
package dbviewer.trans;

import dbviewer.globals.GlobalVariables;
import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;
import panels.Frame4;

/**
 <p>
 @author Your Name Mark Ferguson maggot.iiss@sky.com
 */
public class Trans extends JPanel {

  /**
   <p>
   @param args strings to start
   */
  public static void main(String[] args) {
    JPanel jp = new Trans();
    JFrame jf = new Frame4(jp, "Trans");
    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    jp.setBackground(Color.yellow);
  }

  /**
   Creates new form Trans
   */
  public Trans() {
    initComponents();
    try {
      test(GlobalVariables.BMP + "/154thBatRon.gif");
    } catch (IOException ex) {
    }
  }

  /**
   This method is called from within the constructor to initialize the form.
   WARNING: Do NOT modify this code. The content of this method is always
   regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    jComboBox1 = new javax.swing.JComboBox();

    jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jLabel1.setMaximumSize(new java.awt.Dimension(100, 100));
    jLabel1.setMinimumSize(new java.awt.Dimension(100, 100));
    jLabel1.setPreferredSize(new java.awt.Dimension(100, 100));

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
          .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGap(0, 253, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(0, 129, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox jComboBox1;
  private javax.swing.JLabel jLabel1;
  // End of variables declaration//GEN-END:variables

  private void test(String testgif) throws IOException {
    Image image = ImageIO.read(new File(testgif));
    BufferedImage bi = new BufferedImage(image.getWidth(this),
      image.getHeight(this),
      BufferedImage.TYPE_INT_ARGB);
//    BufferedImage bi = ImageIO.read(new File(testgif));
    WritableRaster raster = bi.getRaster();
//    int[] white = {255, 255, 255, 0};
    int[] sample = new int[4];
    int count = 0;
    for (int j = 0; j < bi.getHeight(); j++) {
      for (int i = 0; i < bi.getWidth(); i++) {
        count++;
        raster.getPixel(i, j, sample);
        if (sample[0] == 255 & sample[1] == 255 & sample[2] == 255) {
          sample[3] = 255;
        } else {
          sample[3] = 0;
        }
        raster.setPixel(i, j, sample);
      }
    }

//    bi.copyData(raster);
    System.out.println("count" + " = " + count);
//    ImageIO.write(bi, "gif", new File(testgif));
    ImageIcon icon = new ImageIcon(image);
    jLabel1.setSize(image.getWidth(this), image.getHeight(this));
    jLabel1.setIcon(icon);
//    System.out.println("" + " = " +bi.getType());
  }

}
