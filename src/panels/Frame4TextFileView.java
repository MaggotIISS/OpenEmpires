/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package panels;import dbviewer.DBViewer;import java.awt.BorderLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.io.PrintWriter;import java.io.Serializable;import java.util.logging.Level;import java.util.logging.Logger;import javax.swing.Icon;import javax.swing.ImageIcon;import javax.swing.JFrame;import javax.swing.JMenu;import javax.swing.JMenuBar;import javax.swing.JMenuItem;import javax.swing.JOptionPane;import javax.swing.JScrollPane;import javax.swing.JTextArea;/** <p> @author maggot.iiss */public class Frame4TextFileView extends JFrame implements Serializable {  private static final long serialVersionUID = 1L;  private JTextArea jta = null;  private JFrame jf = null;  private JScrollPane jsp = null;  private JFrame frame = null;  /**   Frame4TextFileView   */  public Frame4TextFileView() {    super();    jf = new JFrame();//    Debug.debug("" +jsp);    JMenuBar jmb2 = new JMenuBar();    jf.setJMenuBar(jmb2);    JMenu jmfile = new JMenu("File");    JMenuItem jmisave = new JMenuItem("Save");    jmfile.add(jmisave);    jmisave.addActionListener(new ActionListener() {      @Override      @SuppressWarnings("static-access")      public void actionPerformed(ActionEvent e) {        String line = Frame4TextFileView.this.getJta().getText();        ////System.out.print("Save file to = " + DBViewer1.getTitle());        try {          try (PrintWriter out = new PrintWriter(new FileWriter(DBViewer            .getTitle()))) {            ////System.out.print(" = " + line);            out.print(line);          }        } catch (IOException ex) {          Logger.getLogger(DBViewer.class.getName()).log(Level.SEVERE, null, ex);        }      }    });    JMenuItem jmigoto = new JMenuItem("Goto line");    jmfile.add(jmigoto);    jmigoto.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        frame = new JFrame();        String path = "D:/CYBERBOARD/GIF/1stAid.gif";        Icon icon = new ImageIcon(path);        Object[] possibilities;        //possibilities = new Object[]{"1", "2", "3"};        int num = countLines();        possibilities = new Object[num];        for (int i = 0; i < num; i++) {          possibilities[i] = "" + i;        }        String s = (String) JOptionPane.showInputDialog(          frame, "Enter line number\n", "Goto line",          JOptionPane.QUESTION_MESSAGE, icon, possibilities, "1");        if ((s != null) && (s.length() > 0)) {          ////System.out.print(" = " + "Going to line " + s + "!");        }      }      private int countLines() {        return 4;      }    });    jmb2.add(jmfile);    jf.setJMenuBar(jmb2);//, BorderLayout.NORTH);    jf.setTitle(DBViewer.getTitle());    jta = new JTextArea(20, 20);    jta.setEditable(true);    jsp = new JScrollPane(jta);    jf.setLayout(new BorderLayout());    jf.getContentPane().add(jsp, BorderLayout.CENTER);    jf.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);    jf.setBounds(200, 0, 420, 500);    jf.setVisible(true);    try {      File it = new File(DBViewer.getPath() + DBViewer.jList1.getSelectedValue()        .toString());      FileReader file = new FileReader(it);      try (BufferedReader buffer = new BufferedReader(file)) {        String line;// = buffer.readLine();        int cnt = 0;        while ((line = buffer.readLine()) != null) {          jta.append(line + "\n");          cnt += 1;        }        String[] strings = new String[cnt];        buffer.close();      }    } catch (IOException e) {      //System.out.print("IOException = " + e);    }  }  /**   @param title of file inc path   */  public Frame4TextFileView(String title) {    this();    setTitle(title);//ADDED BUT NOT CHECKED  }  /**   @return the jta   */  public JTextArea getJta() {    return jta;  }  /**   @param jta the jta to set   */  public void setJta(JTextArea jta) {    this.jta = jta;  }  /**   <p>   @return name of class   */  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }}