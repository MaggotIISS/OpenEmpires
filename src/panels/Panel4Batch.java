/*

 Copyright (C) 2014 Mark Ferguson



 This program is free software: you can redistribute it and/or modify

 it under the terms of the GNU General Public License as published by

 the Free Software Foundation, either version 3 of the License, or

 (at your option) any later version.



 This program is distributed in the hope that it will be useful,

 but WITHOUT ANY WARRANTY; without even the implied warranty of

 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 GNU General Public License for more details.



 You should have received a copy of the GNU General Public License

 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 */
package panels;

import dbviewer.DBViewer;
import dbviewer.globals.GlobalMethods;
import dbviewer.globals.GlobalVariables;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 <p>
 @author maggot
 */
public class Panel4Batch extends Panel4 {

  static JFrame jf;
  static JPanel p4b;
  JFileChooser jfc;
  private String CRLF = GlobalVariables.CRLF;
  private String FS = GlobalVariables.FS;
  String f;

  /**
   <p>
   @param args strings to start
   */
  public static void main(String[] args) {
    p4b = new Panel4Batch();
    jf = new Frame4(p4b);
    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    jComboBox1.setSelectedIndex(4);
  }

  /**
   Creates new form Panel4Batch
   */
  public Panel4Batch() {
    super();
    initComponents();
    jfc = DBViewer.jfc;

  }

  /**
   This method is called from within the constructor to initialize the form.
   WARNING: Do NOT modify this code. The content of this method is always
   regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jComboBox1 = new javax.swing.JComboBox();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTextArea1 = new javax.swing.JTextArea();
    jScrollPane2 = new javax.swing.JScrollPane();
    jta = new javax.swing.JTextArea();
    jButton1 = new javax.swing.JButton();

    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "D:\\Cyberboard\\BAT\\ArmyCounters.bat", "D:\\Cyberboard\\BAT\\Cargo.bat", "D:\\Cyberboard\\BAT\\HardwareCounters.bat", "D:\\Cyberboard\\BAT\\MarineCounters.bat", "D:\\Cyberboard\\BAT\\MerchantCounters.bat", "D:\\Cyberboard\\BAT\\NavyCounters.bat", "D:\\Cyberboard\\BAT\\OtherCounters.bat", "D:\\Cyberboard\\BAT\\ScoutCounters.bat", "D:\\Cyberboard\\BAT\\SkyRigCounters.bat", "D:\\Cyberboard\\BAT\\SolomaniCounters.bat" }));
    jComboBox1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jComboBox1ActionPerformed(evt);
      }
    });

    jTextArea1.setColumns(20);
    jTextArea1.setRows(5);
    jScrollPane1.setViewportView(jTextArea1);

    jta.setColumns(20);
    jta.setRows(5);
    jta.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jtaMouseClicked(evt);
      }
    });
    jScrollPane2.setViewportView(jta);

    jButton1.setText("jfc");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE))
      .addGroup(layout.createSequentialGroup()
        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton1))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButton1))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
          .addComponent(jScrollPane2)))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
    //<editor-fold defaultstate="collapsed" desc="DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      //System.out.print("---------------------------");
      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());
      //System.out.print("jComboBox1.getSelectedItem().toString()" + " = " + jComboBox1.getSelectedItem().toString());
    }
//</editor-fold>
    jta.setText("");
    f = jComboBox1.getSelectedItem().toString();
    jfc.setSelectedFile(new File(f));
    jfc.resetChoosableFileFilters();
    String path = dbviewer.DBViewer.jfc.getSelectedFile().toString();
    String[] lines = GlobalMethods.getLinesFromFile(new File(path));
    jTextArea1.setText("");
    for (int i = 0; i < lines.length; i++) {
      //jTextArea1.append("" + i + " = " + lines[i] + GlobalVariables.CRLF);
      jTextArea1.append(lines[i] + GlobalVariables.CRLF);
    }
    convertBat(f);
  }//GEN-LAST:event_jComboBox1ActionPerformed

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    jfc.showOpenDialog(this);
  }//GEN-LAST:event_jButton1ActionPerformed

  private void jtaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtaMouseClicked
    if (evt.getClickCount() > 2) {
      jta.setText("");
    }
  }//GEN-LAST:event_jtaMouseClicked
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton1;
  static javax.swing.JComboBox jComboBox1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JTextArea jTextArea1;
  private javax.swing.JTextArea jta;
  // End of variables declaration//GEN-END:variables

  private void convertBat(String fname) {
    File f = new File(fixPath(fname));
    //jf.setTitle(fname);
    int batline = 0;
    int badlines = 0;
    String[] lines = jTextArea1.getText().trim().replace("  ", " ").split(CRLF);
    for (int i = 0; i < lines.length; i++) {

//      if (lines[i].endsWith(".bmp")) {
//        batline += 1;
//      }
//      if (batline % 2 == 0) {
//        jta.append(GlobalMethods.comment("-", 20));
//      }
      String[] parts = lines[i].replace("\t", "").split(" ");
//      for (int j = 0; j < parts.length; j++) {
//        //System.out.print("" + j + "=" + parts[j] + " ");
//      }
      System.out.println("");
      if (parts[0].startsWith("#") | parts[0].startsWith("'")) {
        jta.append("//" + lines[i] + CRLF);
        continue;
      }
      switch (parts[0].toLowerCase()) {
        case "cls": {
          jta.append("cls" + CRLF);
          break;
        }
        case "cd": {
          String path = fixPath(parts[1]);
          System.out.println("CD" + " " + path);
//          System.out.println("path" + " = " + path);
          jta.append("CD " + path + CRLF);
          jfc.setCurrentDirectory(new File(path));
          jta.append("\tdir" + " = " + jfc.getCurrentDirectory() + CRLF);
//          jfc.showOpenDialog(this);
          break;
        }
        case "annotate": {
//          File fi = new File(fixPath(parts[2]));
          String src = fixPath(parts[2]);
          String out = fixPath(parts[4]);
          jta.append("annotate ".toUpperCase() + jfc.getCurrentDirectory()
            .toString()
            + FS + src + "  SAVE IN " + GlobalVariables.CB + FS + out + CRLF);
          annotate(src, out);
          break;
        }
        case "scantobmp": {
          jta.append("scantobmp DOES NOTHING".toUpperCase() + CRLF);
          break;
        }
        case "gtltobmp": {
          jta.append("gtltobmp DOES NOTHING".toUpperCase() + CRLF);
          break;
        }
        case "bmptogtl": {
          jta.append("bmptogtl DOES NOTHING".toUpperCase() + CRLF);
          break;
        }
        case "":
        case " ":
        case "exit": {
          break;
        }
        default: {
          jta.append("??" + " = " + parts[0] + CRLF);
          JOptionPane.showMessageDialog(this, lines[i]);
          badlines += 1;
          break;
        }
      }
    }
    jta.append("" + badlines + " badlines");
  }

  private void annotate(String src, String output) {
    File in = new File(fixPath(src));
    File out = new File(fixPath(output));
    int batline = 0;
    jfc.setCurrentDirectory(new File(fixPath(out.toString())));
    try {
      String[] words = out.list();
      if (words.length > 0) {
        System.out.print(GlobalMethods.comment("=", 20));
        System.out.println("Save to " + fixPath(output));
        for (int i = 0; i < words.length; i++) {
          System.out.println("" + " = " + fixPath(words[i]));
        }
      }
      String[] lines = GlobalMethods.getLinesFromFile(new File(fixPath(in
        .toString())));
      int count = 0;
      for (int i = 0; i < lines.length; i++) {
        String[] bits = lines[i].split(" ");
        if (lines[i].length() > 0) {
          jta.append("\t" + lines[i] + CRLF);
          if (lines[i].toLowerCase().endsWith(".bmp")) {
            batline += 1;
            if (batline % 2 == 0) {
              jta.append("SAVE AS " + GlobalVariables.CB + FS + fixPath(output)
                + lines[i].replace(".bmp", ".gif") + CRLF);
              jta.append(GlobalMethods.comment("-", 20));
              count += 1;
            } else if (batline % 2 == 1) {
              String it = fixPath(GlobalVariables.BMP + FS
                + lines[i].replace(".bmp", ".gif")) + CRLF;
              jta.append("\t\tbi = ImageIO.read(" + it.replace(CRLF, "") + ")"
                + CRLF);

              BufferedImage bi;
              try {
                bi = ImageIO.read(new File(it));
              } catch (Exception e) {
                int start = it.lastIndexOf(FS);
                String dir = it.substring(0, start + 1);
                System.out.println("dir" + " = " + fixPath(dir));
                String filename = it.substring(start + 1, it.length() - 1)
                  .replace("bmp", "gif");
                filename = GlobalMethods.capWords(filename);
                System.out.println("p2" + " = " + filename);
                jta.append("\t\tbi = ImageIO.read(" + GlobalVariables.BMP + FS
                  + filename.replace(CRLF, "") + ")" + CRLF);
//                bi = ImageIO.read(new File(it));
              }

            }
          }
          //Internal picture BufferedImage
          if (bits[0].endsWith("bmp") & bits.length > 1) {
            jta.append("\t\tbi = ImageIO.read(" + GlobalVariables.CB + output
              + bits[0].replace(CRLF, "") + ")" + CRLF);
          }
          //BMP
          if (bits.length == 4) {
            jta.append("\t\tX=" + bits[1].toUpperCase() + " ");
            jta.append("Y=" + bits[2].toUpperCase() + " ");
            jta.append("COL=" + bits[3].toUpperCase() + " ");
            jta.append(CRLF);
          }
          //TEXT
          if (bits.length > 4) {
            String str = "";
            jta.append("\t\t");
            for (int j = 0; j < (bits.length - 5); j++) {
              str += bits[j] + " ";
              jta.append(str);
            }
            jta.append(CRLF);
            jta.append("\t\t");
            if (bits[bits.length - 5].toLowerCase() != "c") {
              jta.append("X=" + bits[bits.length - 5].toUpperCase() + " ");
            } else {
              jta.append("X=CENTERED");
            }
            if (bits[bits.length - 4].toLowerCase() != "c") {
              jta.append("Y=" + bits[bits.length - 4].toUpperCase() + " ");
            } else {
              jta.append("Y=CENTERED ");
            }
            //jta.append("Y=" + bits[bits.length - 4] + " ");
            jta.append("SIZE=" + bits[bits.length - 3].toUpperCase() + " ");
            jta.append("ALIGN=" + bits[bits.length - 2].toUpperCase() + " ");
            jta.append("COLOR=" + bits[bits.length - 1].toUpperCase() + " ");
            jta.append(CRLF);
          }
        }
      }
      jta.append(String.format("%d files" + CRLF, count));
      jta.append(GlobalMethods.comment("=", 30));

    } catch (Exception e) {
      System.out.println("" + " = " + e);
    }
  }

  private String fixPath(String string) {
    string = string
      .replace("  ", " ")
      .replace("\t", "")
      .replace("\t", "")
      .replace("\t", "")
      .replace("CYBERBOARD", "Cyberboard")
      .replace("bmp", "BMP")
      //
      .replace("arm", "Arm")
      .replace("Armytypes.cfg", "ArmyTypes.cfg")
      .replace("com", "Com")
      //
      .replace(FS + "as" + FS, FS + "AS" + FS)
      .replace(FS + "bc" + FS, FS + "BC" + FS)
      .replace(FS + "gt" + FS, FS + "GT" + FS)
      .replace(FS + "la" + FS, FS + "LA" + FS)
      .replace(FS + "li" + FS, FS + "LI" + FS)
      .replace(FS + "ri" + FS, FS + "RI" + FS)
      //
      .replace(FS + "cor" + FS, FS + "Cor" + FS)
      //
      .replace(FS + "div" + FS, FS + "Div" + FS)
      //
      .replace(FS + "fie" + FS, FS + "Fie" + FS)
      //
      .replace(FS + "hus" + FS, FS + "Hus" + FS)
      .replace(FS + "huscarles", FS + "Huscarles")
      //
      .replace(FS + "mer" + FS, FS + "Mer" + FS)
      //
      .replace(FS + "ran" + FS, FS + "Ran" + FS)
      //
      .replace(FS + "sec" + FS, FS + "Sec" + FS)
      //
      .replace(FS + "sections", FS + "Sections")
      .replace(FS + "ass" + FS, FS + "ASS" + FS)
      .replace(FS + "bcs" + FS, FS + "BCS" + FS)
      .replace(FS + "gts" + FS, FS + "GTS" + FS)
      .replace(FS + "las" + FS, FS + "LAS" + FS)
      .replace(FS + "lis" + FS, FS + "LIS" + FS)
      .replace(FS + "ris" + FS, FS + "RIS" + FS)
      .replace(FS + "asb" + FS, FS + "ASB" + FS)
      .replace(FS + "bcd" + FS, FS + "BCD" + FS)
      .replace(FS + "gtb" + FS, FS + "GTB" + FS)
      .replace(FS + "lab" + FS, FS + "LAB" + FS)
      .replace(FS + "lib" + FS, FS + "LIB" + FS)
      .replace(FS + "rib" + FS, FS + "RIB" + FS)
      .replace(FS + "assec", FS + "ASSec")
      .replace(FS + "bcsec", FS + "BCSec")
      .replace(FS + "gtsec", FS + "GTSec")
      .replace(FS + "lasec", FS + "LASec")
      .replace(FS + "lisec", FS + "LISec")
      .replace(FS + "risec", FS + "RISec")
      //
      .replace(FS + "squ" + FS, FS + "Squ" + FS)
      .replace(FS + "squa", FS + "Squa")
      //
      .replace(FS + "lasqu", FS + "LASqu")
      .replace(FS + "lisqu", FS + "LISqu")
      .replace(FS + "risqu", FS + "RISqu")
      .replace(FS + "assqu", FS + "ASSqu")
      .replace(FS + "bcsqu", FS + "BCSqu")
      .replace(FS + "gtsqu", FS + "GTSqu")
      //
      .replace(FS + "sun" + FS, FS + "Sun" + FS)
      .replace(FS + "sunbursts", FS + "Sunbursts")
      //
      .replace(FS + "uni" + FS, FS + "Uni" + FS)
      .replace(FS + "unit", FS + "Unit")
      //
      .replace(FS + "mar" + FS, FS + "MAR" + FS)
      .replace(FS + "macr" + FS, FS + "MACR" + FS)
      .replace(FS + "mlr" + FS, FS + "MLR" + FS)
      //
      .replace("har", "Har")
      .replace("cra", "Cra")
      .replace("shi", "Shi")
      .replace("veh", "Veh")
      .replace("wea", "Wea")
      //
      .replace("tmp", "Tmp")
      //
      .replace("mer", "Mer")
      .replace("MER", "Mer")
      .replace("meg", "Meg")
      .replace("mod", "Mod")
      .replace("pas", "Pas")
      .replace("car", "Car")
      .replace("com", "Com")
      .replace("CONT", "Cont")
      .replace("haz", "Haz")
      .replace("ranks", "Ranks")
      //
      //            .replace("BMP/Mer/BMP/Mer", "BMP/Mer")
      .replace("BMP" + FS + "Mer" + FS + "Com" + FS + "BMP" + FS + "Mer" + FS,
        "BMP" + FS + "Mer" + FS + "")
      .replace("BMP" + FS + "Mer" + FS + "BMP" + FS + "Mer" + FS,
        "BMP" + FS + "Mer" + FS + "")
      .replace("BMP" + FS + "Mer" + FS + "BMP" + FS + "Mer" + FS,
        "BMP" + FS + "Mer" + FS)
      .replace("BMP" + FS + "Mer" + FS + "BMP" + FS + "Mer",
        GlobalVariables.BMP + FS + "Mer")
      .replace("megacorps", "Megacorps")
      .replace("mod", "Mod")
      .replace("com", "Com")
      .replace("companies", "Companies")
      .replace("passenger", "Passenger")
      .replace("ran", "Ran")
      //
      .replace("\"", "")
      .replace("\t", "")
      .replace("\t", "");
    return string;
  }
}
