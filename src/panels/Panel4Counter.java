/*

 Copyright (C) 2014 Mark Ferguson



 This program is free software: you can redistribute it and/or modify

 it under the terms of the GNU General Public License as published by

 the Free Software Foundation, either version 3 of the License, or

 (at your option) any later version.



 This program is distributed in the hope that it will be useful,

 but WITHOUT ANY WARRANTY; without even the implied warranty of

 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 GNU General Public License for more details.



 You should have received a copy of the GNU General Public License

 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 */
package panels;

import dbviewer.MyFonts;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.awt.PaintContext;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.ColorModel;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 <p>
 @author maggot
 */
public class Panel4Counter extends Panel4 implements ChangeListener {

  private static JPanel p4col;
  private static JFrame f4col;
  private static JColorChooser jc;
  private static Color col;
  private static JTextField jtf = new JTextField();

  /**
   <p>
   @param args strings to start
   */
  public static void main(String[] args) {
    p4col = new Panel4Counter();
    f4col = new Frame4(p4col);
  }

  /**
   Creates new form Panel4Counter
   */
  public Panel4Counter() {
    initComponents();
    this.col = this.getBackground();
  }

  /**
   <p>
   @return name of class
   */
  @Override
  public String toString() {
    return "" + getClass().getName() + "[]";
  }

  /**
   <p>
   @param e ChangeEvent
   */
  @Override
  public void stateChanged(ChangeEvent e) {
    ////System.out.print("" + " = " + e.toString());
    this.col = this.jc.getColor();
    //System.out.print("this.col" + " = " + this.col);
    this.setBackground(this.col);
    //System.out.print("this.getBackground" + " = " + this.getBackground());
  }

  /**
   This method is called from within the constructor to initialize the form.
   WARNING: Do NOT modify this code. The content of this method is always
   regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jColorChooser1 = new javax.swing.JColorChooser();
    jComboBox1 = new javax.swing.JComboBox();
    jTextField1 = new javax.swing.JTextField();
    jTextField2 = new javax.swing.JTextField();
    jTextField3 = new javax.swing.JTextField();
    jLabel1 = new javax.swing.JLabel();

    setBackground(new java.awt.Color(255, 255, 255));
    setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
    setMinimumSize(new java.awt.Dimension(100, 100));
    setName(""); // NOI18N
    setOpaque(true);
    setPreferredSize(new java.awt.Dimension(100, 140));
    addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        formMouseClicked(evt);
      }
    });

    jComboBox1.setBackground(java.awt.Color.lightGray);
    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "setBackground", "setBorder", "setImage", "setSmallImage", "setFont" }));
    jComboBox1.setOpaque(false);
    jComboBox1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jComboBox1ActionPerformed(evt);
      }
    });

    jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    jTextField1.setName("top"); // NOI18N
    jTextField1.setOpaque(false);
    jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jTextField1MouseClicked(evt);
      }
    });
    jTextField1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jTextField1ActionPerformed(evt);
      }
    });

    jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    jTextField2.setName("middle"); // NOI18N
    jTextField2.setOpaque(false);
    jTextField2.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jTextField2MouseClicked(evt);
      }
    });

    jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    jTextField3.setName("bottom"); // NOI18N
    jTextField3.setOpaque(false);
    jTextField3.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jTextField3MouseClicked(evt);
      }
    });

    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jTextField1)
      .addComponent(jTextField2)
      .addComponent(jTextField3)
      .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
          .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGap(0, 0, Short.MAX_VALUE)))
    );

    jComboBox1.getAccessibleContext().setAccessibleDescription("");
  }// </editor-fold>//GEN-END:initComponents

  private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
    if (evt.getClickCount() > 1) {
      setBackground();
    }
  }//GEN-LAST:event_formMouseClicked

  private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
    if (evt.getClickCount() > 2) {
      setFont(evt, 0);
    }
  }//GEN-LAST:event_jTextField1MouseClicked

  private void jTextField2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField2MouseClicked
    if (evt.getClickCount() > 2) {
      setFont(evt, 1);
    }
  }//GEN-LAST:event_jTextField2MouseClicked

  private void jTextField3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField3MouseClicked
    if (evt.getClickCount() > 2) {
      setFont(evt, 2);
    }
  }//GEN-LAST:event_jTextField3MouseClicked

  private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
    doOption(this.jComboBox1.getSelectedItem().toString(), null);
    jComboBox1.setSelectedIndex(0);

  }//GEN-LAST:event_jComboBox1ActionPerformed

  private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_jTextField1ActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JColorChooser jColorChooser1;
  private javax.swing.JComboBox jComboBox1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JTextField jTextField1;
  private javax.swing.JTextField jTextField2;
  private javax.swing.JTextField jTextField3;
  // End of variables declaration//GEN-END:variables

  private void resetFont() {
    String font = MyFonts.getFontName();
    int style = MyFonts.getFontStyle();
    int size = MyFonts.getFontSize();
    Font f = new Font(font, style, size);
    this.jTextField1.setFont(f);
  }

  private void reset() {
  }

  private void setBackground() {
    this.p4col = new Panel4("ColorChooser");
    this.jc = new JColorChooser(this.getForeground());
    this.p4col.add(this.jc);
    this.f4col = new Frame4(this.p4col);
    this.f4col.setSize(this.f4col.getWidth() / 2, this.f4col.getHeight() / 2);
    Color newColor = this.jc.getColor();
    this.p4col.setForeground(newColor);
    this.col = newColor;
    this.jc.getSelectionModel().addChangeListener(this);
  }

  private void setBorder() {
    //CJF1-p385-389
    Border bevel = BorderFactory
      .createBevelBorder(3, Color.blue, Color.darkGray, Color.orange,
        Color.white);
    //------------------------
    Border bb = BorderFactory.createBevelBorder(5);
    //------------------------
    CompoundBorder cb = BorderFactory.createCompoundBorder();
    //------------------------
    Paint paint = new Paint() {
      @Override
      public PaintContext createContext(ColorModel cm, Rectangle rctngl,
        Rectangle2D rd, AffineTransform at, RenderingHints rh) {
        throw new UnsupportedOperationException("Not supported yet.");
      }

      @Override
      public int getTransparency() {
        throw new UnsupportedOperationException("Not supported yet.");
      }
    };
    BorderFactory.createDashedBorder(paint);
    //------------------------
    Border mt = BorderFactory.createEmptyBorder();
    //------------------------
//    Border eb = BorderFactory.createEtchedBorder(3);
    //------------------------
    Border lb = BorderFactory.createLineBorder(Color.green);
    //------------------------
    Border lbb = BorderFactory.createLoweredBevelBorder();
    //------------------------
    Border lsbb = BorderFactory.createLoweredSoftBevelBorder();
    //------------------------
    Border mb = BorderFactory.createMatteBorder(WIDTH, WIDTH, WIDTH, WIDTH, col);
    //------------------------
    Border rbb = BorderFactory.createRaisedBevelBorder();
    //------------------------
    Border rsbb = BorderFactory.createRaisedSoftBevelBorder();
    //------------------------
    Border sbb = BorderFactory.createSoftBevelBorder(3);
    //------------------------
    BasicStroke bs = new BasicStroke();
    Border b = BorderFactory.createStrokeBorder(bs);
    //------------------------
    Border tb = BorderFactory.createTitledBorder(bevel);
    //------------------------
    Border tb2 = BorderFactory.createTitledBorder("Border");
    //------------------------
    this.p4col.setBorder(mt);
  }

  private void setImage() {
    dbviewer.DBPublic.CBView(dbviewer.globals.GlobalVariables.BMP);
    int reply = dbviewer.DBViewer.jfc.showOpenDialog(this);
    if (reply == JFileChooser.APPROVE_OPTION) {
      String string = dbviewer.DBViewer.jfc.getSelectedFile().toString();
      //System.out.print("" + string);
      jLabel1.setIcon(new ImageIcon(string));

    }
  }

  private void setSmallImage() {
    dbviewer.DBPublic.CBView(dbviewer.globals.GlobalVariables.BMP);
    int reply = dbviewer.DBViewer.jfc.showOpenDialog(this);
    if (reply == JFileChooser.APPROVE_OPTION) {
      String string = dbviewer.DBViewer.jfc.getSelectedFile().toString();
      //System.out.print("" + string);
      jLabel1.setIcon(new ImageIcon(string));
    }
  }

  /**
   @param evt MouseEvent
   @param num number of JTextField
   */
  private void setFont(java.awt.event.MouseEvent evt, int num) {
    //System.out.print("evt" + " = " +evt);
    dbviewer.DBPublic.Fonts();
    //System.out.print("" + " = " + this.getName());
    if (num == 0) {
      jtf = this.jTextField1;
    } else if (num == 1) {
      jtf = this.jTextField2;
    } else if (num == 2) {
      jtf = this.jTextField3;
    } else {
      return;
    }
    jtf.setToolTipText(MyFonts.getFontInfo());
    jtf.setFont(new Font(MyFonts.getFontName(), MyFonts.getFontStyle(), MyFonts
      .getFontSize()));
    jtf.validate();
  }

  /**
   <p>
   @param toString the value of toString
   @param evt      MouseEvent
   */
  private void doOption(String toString, java.awt.event.MouseEvent evt) {
    //System.out.print("");
    //System.out.print("\t" + toString);
    switch (this.jComboBox1.getSelectedItem().toString()) {
      //        -
      case "-": {
        reset();
        break;
      }
      //setBackground
      case "setBackground": {
        setBackground();
        break;
      }
      //setBorder
      case "setBorder": {
        setBorder();
        break;
      }
      //setImage
      case "setImage": {
        setImage();
        break;
      }
      //setSmallImage
      case "setSmallImage": {
        setSmallImage();
        break;
      }
      //setFont
      case "setFont": {
        setFont(evt, 0);
        break;
      }
    }
  }
}
