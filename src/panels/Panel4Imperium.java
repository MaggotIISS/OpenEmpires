/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package panels;import dbviewer.DBPublic;import dbviewer.SaveOutputWindow;import dbviewer.globals.GlobalMethods;import static dbviewer.globals.GlobalMethods.countLines;import dbviewer.globals.GlobalVariables;import static dbviewer.globals.GlobalVariables.T5;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Point;import java.awt.Rectangle;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.awt.event.MouseMotionAdapter;import java.awt.event.MouseWheelEvent;import java.awt.event.MouseWheelListener;import java.awt.image.BufferedImage;import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.util.Arrays;import java.util.logging.Level;import java.util.logging.Logger;import javax.imageio.ImageIO;import javax.swing.ComboBoxModel;import javax.swing.DefaultComboBoxModel;import javax.swing.ImageIcon;import javax.swing.JComboBox;import javax.swing.JFileChooser;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTextArea;/** <p> @author maggot */public class Panel4Imperium extends Panel4 {  /**   previoustext   */  public static String previoustext = "";//Panel4Imperium.sow.getText();  /**   p4l   */  public static JPanel p4l = new Panel4Locator();  /**   p4i   */  public static JPanel p4i = null;  /**   p4j   */  public static JPanel p4j = null;  /**   p4s   */  public static JPanel p4s = null;  /**   p4Imp   */  public static final JPanel p4Imp = new Panel4("Imperium");  /**   f4Imp   */  public static final JFrame f4Imp = new Frame4(p4Imp);  /**   sow   */  public static SaveOutputWindow sow;  /**   vis   */  public static boolean vis = false;  /**   label   */  public static JLabel label;  /**   jsp   */  public static JScrollPane jsp;  /**   p4n   */  public static Panel4Neighbours p4n;  private int secwid;  private int sechgt;  /**   sectors   */  public static String[] sectors;  private static String[] subsectors;  /**   Systems   */  public static String[] Systems;  /**   x   */  public int x;  /**   y   */  public int y;  int secx = 12;  int secy = 9;  int startx = -4;  int starty = 3;  static DefaultComboBoxModel dcbm;  /**   subs   */  public static String[][] subs = {    {"P", "M", "N", "O", "P", "M"},    {"D", "A", "B", "C", "D", "A"},    {"H", "E", "F", "G", "H", "E"},    {"L", "I", "J", "K", "L", "I"},    {"P", "M", "N", "O", "P", "M"},    {"D", "A", "B", "C", "D", "A"}  };  /**   <p>   @param args strings to start   */  public static void main(String[] args) {    new Panel4Imperium();  }  /**   Panel4Imperium   */  public Panel4Imperium() {    super();    try {      setName("p4i");      Panel4Locator.prevpanel = "p4i";      label = new JLabel("");//hold pic      jsp = new JScrollPane(label);      jsp.setName("p4i");//    jsp.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);//    jsp.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);//      jsp.setPreferredSize(new Dimension((int) (p4Imp.getSize().getWidth() - 100), p4Imp.getHeight() - 100));      p4Imp.add(p4l, BorderLayout.NORTH);      p4Imp.add(jsp, BorderLayout.CENTER);      String file = "./BMP/Imp/allmap.gif";      ImageIcon imic = null;      BufferedImage im = null;      try {        im = ImageIO.read(new File(file));        imic = new ImageIcon(im);      } catch (IOException ex) {        Logger.getLogger(DBPublic.class.getName()).log(Level.SEVERE, null, ex);      }      secwid = im.getWidth() / secx;      sechgt = im.getHeight() / secy;      readSectors(sectors, "");      readSubSectors("");//    readSystems(systems);      label.setIcon(imic);      label.addMouseMotionListener(new MouseMotionAdapter() {        @Override        public void mouseMoved(MouseEvent e) {          try {            BufferedReader in = null;            try {              x = (int) (e.getLocationOnScreen().getX() - label                .getLocationOnScreen().getX());              y = (int) (e.getLocationOnScreen().getY() - label                .getLocationOnScreen().getY());              String text = "" + (-4 + (x / secwid) + startx) + "," + -(-6 + (y                / sechgt) + starty) + "";              label.setToolTipText(text);              String[] s = text.split(",");              //Search file for tooltiptext, then put name into tooltiptext              File f = new File(T5 + "/CSV/uwp-sector");              in = new BufferedReader(new FileReader(f));              String line;              String[] sections;              String[] ttt = text.split(",");              try {                while ((line = in.readLine()) != null) {                  sections = line.split("\",\"");                  if ((sections[2].equals(ttt[0]))                    & (sections[3].equals(ttt[1]))) {                    label.setToolTipText(sections[0].substring(1));// + "(" + text + ")");                    Panel4Locator.jcb4Sector.getModel().setSelectedItem(label                      .getToolTipText());                    Panel4Locator.Xnum                      .setText("" + (-4 + (x / secwid) + startx));                    Panel4Locator.Ynum.setText(""                      + -(-6 + (y / sechgt) + starty));                    break;                  }                }                in.close();              } catch (IOException ex) {                Logger.getLogger(DBPublic.class.getName()).log(Level.SEVERE,                  null, ex);              }            } catch (FileNotFoundException ex) {              Logger.getLogger(DBPublic.class.getName()).log(Level.SEVERE, null,                ex);            } finally {              try {                in.close();              } catch (IOException ex) {                Logger.getLogger(DBPublic.class.getName()).log(Level.SEVERE,                  null, ex);              }            }            //Now require top left coord of sector to be reset to 0 to find subsector;            int subwid = label.getWidth() / secx / 4; // 16 PIXELS            int subhgt = label.getHeight() / secy / 4; // 20 PIXELS            Point mlos = e.getLocationOnScreen();// in pixels            Point llos = label.getLocationOnScreen();// in pixels//        //205,72 for top left of LABEL//        ////System.out.print("lab.getWidth()" + " = " + lab.getWidth());// in pixels//        ////System.out.print("lab.getHeight()" + " = " + lab.getHeight());// in pixels//        //769 x 721 = 12 x 9 sectors//        //768/12/4 = subsector width = 16//        //720/9/4 = subsector height = 20//        //X & Y sector coords in Panel4Locator convert to across,down (+8,-3)            int across = (Integer.parseInt(Panel4Locator.getXnum().getText())              + 8);// in sectors            int down              = -(Integer.parseInt(Panel4Locator.getYnum().getText()) - 3);// in sectors            int secleft = (label.getWidth() / 12) * across;// in pixels            int secdown = (label.getHeight() / 9) * down;// in pixels            //Which subsector are we in?            Rectangle tocover = new Rectangle(secleft, secdown, subwid * 4,              subhgt * 4);// in pixels            int xtop = mlos.x - llos.x;// in pixels            int ytop = mlos.y - llos.y;// in pixels            //localize to sector            int xs = xtop - (across * secwid);            int ys = ytop - (down * sechgt);            //1,1 to 64,80 !            int xsub = xs / 16;            int ysub = ys / 20;            String secname = Panel4Locator.getSectorName();            // now we know which subsector of which sector, so we can search for name in File            readSubSectors(secname);            int x = Integer.parseInt(Panel4Locator.getXnum().getText());            int y = Integer.parseInt(Panel4Locator.getYnum().getText());            String[] replies = Panel4Locator.getNeighbours(x, y, true);            String dir = GlobalVariables.IMP;            dir += GlobalVariables.FS + Panel4Locator.getSector()              .substring(0, 4).toUpperCase();            sow.setTitle(dir);            sow.setCurrentDirectory(dir);            sow.setSelectedFile(Panel4Locator.getSectorName() + ".txt");            //<editor-fold defaultstate="collapsed" desc="select sector">            //Display info in SaveOutputWindow            sow.clear();            sow.append("\tSector information" + GlobalVariables.CRLF);            File f = new File(T5 + "/CSV/uwp-sector");            try {              in = new BufferedReader(new FileReader(f));              String[] lines = new String[GlobalMethods.countLines(f)];              String line;              String[] titles = null;              String[] parts = null;              int i = 0;              try {                while ((line = in.readLine()) != null) {                  lines[i] = line;                  if (i == 0) {                    titles = lines[0].split("\",\"");                  }                  parts = line.split("\",\"");                  i += 1;                  // only for selected sector Panel4Locator.getSectorName == parts[0]                  if (parts[0].contains(Panel4Locator.getSectorName())) {                    for (int j = 0; j < parts.length; j++) {                      sow.append("" + titles[j].replace("\"", "") + " = "                        + parts[j].replace("\"", "") + GlobalVariables.CRLF);                    }                    sow.append("=====================" + GlobalVariables.CRLF);                  }                }                in.close();              } catch (IOException ex) {                Logger.getLogger(Panel4Imperium.class.getName()).log(                  Level.SEVERE, null, ex);              }            } catch (FileNotFoundException ex) {              Logger.getLogger(Panel4Imperium.class.getName()).log(Level.SEVERE,                null, ex);            }            //</editor-fold>            //update Panel4Neighbours            Panel4Neighbours.centreOnRectangle(Panel4Locator.getSectorName(),              Panel4Locator.getSubSectorName(), "0101", true);            blacken();          } catch (Exception ex) {            Logger.getLogger(Panel4Imperium.class.getName()).log(Level.SEVERE,              null, ex);          }        }      });      label.addMouseListener(new MouseAdapter() {        @Override        public void mouseClicked(MouseEvent e) {          //<editor-fold defaultstate="collapsed" desc="DEBUG">          boolean DEBUG = false;          if (DEBUG) { // true or false            ////System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());            ////System.out.print("" + " = " + );          }//</editor-fold>//        if (e.getClickCount() == 1) {//          //Panel4Neighbours.centreOnRectangle(Panel4Locator.getSector(), Panel4Locator.getSubSectorName(), "Test", true);//          //System.out.print("mouseClicked(MouseEvent e)");//        }//        if (e.getClickCount() == 1) {          //<editor-fold defaultstate="collapsed" desc="showPanel4Jump">//          Panel4Locator.oldpanel = "p4i";          previoustext = Panel4Imperium.sow.getText();          jsp.setVisible(false);          if (p4j == null) {            p4j = new Panel4Jump();            repaint();          } else {            p4j.setVisible(true);          }          f4Imp.add(p4j);          f4Imp.setPreferredSize(            new Dimension((f4Imp.getHeight() * 8 / 11) + 75, f4Imp.getHeight()));          f4Imp.setSize(f4Imp.getPreferredSize());          //</editor-fold>//        } else {          //<editor-fold defaultstate="collapsed" desc="select sector">//          //Display info in SaveOutputWindow//          sow.clear();//          sow.append("\tSector information" + GlobalVariables.CRLF);//          File f = new File(T5 + "/CSV/uwp-sector");//          try {//            BufferedReader in = new BufferedReader(new FileReader(f));//            String[] lines = new String[globals.GlobalMethods.countLines(f)];//            String line;//            String[] titles = null;//            String[] parts = null;//            int i = 0;//            try {//              while ((line = in.readLine()) != null) {//                lines[i] = line;//                if (i == 0) {//                  titles = lines[0].split("\",\"");//                }//                parts = line.split("\",\"");//                i += 1;//                // only for selected sector Panel4Locator.getSectorName == parts[0]//                if (parts[0].contains(Panel4Locator.getSectorName())) {//                  for (int j = 0; j < parts.length; j++) {//                    sow.append("" + titles[j].replace("\"", "") + " = " + parts[j].replace("\"", "") + globals.GlobalVariables.CRLF);//                  }//                  sow.append("=====================" + globals.GlobalVariables.CRLF);//                }//              }//            } catch (IOException ex) {//              Logger.getLogger(Panel4Imperium.class.getName()).log(Level.SEVERE, null, ex);//            }//          } catch (FileNotFoundException ex) {//            Logger.getLogger(Panel4Imperium.class.getName()).log(Level.SEVERE, null, ex);//          }          //</editor-fold>//        }        }      });      String path = T5 + "/CSV/";      JFileChooser chooser = dbviewer.DBViewer.jfc;      chooser.setSelectedFile(new File(path + ".txt"));      sow = new SaveOutputWindow(path);      sow.setBounds(800, 0, 300, 700);      String dir = GlobalVariables.IMP;      dir += GlobalVariables.FS + Panel4Locator.getSectorName().substring(0, 4)        .toUpperCase();      sow.setTitle(dir);      sow.setSelectedFile(Panel4Locator.getSectorName() + ".txt");      Panel4Locator.jButton1.setEnabled(true);      Panel4Locator.jcb4Sector.setEnabled(true);      Panel4Locator.jcb4SubSector.setEnabled(true);      Panel4Locator.jcb4System.setEnabled(true);      //Panel4Neighbours p4n = new Panel4Neighbours();      p4n = new Panel4Neighbours();      p4n.setName("Neighbours");      JFrame f4n = new Frame4(p4n);      f4n.setBounds(f4n.getLocationOnScreen().x + f4n.getWidth(), p4Imp.getY(),        400, 800);      label.addMouseWheelListener(new MouseWheelListener() {        @Override        public void mouseWheelMoved(MouseWheelEvent e) {          //System.out.print("" + " = " + e.toString());        }      });      GlobalMethods.autoColor(p4l, Color.black, Color.lightGray);      Systems = GlobalMethods.getLinesFromFile(new File(T5 + "/CSV/uwp-worlds"));//    jsp.setSize(p4i.getWidth(),p4i.getHeight());    } catch (Exception ex) {      Logger.getLogger(Panel4Imperium.class.getName()).log(Level.SEVERE, null,        ex);    }//    GraphicsDevice screen = null;//    try {//      Robot r = new Robot(screen);//      r.mouseMove(0, 0);//    } catch (AWTException ex) {//      Logger.getLogger(Panel4Imperium.class.getName()).log(Level.SEVERE, null, ex);//    }  }  /**   <p>   @param title string to setTitle and setName   */  public Panel4Imperium(String title) {    this();    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      ////System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("" + " = " + );    }//</editor-fold>    f4Imp.setTitle(title);    p4Imp.setName(title);  }  private void addNoDupes(JComboBox<String> jcb, String string) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      ////System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("" + " = " + );    }//</editor-fold>    ComboBoxModel<String> cbm = jcb.getModel();    boolean found = false;    for (int i = 0; i < cbm.getSize(); i++) {      if (cbm.getElementAt(i).toString().equals(string)) {        ////System.out.print("" + " = " + cbm.getElementAt(i));        found = true;        break;      }    }    if (!found) {      jcb.addItem(string);    }  }  /**   <p>   @param string     string to search   @param sectorname string to search for   */  @SuppressWarnings({"unchecked", "unchecked"})  public static void readSectors(String[] string, String sectorname) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      ////System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("" + " = " + );    }//</editor-fold>    File file = new File(T5 + "/CSV/uwp-sector");    string = new String[countLines(file)];    read2Combo(string, file.toString(), 1);    Panel4Locator.setModel4Sector(dcbm);    DefaultComboBoxModel<String> dcbm2 = new DefaultComboBoxModel<>();    if (!"".equals(sectorname)) {      //seach for string in list, copy those subsector names      //in case of double entry      subsectors = new String[9];      String line;      String[] lines = new String[9];      String[] sections;      String[] results;      try {        //split lines into 10 sections,[0]=SectorName, [1]=Code, [2]=X, [3]=Y        File f = file;        BufferedReader in = new BufferedReader(new FileReader(f));        try {          int i = 0;          while (((line = in.readLine()) != null)) {            sections = line.split("\",\"");            String source = sections[1].substring(0).toLowerCase();            String target = string[i].toLowerCase();            if ((source.equals(target)) & (!"".equals(sections[0].substring(1)))              & (sections[0].substring(1) != null)) {              String reply = "" + sections[2].substring(0) + " = "                + sections[0].substring(1);              ////System.out.print("" + reply);              lines[i++] = reply;              dcbm2.addElement(reply);            }            //Arrays.sort(lines);          }          in.close();        } catch (IOException ex) {          Logger.getLogger(DBPublic.class.getName()).log(Level.SEVERE, null, ex);        }      } catch (FileNotFoundException ex) {        Logger.getLogger(DBPublic.class.getName()).log(Level.SEVERE, null, ex);      }    }//    for(int i=0; i<dcbm2.getSize(); i++) {//      ////System.out.print("" + " = " + dcbm2.getElementAt(i));//    }  }  /**   <p>   @param string to search for   */  @SuppressWarnings("unchecked")  public static void readSubSectors(String string) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      ////System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("string" + " = " + string);    }//</editor-fold>    File file = new File(T5 + "/CSV/uwp-subsec");    subsectors = new String[GlobalMethods.countLines(file)];    read2Combo(subsectors, T5 + "/CSV/uwp-subsec", 1);    Panel4Locator.setModel4SubSector(dcbm);    DefaultComboBoxModel dcbm2 = new DefaultComboBoxModel();    if (!"".equals(string)) {      //seach for string in list, copy those subsector names      subsectors = new String[GlobalMethods.countLines(file) + 1];//in case of double entry      String line;      String[] lines = new String[GlobalMethods.countLines(file) + 1];      String[] sections;      String[] results;      try {        //split lines into 10 sections,[0]=SectorName, [1]=Code, [2]=X, [3]=Y        File f = file;        BufferedReader in = new BufferedReader(new FileReader(f));        try {          int i = 0;          while (((line = in.readLine()) != null)) {            sections = line.split("\",\"");            String source = sections[1].substring(0).toLowerCase();            String target = string.toLowerCase();            if ((source.equals(target)) & (!"".equals(sections[0].substring(1)))              & (sections[0].substring(1) != null)) {              String reply = "" + sections[2].substring(0) + " - " + sections[0]                .substring(1);//              ////System.out.print("reply = " + reply);              lines[i++] = reply;              dcbm2.addElement(reply);            }            //Arrays.sort(lines);          }          in.close();        } catch (IOException ex) {          Logger.getLogger(DBPublic.class.getName()).log(Level.SEVERE, null, ex);        }      } catch (FileNotFoundException ex) {        Logger.getLogger(DBPublic.class.getName()).log(Level.SEVERE, null, ex);      }    }//Panel4Locator.setModel4SubSector(dcbm);    String[] result = new String[dcbm2.getSize()];    for (int i = 0; i < dcbm2.getSize(); i++) {      ////System.out.print("dcbm2.getElementAt(" + i + ")" + " = " + dcbm2.getElementAt(i));      result[i] = dcbm2.getElementAt(i).toString();    }    Arrays.sort(result);    dcbm2.removeAllElements();    for (int i = 0; i < result.length; i++) {      dcbm2.addElement(result[i]);    }    // ok, got subsector names and positions(A-P)    //now to clear Panel4Locator and fill with new strings    Panel4Locator.setModel4SubSector(dcbm2);  }//  /**//   *//   * @param systems//   *///  public static void readSystems(String[] systems) {//    //<editor-fold defaultstate="collapsed" desc="DEBUG">//    boolean DEBUG = false;//    if (DEBUG) { // true or false//      ////System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());//      ////System.out.print("" + " = " + );//    }////</editor-fold>//    File file = new File(T5 + "/CSV/uwp-worlds");//    systems = new String[globals.GlobalMethods.countLines(file)];//    read2Combo(systems, T5 + "/CSV/uwp-worlds", 1);//    Panel4Locator.setModel4Systems(dcbm);//  }  /**   <p>   @param lines    in file   @param filename file to load   @param sub      substring start   */  @SuppressWarnings("unchecked")  public static void read2Combo(String[] lines, String filename, int sub) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      ////System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("" + " = " + );    }//</editor-fold>    try {      //split lines into 10 sections,[0]=SectorName, [1]=Code, [2]=X, [3]=Y      File f = new File(filename);      BufferedReader in = new BufferedReader(new FileReader(f));      String line;      String[] sections;      try {        int i = 0;        while (((line = in.readLine()) != null) & (1 == 1)) {          sections = line.split("\",\"");          lines[i++] = sections[0];        }        in.close();      } catch (IOException ex) {        Logger.getLogger(DBPublic.class.getName()).log(Level.SEVERE, null, ex);      }    } catch (FileNotFoundException ex) {      Logger.getLogger(DBPublic.class.getName()).log(Level.SEVERE, null, ex);    }    Arrays.sort(lines);    dcbm = new DefaultComboBoxModel();    for (int i = 0; i < lines.length; i++) {      ////System.out.print("" + " = " +sectors[i]);      dcbm.addElement(lines[i].substring(sub));    }  }  /**   blacken   */  public static void blacken() {    JTextArea ta = null;    for (int i = 0; i < 9; i++) {      switch (i) {        case 0:          ta = Panel4Neighbours.jTextArea0;          break;        case 1:          ta = Panel4Neighbours.jTextArea1;          break;        case 2:          ta = Panel4Neighbours.jTextArea2;          break;        case 3:          ta = Panel4Neighbours.jTextArea3;          break;        case 4:          ta = Panel4Neighbours.jTextArea4;          break;        case 5:          ta = Panel4Neighbours.jTextArea5;          break;        case 6:          ta = Panel4Neighbours.jTextArea6;          break;        case 7:          ta = Panel4Neighbours.jTextArea7;          break;        case 8:          ta = Panel4Neighbours.jTextArea8;          break;      }      if (!Panel4Neighbours.isOutside(true, Panel4Neighbours.outside, ("" + i))) {        ta.append(Panel4Locator.getSector() + GlobalVariables.CRLF);        ta.setBackground(Color.CYAN);      } else {        ta.setBackground(Color.BLACK);      }    }  }  private String[] getSystems() {    Systems = GlobalMethods.getLinesFromFile(new File(T5 + "/CSV/uwp-worlds"));    return Systems;  }}