/*
 To change this license header, choose License Headers in Project Properties.
 To change this template file, choose Tools | Templates
 and open the template in the editor.
 */
package panels;

import dbviewer.globals.GlobalMethods;
import static dbviewer.globals.GlobalVariables.CRLF;
import static dbviewer.globals.GlobalVariables.FS;
import static dbviewer.globals.GlobalVariables.T5;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.BadLocationException;

/**

 @author Mark Ferguson
 */
public class Panel4T5Launch extends Panel4 {

  private static final long serialVersionUID = 1L;
  static JFrame jf1;

  /**

   @param args main startup
   */
  public static void main(String[] args) {
    SwingUtilities.invokeLater(() -> {
      JPanel jp1 = new Panel4T5Launch();
      jf1 = new Frame4(jp1);
      jf1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//      jf1.setLocation(new Point(1200, 0));
    });
  }

  /**

   */
  public JFileChooser jfc = dbviewer.DBViewer.jfc;
  private final String[] colnames = {"Ext", "Name", "Prog", "Dir"};
  private String[] lines;
  private String[] strings = new String[4];
  private int linenum = 0;
  private Runtime runtime;

  /**
   Creates new form Panel4T5Launch
   */
  public Panel4T5Launch() {
    initComponents();
    loadExternal();
  }

  /**
   This method is called from within the constructor to initialize the form.
   WARNING: Do NOT modify this code. The content of this method is always
   regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    dirButton = new javax.swing.JButton();
    jp4N = new javax.swing.JPanel();
    saveLabel = new javax.swing.JLabel();
    jp4C = new javax.swing.JPanel();
    jScrollPane2 = new javax.swing.JScrollPane();
    jta = new javax.swing.JTextArea();
    path = new javax.swing.JLabel();
    name = new javax.swing.JLabel();
    ext = new javax.swing.JLabel();
    jtf = new javax.swing.JTextField();

    dirButton.setText("...");
    dirButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        dirActionPerformed(evt);
      }
    });

    saveLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    saveLabel.setText("SAVE LIST");
    saveLabel.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        saveLabelMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout jp4NLayout = new javax.swing.GroupLayout(jp4N);
    jp4N.setLayout(jp4NLayout);
    jp4NLayout.setHorizontalGroup(
      jp4NLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(saveLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
    );
    jp4NLayout.setVerticalGroup(
      jp4NLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jp4NLayout.createSequentialGroup()
        .addComponent(saveLabel)
        .addGap(0, 2, Short.MAX_VALUE))
    );

    add(jp4N, java.awt.BorderLayout.PAGE_START);

    jp4C.setOpaque(false);

    jta.setColumns(20);
    jta.setRows(5);
    jta.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jtaMouseClicked(evt);
      }
    });
    jScrollPane2.setViewportView(jta);

    path.setForeground(java.awt.Color.lightGray);
    path.setText("path");

    name.setForeground(java.awt.Color.lightGray);
    name.setText("name");

    ext.setForeground(java.awt.Color.lightGray);
    ext.setText("ext");

    jtf.setToolTipText("Arguments");

    javax.swing.GroupLayout jp4CLayout = new javax.swing.GroupLayout(jp4C);
    jp4C.setLayout(jp4CLayout);
    jp4CLayout.setHorizontalGroup(
      jp4CLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
      .addComponent(jtf, javax.swing.GroupLayout.Alignment.TRAILING)
      .addGroup(jp4CLayout.createSequentialGroup()
        .addGap(200, 200, 200)
        .addGroup(jp4CLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(name)
          .addComponent(path)
          .addComponent(ext))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jp4CLayout.setVerticalGroup(
      jp4CLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jp4CLayout.createSequentialGroup()
        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(path)
        .addGap(0, 0, 0)
        .addComponent(name)
        .addGap(0, 0, 0)
        .addComponent(ext)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    add(jp4C, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents

  private void saveLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveLabelMouseClicked
    saveFile();
  }//GEN-LAST:event_saveLabelMouseClicked

  private void dirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dirActionPerformed
    dirButtonClick();
  }//GEN-LAST:event_dirActionPerformed

  private void jtaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtaMouseClicked
    jtaMouseClick(evt);
  }//GEN-LAST:event_jtaMouseClicked

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton dirButton;
  private javax.swing.JLabel ext;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JPanel jp4C;
  private javax.swing.JPanel jp4N;
  private javax.swing.JTextArea jta;
  private javax.swing.JTextField jtf;
  private javax.swing.JLabel name;
  private javax.swing.JLabel path;
  private javax.swing.JLabel saveLabel;
  // End of variables declaration//GEN-END:variables

  private void loadExternal() {
    File f = new File(T5 + FS + FS + "External.txt");
    if (f.exists()) {
      lines = GlobalMethods.getLinesFromFile(f);
      jta.setText("");
      for (int j = 0; j < lines.length; j++) {
        jta.append(lines[j] + CRLF);
      }
    } else {
      JOptionPane.showMessageDialog(jf,
        "Place paths to programs on seperate lines in C:/T5/Externals.txt");
    }
  }

  private void jtaMouseClick(MouseEvent evt) {
    if (evt.getClickCount() == 1) {
      jtaClick();
    } else {
      dirButtonClick();
    }
  }

  private void jtaClick() {
    runtime = Runtime.getRuntime();
    int offset = jta.getCaretPosition();
    try {
      linenum = jta.getLineOfOffset(offset);
      int num = lines[linenum].split(",").length;
      if (!lines[linenum].startsWith("//")) {
        if (num == 4) {
          strings = lines[linenum].split(",");
          if (!"".equals(strings[3])) {
            jfc.setCurrentDirectory(new File(strings[3]));
            jfc.setSelectedFile(new File(""));
            jtf.setText(strings[3]);
          }
          if ("*".equals(strings[0])) {
            jfc.setAcceptAllFileFilterUsed(true);
          }
          String[] pathfileext = getPathFileExt(strings[2]);
          path.setText(pathfileext[0].trim());
          name.setText(pathfileext[1].trim());
          ext.setText(pathfileext[2].trim());
          jtf.setText(strings[3].trim());
        } else if (lines[linenum].contains(".exe")) {
          if (lines[linenum].split(",").length == 1) {
            try {
              String a = lines[linenum];
              ProcessBuilder pb = new ProcessBuilder(a, "");
              pb.start();
            } catch (IOException ex) {
              Logger.getLogger(Panel4T5Launch.class.getName()).log(
                Level.SEVERE, null, ex);
            }
          } else if (lines[linenum].split(",").length == 2) {
            try {
              String[] strings = lines[linenum].split(",");
              String a = strings[0];
              String b = strings[1] = null;
              ProcessBuilder pb = new ProcessBuilder(a, b);
              pb.start();
            } catch (IOException ex) {
              Logger.getLogger(Panel4T5Launch.class.getName()).log(
                Level.SEVERE, null, ex);
            }
          }
        } else {
          jfc.setCurrentDirectory(new File(lines[linenum]));
          jfc.showOpenDialog(null);
        }
      }
    } catch (BadLocationException ex) {
      Logger.getLogger(Panel4T5Launch.class.getName())
        .log(Level.SEVERE, null, ex);
    }
  }

  private void dirButtonClick() {
    jfc.resetChoosableFileFilters();
    jfc.setAcceptAllFileFilterUsed(true);

    if (strings[0].equals("*")) {
      jfc.setFileFilter(null);
    } else {
      jfc.setFileFilter(new FileFilter() {

        @Override
        public boolean accept(File f) {
          if (f.isDirectory() || f.toString().toLowerCase().endsWith(strings[0]
            .toLowerCase())) {
            return true;
          } else {
            return false;
          }
        }

        @Override
        public String getDescription() {
          return (strings[1]);
        }
      });
    }
    jfc.setCurrentDirectory(new File(jtf.getText()));
    int ret = jfc.showOpenDialog(this);
    if (ret == JFileChooser.APPROVE_OPTION) {
      try {
        String b = "http://www.w3schools.com/js/default.asp";
        String a = "C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe";
        runtime = Runtime.getRuntime();
        ProcessBuilder pb = new ProcessBuilder(a, b);
        pb.start();
      } catch (IOException ex) {
        Logger.getLogger(Panel4T5Launch.class.getName()).log(Level.SEVERE, null,
          ex);
      }
    }
  }

  private void saveFile() {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
        .getMethodName());
//      System.out.println("str" + " = " + str);
    }
    //</editor-fold>
    jfc = new JFileChooser();
    File dir = new File(T5 + FS);
    jfc.setCurrentDirectory(dir);
    File file = new File("External");
    jfc.setSelectedFile(file);
    GlobalMethods.saveTextFile(dir.toString(), file.toString(), ".txt", jta
      .getText());
    loadExternal();
  }

  /**

   @param str string of path
   @return extensions of files
   */
  public String[] getPathFileExt(String str) {
    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">
    boolean DEBUG = false;
    if (DEBUG) { // true or false
      System.out.print(GlobalMethods.comment("=", 80));
      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]
        .getMethodName());
//      System.out.println("str" + " = " + str);
    }
    //</editor-fold>
    String[] parts = new String[]{"", "", "", ""};
    for (int j = 0; j < parts.length; j++) {
      switch (j) {
        case 0: {
          parts[0] = str.substring(0, str.lastIndexOf(FS) + 1);
          break;
        }
        case 1: {
          try {
            parts[1] = str.substring(str.lastIndexOf(FS) + 1, str.lastIndexOf(
              '.'));
          } catch (Exception e) {
            parts[1] = "";
          }
          break;
        }
        case 2: {
          try {
            parts[2] = str.substring(str.lastIndexOf((".")));
          } catch (Exception e) {
            parts[2] = "";
          }
          break;
        }
      }
      System.out.println("parts[" + j + "]" + " = " + parts[j]);
    }
    return parts;
  }

}
