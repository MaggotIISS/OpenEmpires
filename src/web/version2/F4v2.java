/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package web.version2;

import dbviewer.ConsoleWindow;
import static dbviewer.globals.GlobalVariables.CRLF;
import static dbviewer.globals.GlobalVariables.FS;
import static dbviewer.globals.GlobalVariables._SEC;
import java.io.File;
import java.util.Collection;
import javax.swing.JOptionPane;
import panels.Frame4;
import panels.Panel4T5Locator;
import static panels.Panel4T5Locator.data;
import static panels.Panel4T5Locator.lines;
import starters.TFX;
import wordgen.GlobalMethods;

/**
 *
 * @author Mark Ferguson
 */
public class F4v2 extends Frame4 {

    /**
     * Creates new form F4v2
     */
    public F4v2() {
        initComponents();
//        ConsoleWindow cw = new ConsoleWindow();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("jLabel1");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("jButton3");

        jButton4.setText("jButton4");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox1, 0, 206, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(jButton3)
                            .addComponent(jButton2)
                            .addComponent(jButton1))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(0, 122, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Button1();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Button2();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(F4v2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(F4v2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(F4v2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(F4v2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new F4v2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private void Button1() {

        int secs = 0;
        File f = new File("C:/T5/_SEC/Copy");
        String[] tmp = f.list();
        String secList = "";
        for (int i = 0; i < tmp.length; i++) {
            if (tmp[i].endsWith(".sec")) {
                secList += f.toString() + FS + tmp[i] + CRLF;
                secs += 1;
            }
        }

        secList = ""
                + "C:/T5/_SEC/Copy/Core.sec" + CRLF
                + "C:/T5/_SEC/Copy/Corridor.sec" + CRLF
                + "C:/T5/_SEC/Copy/Dagudashaag.sec" + CRLF
                + "C:/T5/_SEC/Copy/Deneb.sec" + CRLF
                + "C:/T5/_SEC/Copy/Gushemege.sec" + CRLF
                + "C:/T5/_SEC/Copy/Lishun.sec" + CRLF
                + "C:/T5/_SEC/Copy/Reft Sector.sec" + CRLF
                + "C:/T5/_SEC/Copy/Spinward Marches.sec" + CRLF
                + "C:/T5/_SEC/Copy/Trojan Reach.sec" + CRLF
                + "C:/T5/_SEC/Copy/Vland.sec" + CRLF;
        secs = 10;

        //System.out.println("sector files = " + secs);
        tmp = new String[secList.split(CRLF).length];
        String[] sectors = new String[secs];
        String sec = "";

        String[] lines;
        String line = null;
        String[] parts = null;
        String part = null;
        String sys = "";
        int[] lens = null;
        int len;
        int world1;
        for (int i = 0; i < tmp.length; i++) {
            //for (int i = 288; i < 289; i++) {
            //if (tmp[i].contains("Spinward")) {
            //    JOptionPane.showMessageDialog(null, "" + i);
            //}// 288 is shown
            world1 = 999;
            sectors[i] = secList.split(CRLF)[i];
            sec = sectors[i];
            //System.out.println("\t" + sectors[i]);
            tmp[i] = secList.split(CRLF)[i];
            f = new File(tmp[i]);
            lines = GlobalMethods.getLinesFromFile(f);
            //System.out.println(f.toString());
            for (int j = 0; j < lines.length; j++) {
                line = lines[j];
                if (lines[j].startsWith("---- ")) {
                    //System.out.println(lines[j - 1]);
                    world1 = j + 1;
                    lens = new int[line.split(" ").length];
                    parts = new String[lens.length];
                    //System.out.println(line);
                    for (int k = 0; k < lens.length; k++) {
                        lens[k] = line.split(" ")[k].length();
                        //System.out.println("lens[" + k + "] = " + lens[k]);
                    }
                    //System.out.println();
                }
                int start = 0;
                int end = 0;
                if (j >= world1) {
                    //System.out.println(line);
                    start = 0;
                    end = 0;
                    //System.out.println("line.length() = " + line.length());
                    String fix = "";
                    if (line.length() > 0) {
                        //line = "  " + line;
                        for (int k = 0; k < lens.length; k++) {
                            end += lens[k];
                            if (k < lens.length - 1) {
                                end += 1;
                            }
                            //System.out.print("  " + k + " - ");
                            //System.out.print("FROM " + start + " TO " + end + "  =  ");
                            //System.out.println(line.substring(start, end));
                            parts[k] = new String(line.substring(start, end).trim());
                            //System.out.println(parts[k]);
                            start = end;
                        }
                        // PERFORM LINE CHECKS
                        //======================================================
//                        //Dwarf Stars
                        if ((parts[13].contains("D")) & (!parts[13].contains("BD"))) {
                            fix = "DWARF to V";
                            System.out.println("sec = " + sec);
                            System.out.println("  Dwarf Star @ line " + j);
                            System.out.println(line);
                            System.out.println("FIX = " + fix);
                            System.out.println("");
                        }

                        //======================================================
//                        //Type OBAF
                        if ((parts[13].contains(" O"))
                                | (parts[13].contains(" B"))
                                | (parts[13].contains(" A"))
                                | (parts[13].contains(" F"))) {
                            fix = "OBAF to M";
                            System.out.println("sec = " + sec);
                            System.out.println("  OBAF Star @ line " + j);
                            System.out.println(line);
                            System.out.println("FIX = " + fix);
                            System.out.println("");
                        }
                        //======================================================
//                        //Type M4 min if habitable
                        if ((parts[13].contains(" M0"))
                                | (parts[13].contains(" M1"))
                                | (parts[13].contains(" M2"))
                                | (parts[13].contains(" M3"))) {
                            fix = "Type M4 min if habitable";
                            System.out.println("sec = " + sec);
                            System.out.println("  < M4 Star @ line " + j);
                            System.out.println(line);
                            System.out.println("FIX = " + fix);
                            System.out.println("");
                        }
                        //======================================================
                        //======================================================
                        //There's an old errata list for the sec files...
                        //======================================================
                        //======================================================
                        //1. Change all primary Ds to Vs.
                        if ((parts[13].startsWith("D"))) {
                            fix = "1. Change all primary Ds to Vs.";
                            System.out.println("sec = " + sec);
                            System.out.println("  D Primary @ line " + j);
                            System.out.println(line);
                            System.out.println("FIX = " + fix);
                            System.out.println("");
                        }
                        //======================================================
                        //2. Change all VIs to Vs.
                        if ((parts[13].contains("VI "))) {
                            fix = "2. Change all VIs to Vs.";
                            System.out.println("sec = " + sec);
                            System.out.println("  VI size @ line " + j);
                            System.out.println(line);
                            System.out.println("FIX = " + fix);
                            System.out.println("");
                        }
                        //======================================================
                        //3. Star types K5 to M9 are not available with star size IV: change star size to V.
                        if ((parts[13].contains("K5 IV"))
                                | (parts[13].contains("K6 IV"))
                                | (parts[13].contains("K7 IV"))
                                | (parts[13].contains("K8 IV"))
                                | (parts[13].contains("K9 IV"))
                                | (parts[13].contains("M0 IV"))
                                | (parts[13].contains("M1 IV"))
                                | (parts[13].contains("M2 IV"))
                                | (parts[13].contains("M3 IV"))
                                | (parts[13].contains("M4 IV"))
                                | (parts[13].contains("M5 IV"))
                                | (parts[13].contains("M6 IV"))
                                | (parts[13].contains("M7 IV"))
                                | (parts[13].contains("M8 IV"))
                                | (parts[13].contains("M9 IV"))) {
                            fix = "3. Star types K5 to M9 are not available with star size IV: change star size to V.";
                            System.out.println("sec = " + sec);
                            System.out.println(" K5 to M9  size IV to V @ line " + j);
                            System.out.println(line);
                            System.out.println("FIX = " + fix);
                            System.out.println("");
                        }
                        //======================================================
                        //4. Star types A, F and G are extremely rare with star sizes II and III: change star size to V.
                        String[] cols = {"A", "F", "G"};
                        for (int k = 0; k < cols.length; k++) {
                            String star = cols[k];
                            if ((parts[13].contains(star))) {
                                if ((parts[13].contains(star + " II ")) | (parts[13].contains(star + " III "))) {
                                    fix = "4. Star types A, F and G are extremely rare with star sizes II and III: change star size to V.";
                                    System.out.println("sec = " + sec);
                                    System.out.println(" resize II & III to V @ line " + j);
                                    // (What about IV?)
                                    System.out.println(line);
                                    System.out.println("FIX = " + fix);
                                    System.out.println("");
                                }
                            }
                        }
                        //======================================================
                        //5. Star types M4V through M9V cannot have habitable worlds: subtract 6 from the decimal classification.
                        String str = "";
                        for (int k = 4; k < 10; k++) {
                            str = "M" + k + " V";
                            if ((parts[13].contains(str))) {
                                fix = "5. Star types M4V through M9V cannot have habitable worlds: subtract 6 from the decimal classification.";
                                System.out.println("sec = " + sec);
                                System.out.println(" Brighten Star @ line " + j);
                                // (What about IV?)
                                System.out.println(line);
                                System.out.println("FIX = " + fix);
                                System.out.println("");

                            }
                        }
                        //======================================================
                        //6. If two or more stars in the same system are size D, change the last one to size V.
                        //======================================================
                        //7. Unless the primary star is size II, III, or IV, change remaining companion size D stars to size V.
                        //======================================================
                    }
                }
            }
        }
        //======================================================================
        // 
        //System.out.println(Panel4T5Locator.getPop());
    }

    private void Button2() {

        int secs = 0;
        File f = new File("C:/T5/_SEC/Copy");
        String[] tmp = f.list();

        String secList = "";
        for (int i = 0; i < tmp.length; i++) {
            if (tmp[i].endsWith(".sec")) {
                secList += f.toString() + FS + tmp[i] + CRLF;
                secs += 1;
            }
        }

        secList = ""
                + "C:/T5/_SEC/Copy/Core.sec" + CRLF
                + "C:/T5/_SEC/Copy/Corridor.sec" + CRLF
                + "C:/T5/_SEC/Copy/Dagudashaag.sec" + CRLF
                + "C:/T5/_SEC/Copy/Deneb.sec" + CRLF
                + "C:/T5/_SEC/Copy/Gushemege.sec" + CRLF
                + "C:/T5/_SEC/Copy/Lishun.sec" + CRLF
                + "C:/T5/_SEC/Copy/Reft Sector.sec" + CRLF
                + "C:/T5/_SEC/Copy/Spinward Marches.sec" + CRLF
                + "C:/T5/_SEC/Copy/Trojan Reach.sec" + CRLF
                + "C:/T5/_SEC/Copy/Vland.sec" + CRLF;
        secs = secList.split(CRLF).length;

        //System.out.println("sector files = " + secs);
        tmp = new String[secList.split(CRLF).length];
        String[] sectors = new String[secs];
        String sec = "";

        String[] lines;
        String line = null;
        String[] parts = null;
        String part = null;
        String sys = "";
        int[] lens = null;
        int len;
        int world1;
        for (int i = 0; i < tmp.length; i++) {
            world1 = 999;
            sectors[i] = secList.split(CRLF)[i];
            sec = sectors[i];
            tmp[i] = secList.split(CRLF)[i];
            f = new File(tmp[i]);
            lines = GlobalMethods.getLinesFromFile(f);
            //System.out.println(f.toString());
            for (int j = 0; j < lines.length; j++) {
                line = lines[j];
                if (lines[j].startsWith("---- ")) {
                    //System.out.println(lines[j - 1]);
                    world1 = j + 1;
                    lens = new int[line.split(" ").length];
                    parts = new String[lens.length];
                    //System.out.println(line);
                    for (int k = 0; k < lens.length; k++) {
                        lens[k] = line.split(" ")[k].length();
                        //System.out.println("lens[" + k + "] = " + lens[k]);
                    }
                    //System.out.println();
                }
                int start = 0;
                int end = 0;
                if (j >= world1) {
                    start = 0;
                    end = 0;
                    //System.out.println("line.length() = " + line.length());
                    String fix = "";
                    if (line.length() > 0) {
                        //line = "  " + line;
                        for (int k = 0; k < lens.length; k++) {
                            end += lens[k];
                            if (k < lens.length - 1) {
                                end += 1;
                            }
                            parts[k] = new String(line.substring(start, end).trim());
                            start = end;
                        }
                        // PERFORM LINE CHECKS
                        //======================================================
                        //Dwarf Stars
                        if ((parts[13].contains("D")) & (!parts[13].contains("BD"))) {
                            fix = "DWARF to V";
                        }
                        //======================================================
                        //Type OBAF
                        if ((parts[13].contains(" O"))
                                | (parts[13].contains(" B"))
                                | (parts[13].contains(" A"))
                                | (parts[13].contains(" F"))) {
                            fix = "OBAF to M";
                        }
                        //======================================================
                        //Type M4 min if habitable
                        if ((parts[13].contains(" M0"))
                                | (parts[13].contains(" M1"))
                                | (parts[13].contains(" M2"))
                                | (parts[13].contains(" M3"))) {
                            fix = "Type M4 min if habitable";
                        }
                        //======================================================
                        //======================================================
                        //There's an old errata list for the sec files...
                        //======================================================
                        //======================================================
                        //1. Change all primary Ds to Vs.
                        if ((parts[13].startsWith("D"))) {
                            fix = "1. Change all primary Ds to Vs.";
                        }
                        //======================================================
                        //2. Change all VIs to Vs.
                        if ((parts[13].contains("VI "))) {
                            fix = "2. Change all VIs to Vs.";
                        }
                        //======================================================
                        //3. Star types K5 to M9 are not available with star size IV: change star size to V.
                        if ((parts[13].contains("K5 IV"))
                                | (parts[13].contains("K6 IV"))
                                | (parts[13].contains("K7 IV"))
                                | (parts[13].contains("K8 IV"))
                                | (parts[13].contains("K9 IV"))
                                | (parts[13].contains("M0 IV"))
                                | (parts[13].contains("M1 IV"))
                                | (parts[13].contains("M2 IV"))
                                | (parts[13].contains("M3 IV"))
                                | (parts[13].contains("M4 IV"))
                                | (parts[13].contains("M5 IV"))
                                | (parts[13].contains("M6 IV"))
                                | (parts[13].contains("M7 IV"))
                                | (parts[13].contains("M8 IV"))
                                | (parts[13].contains("M9 IV"))) {
                            fix = "3. Star types K5 to M9 are not available with star size IV: change star size to V.";
                        }
                        //======================================================
                        //4. Star types A, F and G are extremely rare with star sizes II and III: change star size to V.
                        String[] cols = {"A", "F", "G"};
                        for (int k = 0; k < cols.length; k++) {
                            String star = cols[k];
                            if ((parts[13].contains(star))) {
                                if ((parts[13].contains(star + " II ")) | (parts[13].contains(star + " III "))) {
                                    fix = "4. Star types A, F and G are extremely rare with star sizes II and III: change star size to V.";
                                }
                            }
                        }
                        //======================================================
                        //5. Star types M4V through M9V cannot have habitable worlds: subtract 6 from the decimal classification.
                        String str = "";
                        String plus = "";
                        for (int k = 4; k < 10; k++) {
                            for (int l = 0; l < 2; l++) {
                                switch (l) {
                                    case 0: {
                                        plus = "V";
                                        break;
                                    }
                                    case 1: {
                                        plus = " V";
                                        break;
                                    }
                                }
                                str = "M" + k + plus;
                                if ((parts[13].contains(str))) {
                                    fix = "5. Star types M4V through M9V cannot have habitable worlds: subtract 6 from the decimal classification.";
                                }
                            }
                        }
                        //======================================================
                        //6. If two or more stars in the same system are size D, change the last one to size V.
                        //======================================================
                        //7. Unless the primary star is size II, III, or IV, change remaining companion size D stars to size V.
                        //======================================================
                        if(!fix.equals("")) {
                            System.out.println("\t" + sectors[i]);
                            System.out.println(lines[j]);
                            System.out.println("line " + j + " = " + fix);
                            System.out.println("");
                        }
                    }
                }
            }
        }
        //======================================================================
        // 
        //System.out.println(Panel4T5Locator.getPop());
    }

}
