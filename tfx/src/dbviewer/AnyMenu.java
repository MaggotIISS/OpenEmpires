/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer;import dbviewer.globals.GlobalMethods;import static dbviewer.globals.GlobalVariables.FS;import static dbviewer.globals.GlobalVariables.T5;import java.awt.AWTException;import java.awt.Color;import java.awt.Component;import java.awt.Rectangle;import java.awt.Robot;import java.awt.event.ActionEvent;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.logging.Level;import java.util.logging.Logger;import javax.imageio.ImageIO;import javax.swing.AbstractAction;import javax.swing.Action;import javax.swing.JComboBox;import javax.swing.JFileChooser;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JMenu;import javax.swing.JMenuBar;import javax.swing.JMenuItem;import javax.swing.JOptionPane;import javax.swing.JScrollPane;import javax.swing.JTextArea;import panels.Panel4Careers;import panels.Panel4LabelComboButton;import starters.T5app;/** @author maggot.iiss psvm example = AnyMenu am = new AnyMenu(jf); */public class AnyMenu extends JFrame {  /**   show about box   */  public static final Action aboutAction = new AbstractAction("About") {    @Override    public void actionPerformed(ActionEvent e) {      //<editor-fold defaultstate="collapsed" desc="DEBUG">      boolean DEBUG = false;      if (DEBUG) { // true or false        //System.out.print("\tAboutAction" + Thread.currentThread().getStackTrace()[1].getMethodName());        ////System.out.print("" + " = " + );      }      //</editor-fold>      if (dialog == null) {        dialog = new Dialog4About(new JFrame());        dialog.setLocation(200, 0);      }      dialog.setVisible(true); // pop up dialog    }  };  /**   Action   */  public static final Action copyAction = new AbstractAction("Copy") {    @Override    public void actionPerformed(ActionEvent e) {      //<editor-fold defaultstate="collapsed" desc="DEBUG">      boolean DEBUG = false;      if (DEBUG) { // true or false        //System.out.print("\tCopyAction " + Thread.currentThread().getStackTrace()[1].getMethodName());        ////System.out.print("" + " = " + );      }      //</editor-fold>    }  };  /**   Action   */  public static final Action cutAction = new AbstractAction("Cut") {    @Override    public void actionPerformed(ActionEvent e) {      //<editor-fold defaultstate="collapsed" desc="DEBUG">      boolean DEBUG = false;   //   collapsed or opened      if (DEBUG) {    // true OR false;        Debug.debug("==================");        Debug.debug("\tAction ItemAction = new AbstractAction(\"newAction\")");        Debug.debug("\tpublic void actionPerformed(ActionEvent e)");        Debug.debug("==================");        Debug.debug("");        Debug.debug("==================");      }      //</editor-fold>    }  };  /**   Action   */  public static final Action exitAction = new AbstractAction("eXit") {    @Override    public void actionPerformed(ActionEvent e) {      //<editor-fold defaultstate="collapsed" desc="DEBUG">      boolean DEBUG = false;      if (DEBUG) { // true or false        //System.out.print("\tExitAction " + Thread.currentThread().getStackTrace()[1].getMethodName());        ////System.out.print("" + " = " + );      }      //</editor-fold>      System.exit(0);      //throw new RuntimeException();    }  };  /**   Action   */  public final Action grabAction = new AbstractAction("Grab") {    @Override    public void actionPerformed(ActionEvent e) {//      JOptionPane.showMessageDialog(jf, "" + jf.getTitle());      jfc.setCurrentDirectory(new File(T5));      jfc.setSelectedFile(new File(jf.getTitle()));      Robot r;      try {        r = new Robot();        String path;        if (jf.getTitle() != "") {          path = T5 + FS + jf.getTitle().trim() + ".gif";        } else {          path = T5 + FS + "New" + ".gif";        }        path = T5 + FS + jf.getContentPane().getClass().getName() + ".gif";;        BufferedImage bi = r.createScreenCapture(new Rectangle(          jf.getX(), jf.getY(), jf.getWidth(), jf.getHeight()));        File f = new File(path);        //<editor-fold defaultstate="collapsed" desc="JOP">        {          String s = "";          s += "path = " + path + CRLF;          s += "jf.getTitle() = " + jf.getTitle() + CRLF;          s += "jfc.getCurrentDirectory() = " + jfc.getCurrentDirectory();          s += "f.toString() = " + f.toString();          s += "bi = " + bi.toString();          s += CRLF;          JTextArea jta = new JTextArea(s, 50, 80);          JScrollPane jsp = new JScrollPane(jta);          JOptionPane.showMessageDialog(null, jsp);        }        //</editor-fold>        try {          ImageIO.write(bi, "GIF", f);        } catch (IOException ex) {          Logger.getLogger(T5app.class            .getName()).log(Level.SEVERE, null, ex);          JOptionPane.showMessageDialog(jf, "Grab error");        }      } catch (AWTException ex) {        Logger.getLogger(GlobalMethods.class.getName()).log(Level.SEVERE, null,          ex);      }    }  };  /**   Action   */  public static final Action hideAction = new AbstractAction("Hide") {    @Override    public void actionPerformed(ActionEvent e) {      //<editor-fold defaultstate="collapsed" desc="DEBUG">      boolean DEBUG = false;      if (DEBUG) { // true or false        //System.out.print("\tHideAction " + Thread.currentThread().getStackTrace()[1].getMethodName());        ////System.out.print("" + " = " + );      }      //</editor-fold>      //Panel4.Save();      //jf.setVisible(false);    }  };  //<editor-fold defaultstate="collapsed" desc="External calling">  /*   * // AnyMenu am = new AnyMenu(jf); // AnyMenu am = new AnyMenu(); //   am.addAction(am.ItemAction); // am.debug(); // am.renameMenu(jf,"File");   */  //</editor-fold>  //KEEP ItemAction BLANK FOR MAKING COPIES  /**   Action   */  public static final Action itemAction = new AbstractAction("Item") {    @Override    public void actionPerformed(ActionEvent e) {      //<editor-fold defaultstate="collapsed" desc="DEBUG">      boolean DEBUG = false;      if (DEBUG) { // true or false        //System.out.print("\tItemAction " + Thread.currentThread().getStackTrace()[1].getMethodName());        ////System.out.print("" + " = " + );      }      //</editor-fold>    }  };  //KEEP ItemAction BLANK FOR MAKING COPIES  /**   Action   */  public static final Action newAction = new AbstractAction("New") {    @Override    public void actionPerformed(ActionEvent e) {      //<editor-fold defaultstate="collapsed" desc="DEBUG">      boolean DEBUG = false;      if (DEBUG) { // true or false        //System.out.print("\tNewAction " + Thread.currentThread().getStackTrace()[1].getMethodName());        ////System.out.print("" + " = " + );      }      //</editor-fold>}    }  };  /**   Action   */  public static final Action openAction = new AbstractAction("Open") {    @Override    public void actionPerformed(ActionEvent e) {      //<editor-fold defaultstate="collapsed" desc="DEBUG">      boolean DEBUG = false;      if (DEBUG) { // true or false        //System.out.print("\tOpenAction " + Thread.currentThread().getStackTrace()[1].getMethodName());        ////System.out.print("" + " = " + );      }      //</editor-fold>      DBPublic.CBView();      int ret = jfc.showOpenDialog(menu);      if (JFileChooser.APPROVE_OPTION == ret) {        //System.out.print("Open " + jfc.getSelectedFile().toString());      }    }  };  /**   Action   */  public static final Action pasteAction = new AbstractAction("Paste") {    @Override    public void actionPerformed(ActionEvent e) {      //<editor-fold defaultstate="collapsed" desc="DEBUG">      boolean DEBUG = false;      if (DEBUG) { // true or false        //System.out.print("\tPasteAction " + Thread.currentThread().getStackTrace()[1].getMethodName());        ////System.out.print("" + " = " + );      }      //</editor-fold>    }  };  /**   Action   */  public static final Action saveAction = new AbstractAction("Save") {    @Override    public void actionPerformed(ActionEvent e) {      jfc.showSaveDialog(menu);////      //<editor-fold defaultstate="collapsed" desc="DEBUG">//      boolean DEBUG = false;//      if (DEBUG) { // true or false//        //System.out.print("\tSaveAction " + Thread.currentThread().getStackTrace()[1].getMethodName());//        ////System.out.print("" + " = " + );//      }//      //</editor-fold>//      ExtensionFileFilter eeff = new ExtensionFileFilter();//      //<editor-fold defaultstate="collapsed" desc="BMP">//      if ((DBViewer.getPath().toUpperCase().endsWith("BMP"))) {//      }//      //</editor-fold>//      //<editor-fold defaultstate="collapsed" desc="CSV">//      if ((DBViewer.getPath().toUpperCase().endsWith("CSV"))) {//      }//      //</editor-fold>//      //<editor-fold defaultstate="collapsed" desc="FORM">//      if ((DBViewer.getPath().contains("FORM"))) {//      }//      //</editor-fold>//      //<editor-fold defaultstate="collapsed" desc="CT">//      if ((DBViewer.getPath().contains("CT"))) {//      }//      //</editor-fold>//      //<editor-fold defaultstate="collapsed" desc="D66">//      if ((DBViewer.getPath().contains("D66"))) {//      }//      //</editor-fold>//      //<editor-fold defaultstate="collapsed" desc="DS">//      if ((DBViewer.getPath().contains("DS"))) {//      }//      //</editor-fold>//      //<editor-fold defaultstate="collapsed" desc="GT">//      if ((DBViewer.getPath().contains("GT"))) {//      }//      //</editor-fold>//      //<editor-fold defaultstate="collapsed" desc="GLOBAL">//      if ((DBViewer.getPath().contains("GLOBAL"))) {//      }//      //</editor-fold>//      //<editor-fold defaultstate="collapsed" desc="WHO">//      if ((DBViewer.getPath().contains("WHO"))) {//        //System.out.print("" + " = ");//      }//      //</editor-fold>//      //<editor-fold defaultstate="collapsed" desc="WHAT">//      if ((DBViewer.getPath().contains("WHAT"))) {//      }//      //</editor-fold>//      //<editor-fold defaultstate="collapsed" desc="WHY">//      if ((DBViewer.getPath().contains("WHY"))) {//      }//      //</editor-fold>//      //<editor-fold defaultstate="collapsed" desc="WHERE">//      if ((DBViewer.getPath().contains("WHERE"))) {//      }//      //</editor-fold>//      //<editor-fold defaultstate="collapsed" desc="WHEN">//      if ((DBViewer.getPath().contains("WHEN"))) {//      }//      //</editor-fold>//      //<editor-fold defaultstate="collapsed" desc="DEBUG">//      DEBUG = false;//      if (DEBUG) { // true or false//        //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());//        ////System.out.print("" + " = " + );//      }//      //</editor-fold>//      int ret = jfc.showSaveDialog(jf);//      if (ret == JFileChooser.APPROVE_OPTION) {//        //System.out.print("Save ");//        viewCareer(".", DBViewer.getTitle());//      }    }  };  /**   */  static SaveOutputWindow sow = null;  private static String CRLF = System.lineSeparator();  private static Dialog4About dialog = null;  private static JMenuItem item;  private static JFrame jf = null;  //-------------------------------------  private static JFileChooser jfc = DBViewer.jfc;  private static JMenu jm = null;  private static JMenu jm1 = null;  private static JMenu jm2 = null;  private static JMenuBar jmb = null;  private static JMenuItem jmi = null;  private static JMenu menu;  private static JMenuBar menubar;  /**   @param ItemAction Action to add to menu   */  public static void addAction(Action ItemAction) {    menu.add(ItemAction);  }  /**   @param menubar to add menu to   */  public static void addMenu(JMenuBar menubar) {    menubar.add(menu);  }  /**   @param frame to add MenuBar to   */  public static void addMenuBar(JFrame frame) {    frame.setJMenuBar(menubar);  }  /**   @param menu to add item   */  public static void addMenuItem(JMenu menu) {    menu.add(item);  }  /**   test   */  public static void createTestMenu() {    jf = new JFrame();    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    jf.setBounds(0, 0, 300, 100);    jmb = new JMenuBar();    menu = new JMenu("File");    item = new JMenuItem("warn");    addMenuBar(jf);    addMenu(jmb);    addMenuItem(menu);    addAction(itemAction);    jf.setJMenuBar(jmb);    jf.setVisible(true);  }  /**   show help   */  public static void debug() {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;   //   collapsed or opened    if (DEBUG) {    // true OR false;      Debug.debug("==================");      Debug.debug("\tdebug");      Debug.debug("==================");      Debug.debug("AnyMenu.NewAction = " + AnyMenu.newAction);      Debug.debug("AnyMenu.OpenAction = " + AnyMenu.openAction);      Debug.debug("AnyMenu.SaveAction = " + AnyMenu.saveAction);      Debug.debug("AnyMenu.ExitAction = " + AnyMenu.exitAction);      Debug.debug("AnyMenu.CutAction = " + AnyMenu.cutAction);      Debug.debug("AnyMenu.CopyAction = " + AnyMenu.copyAction);      Debug.debug("AnyMenu.PastAction = " + AnyMenu.pasteAction);      Debug.debug("AnyMenu.AboutAction = " + AnyMenu.aboutAction);      Debug.debug("AnyMenu.ItemAction = " + AnyMenu.itemAction);      Debug.debug("AnyMenu.jf = " + AnyMenu.jf);      Debug.debug("AnyMenu.jm = " + AnyMenu.jm);//      Debug.debug("AnyMenu.jm1 = " + AnyMenu.jm1);//      Debug.debug("AnyMenu.jm2 = " + AnyMenu.jm2);//      Debug.debug("AnyMenu.jmb = " + AnyMenu.jmb);//      Debug.debug("AnyMenu.jmi = " + AnyMenu.jmi);//      Debug.debug("AnyMenu.item = " + AnyMenu.item);//      Debug.debug("AnyMenu.menu = " + AnyMenu.menu);//      Debug.debug("AnyMenu.menubar = " + AnyMenu.menubar);////      Debug.debug(" = " + AnyMenu.);////      Debug.debug(" = " + AnyMenu);////      Debug.debug(" = " + AnyMenu);      Debug.debug("==================");    }    //</editor-fold>  }  /**   @param ajf JFrame to set as JFrame   */  public static void setJf(JFrame ajf) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("" + " = " + );    }    //</editor-fold>    jf = ajf;  }  /**   @param frame to removeAll   */  public static void removeAll(JFrame frame) {    frame.removeAll();  }  /**   @param path  dir to setCurrentDirectory()   @param title to set SaveOutputWindow   */  public static void viewCareer(String path, String title) {    if (sow == null) {      sow = new SaveOutputWindow();    }    if (!sow.isVisible()) {      sow.setVisible(true);    }    sow.setBounds(620, 0, 400, 500);    sow.setCurrentDirectory(path);    //sow.setSelectedFile(title);    sow.setText(title + CRLF);//    sow.append("path = " + path + CRLF);//    sow.append("title = " + title + CRLF);//    sow.append(title + CRLF);    sow.append("" + CRLF);    sow.append("Career Info" + CRLF);//    int count = Panel4LabelComboButton.getJpan().getComponentCount();    Component[] comps = Panel4LabelComboButton.getJpan().getComponents();    JLabel lab;    JComboBox jc;    for (int i = 0; i < comps.length - 18; i++) {      comps[i] = Panel4LabelComboButton.getJpan().getComponent(i);      if (comps[i].toString().contains("JLabel")) {        lab = (JLabel) comps[i];        sow.append(lab.getText() + "  ");      }      if (comps[i].toString().contains("JComboBox")) {        jc = (JComboBox) comps[i];        sow.append(jc.getSelectedItem().toString() + "  " + CRLF);      }    }    sow.append("" + CRLF + "Material Gains".toUpperCase() + CRLF);    ArrayList<String> tmp = new ArrayList<>();    CareerGen.al = CareerGen.mat;    for (int i = 0; i < CareerGen.mat.size(); i++) {      if (!tmp.contains(CareerGen.mat.get(i) + " x " + CareerGen.countTimes(        CareerGen.mat.get(i)))) {        tmp.add(CareerGen.mat.get(i) + " x " + CareerGen.countTimes(          CareerGen.mat.get(i)));        sow.append("" + CareerGen.mat.get(i) + " x " + CareerGen.countTimes(          CareerGen.mat.get(i)) + CRLF);      }    }    sow.append("" + CRLF + "Statistic Gains".toUpperCase() + CRLF);    for (int i = 0; i < CareerGen.mod.size(); i++) {      sow.append(CareerGen.mod.get(i) + CRLF);    }    sow.append("" + CRLF + "Cash Gains".toUpperCase() + CRLF);    for (int i = 0; i < CareerGen.cash.size(); i++) {      sow.append(CareerGen.cash.get(i) + CRLF);    }    sow.append("" + CRLF + "Skill Gains".toUpperCase() + CRLF);    CareerGen.al = CareerGen.skill;    tmp = new ArrayList<>();    for (int i = 0; i < CareerGen.skill.size(); i++) {      if (!tmp.contains(CareerGen.skill.get(i) + "-" + CareerGen.countTimes(        CareerGen.names.get(i)))) {        tmp.add(CareerGen.skill.get(i) + "-" + CareerGen.countTimes(          CareerGen.names.get(i)));        sow.append("" + CareerGen.skill.get(i) + "-" + CareerGen.countTimes(          CareerGen.names.get(i)) + CRLF);      }    }    sow.append("" + CRLF + "Terms = " + Panel4Careers.terms + CRLF);    if (Panel4Careers.terms > 4) {      sow.append("KCr " + ((Panel4Careers.terms - 4) * 2) + " /year pension"        + CRLF);    }    sow.append("KCr " + Panel4Careers.Cash + " Cash" + CRLF);  }  /**   create basic menu   */  public AnyMenu() {    super();    setBackground(Color.black);    setForeground(Color.darkGray);    jf = dbviewer.DBViewer.getJf();    //    jmb.setOpaque(true);    jmb = new JMenuBar();    GlobalMethods.blacken(jmb);    jmi = new JMenuItem();    GlobalMethods.blacken(jmi);    //=============================    jm = new JMenu("File");    //GlobalMethods.blacken(jm);    jmb.add(jm);    jm.setBackground(Color.black);    jm.setForeground(Color.lightGray);    //jm.add(NewAction);    //jm.add(OpenAction);    //jm.add(SaveAction);    //jm.add(ExitAction);//    jm.add(hideAction);    jm.add(grabAction);    //=============================    //jm1 = new JMenu("Edit");    //jmb.add(jm1);    //jm1.add(CutAction);    //jm1.add(CopyAction);    //jm1.add(PasteAction);    //=============================    //jm2 = new JMenu("Help");    //jmb.add(jm2);    //jm2.add(AboutAction);    //jm2.add(ItemAction);    GlobalMethods.autoColor(jmb, Color.black, Color.lightGray);    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;   //   collapsed or opened    if (DEBUG) {    // true OR false;      Debug.debug("==================");      Debug.debug("\tjm.add(ItemAction)");      Debug.debug("\tpublic AnyMenu()");      Debug.debug("==================");      Debug.debug("jf = " + jf);      Debug.debug("jmb = " + jmb);      Debug.debug("jm = " + jm);//      Debug.debug("jm1 = " + jm1);//      Debug.debug("jm2 = " + jm2);      Debug.debug("jmi = " + jmi);      Debug.debug("==================");    }    //</editor-fold>  }  /**   Creates a Menu to fit in selected Frame   @param ajf JFrame to add menu to   */  @SuppressWarnings(value = "AssignmentToMethodParameter")  public AnyMenu(JFrame ajf) {    this();    jf = ajf;    jf.setJMenuBar(jmb);    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;   //   collapsed or opened    if (DEBUG) {    // true OR false;      Debug.debug("==================");      Debug.debug("\tAnyMenu");      Debug.debug("\tpublic AnyMenu(JFrame ajf)");      Debug.debug("==================");      Debug.debug("jf = " + jf);      Debug.debug("jmb = " + jmb);      Debug.debug("jm = " + jm);      Debug.debug("jmi = " + jmi);      Debug.debug("==================");    }    //</editor-fold>  }  /**   Creates a Menu to fit in selected Frame   @param ajf  name of frame to be fitted to   @param name title of frame?   */  public AnyMenu(JFrame ajf, String name) {    this();    ajf.setName(name);    jf = ajf;  }  /**   @return name of class   */  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }}