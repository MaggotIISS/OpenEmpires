/*
 To change this license header, choose License Headers in Project Properties.
 To change this template file, choose Tools | Templates
 and open the template in the editor.
 */
package dbviewer;

import dbviewer.globals.GlobalMethods;
import static dbviewer.globals.GlobalVariables.CRLF;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JPanel;
import panels.Frame4;

/**

 @author Mark Ferguson
 */
public class OrbitDetail extends javax.swing.JPanel {

  //<editor-fold defaultstate="collapsed" desc="variables">
  /**
   Creates new form OrbitDetail
   */
  public static String[] stardata = {"F7 V", "BD", "M3 V", "M9 Ia"};

  /**

   */
  public static int numstars = stardata.length;

  /**

   */
  public static int minorbit[] = new int[numstars];

  /**

   */
  public static int maxorbit[] = new int[numstars];
  int starnum = 0;
  String[][][] orbits = new String[numstars][20][20];
  String txt = "";
  int[] starorbit = new int[numstars];
  int orb = 0;
  int o = 0;
//  private int[] unfrom = new int[numstars];
//  private int[] unorb = new int[numstars];
  private static final Logger LOG = Logger
    .getLogger(OrbitDetail.class.getName());
  private static JPanel jp;
  private static JFrame jf;
  private int[] dist = new int[]{
    30, 60, 105, 150, 240, 420, 780, 1500, 3000, 6000, 11550, 23100, 46200,
    92250, 184500, 368700, 737400, 1474500, 2925000, 5925000
  };
  //</editor-fold>
  int systems = 1;

  /**
   @param args the command line arguments
   */
  public static void main(String[] args) {
    jp = new OrbitDetail();
    jf = new Frame4(jp);
  }

  /**
   OrbitDetail
   */
  public OrbitDetail() {
    initComponents();
    setup();
  }

  /**
   This method is called from within the constructor to initialize the form.
   WARNING: Do NOT modify this code. The content of this method is always
   regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    ta = new javax.swing.JTextArea();
    jLabel1 = new javax.swing.JLabel();

    ta.setColumns(20);
    ta.setRows(5);
    ta.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        taMouseClicked(evt);
      }
    });
    jScrollPane1.setViewportView(ta);

    jLabel1.setText("jLabel1");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel1))
        .addGap(0, 304, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  private void taMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_taMouseClicked
    setup();
  }//GEN-LAST:event_taMouseClicked

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextArea ta;
  // End of variables declaration//GEN-END:variables

  private void setup() {
    starorbit[0] = -1;
    starorbit[1] = GlobalMethods.roll1d() - 1;
    starorbit[2] = GlobalMethods.roll1d() + 5;
    starorbit[3] = GlobalMethods.roll1d() + 11;
//<editor-fold defaultstate="collapsed" desc="old">
//    for (starnum = 0; starnum < numstars; starnum++) {
//      orbits[starnum] = new String[20][];
//      minorbit[starnum] = Integer.parseInt(panels.Panel4T5Locator.getMinOrbit(stardata[starnum]));
//      maxorbit[starnum] = panels.Panel4T5Locator.getMaxOrbit(starnum, starorbit[starnum] + 1);
//      for (orb = 0; orb < maxorbit[starnum]; orb++) {
//        orbits[starnum][orb][0] = "null";
//        if (orb >= minorbit[starnum]) {
//          orbits[starnum][orb][0] = "";
//        }
////        for (int starnum = 0; starnum < numstars; starnum++) {
////          if ((orb == starorbit[starnum])) {
//////            unfrom[starnum] = orb - 1;
////            if (orbits[0][orb].isEmpty()) {
////              orbits[0][orb] += "Star " + stardata[starnum];
//////              unorb[starnum] = (maxorbit[starnum] / 2);
////            }
////          }
////        }
//      }
//    }
//    int gg = 3;
//    int pb = 3;
//    int ow = 9;
//    int[] other = {gg, pb, ow};
//    addOther("MW");
//    for (int i = 0; i < other.length; i++) {
//      for (int j = 0; j < other[i]; j++) {
//        o = j % numstars;
//        switch (i) {
//          case 0: { //GG
//            addOther("GG");
//            System.out.println("GG" + " @ " + j + " = star = " + o);
//            break;
//          }
//          case 1: { //PB
//            addOther("PB");
//            System.out.println("PB" + " @ " + j + " = star = " + o);
//            break;
//          }
//          case 2: { //OW
//            addOther("OW");
//            System.out.println("OW" + " @ " + j + " = star = " + o);
//            break;
//          }
//        }
//        System.out.println("star" + " = " + o);
//      }
//    }
//    System.out.println("");
//</editor-fold>
////////////////////////////////////////////////////////////////////////////////
    txt = "";
    for (starnum = 0; starnum < numstars; starnum++) {
      if (!stardata[starnum].contains("BD")) {
        if (starorbit[starnum] > 0) {
          txt += "Star = " + stardata[starnum] + " @ orbit "
            + starorbit[starnum] + " = " + dist[starorbit[starnum]] + CRLF;
        } else {
          txt += "Primary Star = " + stardata[starnum] + CRLF;
        }
//        txt += panels.Panel4T5Locator.getStarDetail(stardata[starnum]) + CRLF;
        for (int j = minorbit[starnum]; j < maxorbit[starnum]; j++) {
          txt += "" + j + " = " + dist[j] + " = " + orbits[starnum][j] + " = "
            + dist[starorbit[starnum]] + CRLF;
        }
        txt += CRLF;
      } else {
        orbits[starnum] = null;
        txt += "Brown Dwarf (S=24)" + " @ orbit " + starorbit[starnum] + " = "
          + dist[starorbit[starnum]] + CRLF;
        for (int starn = 0; starn < numstars; starn++) {
          if (stardata[starn].equals("BD")) {
            txt += CRLF;
          }
        }
      }
    }
    ta.setText(txt);
  }

  private int addBody(String body) {
    System.out.println(body + " @ " + orb + " = star = " + o);
    if (orb > -1) {
      orb += 1;
    }
    if (orb > orbits[0].length - 1) {
      orb = minorbit[0];
    }
    if (orbits[0][orb][0] == "") {
      orbits[0][orb][0] = body;
    } else {
      addBody(body);
    }
    return orb;
  }

  private void addOther(String str) {
//Add other worlds to star systems
start:
    //Mainworld in Primary system unless star already in selected orbit,
    if (orb < orbits[o].length) {
      if (orbits[o][orb][0] != "") {
        orb += 1;
      }
      switch (str) {
        case "MW": {
          //Hab zone from star
          //HZv mod from climate
          orb = addBody("MW");
          break;
        }
        case "GG": {
          orb = addBody("GG");
          break;
        }
        case "PB": {
          orb = addBody("PB");
          break;
        }
        case "OW": {
          orb = addBody("OW");
          break;
        }
      }

    } else {
      orb = 0;
      break start;
    }
  }

}
