/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer.globals;/** @version 1.10 2002-06-30 @author Cay Horstmann */import java.lang.reflect.AccessibleObject;import java.lang.reflect.Array;import java.lang.reflect.Field;import java.lang.reflect.Modifier;import java.text.NumberFormat;import java.util.ArrayList;/** @author maggot */public class ObjectAnalyzerTest {  /**   @param args strings to start   */  public static void main(String[] args) {    Object obj = NumberFormat.getCurrencyInstance();    System.out.print(new ObjectAnalyzerOld().toString(obj));  }}class ObjectAnalyzerOld {  /**   Converts an object to a string representation that lists all fields.   @param obj an object   @return a string with the object's class name and all field names and           values   */  @SuppressWarnings({"unchecked", "CallToThreadDumpStack"})  public String toString(Object obj) {    if (obj == null) {      return "null";    }    if (visited.contains(obj)) {      return "...";    }    visited.add(obj);    Class cl = obj.getClass();    if (cl == String.class) {      return (String) obj;    }    if (cl.isArray()) {      String r = cl.getComponentType() + "[]{";      for (int i = 0; i < Array.getLength(obj); i++) {        if (i > 0) {          r += ",";        }        Object val = Array.get(obj, i);        if (cl.getComponentType().isPrimitive()) {          r += val;        } else {          r += toString(val);        }      }      return r + "}";    }    String r = cl.getName();    // inspect the fields of this class and all superclasses    do {      r += "[";      Field[] fields = cl.getDeclaredFields();      AccessibleObject.setAccessible(fields, true);      // get the names and values of all fields      for (int i = 0; i < fields.length; i++) {        Field f = fields[i];        if (!Modifier.isStatic(f.getModifiers())) {          if (!r.endsWith("[")) {            r += ",";          }          r += f.getName() + "=";          try {            Class t = f.getType();            Object val = f.get(obj);            if (t.isPrimitive()) {              r += val;            } else {              r += toString(val);            }          } catch (IllegalArgumentException | IllegalAccessException e) {            e.printStackTrace();          }        }      }      r += "]";      cl = cl.getSuperclass();    } while (cl != null);    return r;  }  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }  private ArrayList visited = new ArrayList();}