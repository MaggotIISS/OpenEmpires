/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package panels;// Import the basic graphics classes.import java.awt.BorderLayout;import java.awt.Color;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.Image;import java.awt.Rectangle;import java.awt.Toolkit;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import java.awt.geom.AffineTransform;import javax.swing.JFrame;import javax.swing.JPanel;import javax.swing.JSpinner;import javax.swing.SpinnerNumberModel;import javax.swing.event.ChangeEvent;import javax.swing.event.ChangeListener;/** Simple program that loads, rotates and displays an image. Uses the file Duke_Blocks.gif, which should be in the same directory. <p> @author MAG @version 20Feb2009 */public class Panel4Rotate extends Panel4 {  // Declare an Image object for us to use.  Image image;  static double cpx, cpy;//  static double csx, csy;  static JSpinner js;  static double i = 0.0;  double di;  double iw;  double ih;  static JFrame jf;  static JPanel jp;  /**   <p>   @param args strings to start   */  public static void main(String args[]) {    jp = new Panel4Rotate();    jf = new Frame4(jp);  }  /**   Panel4Rotate   */  public Panel4Rotate() {    super();    jp = this;    jp.setLayout(new BorderLayout());    image = Toolkit.getDefaultToolkit().getImage(      "D:/CYBERBOARD/BMP/AR-Erinyes-12.gif");    iw = image.getWidth(jp);    ih = image.getHeight(jp);    js = new JSpinner();    js.setModel(new SpinnerNumberModel(0, -60, 360, 15));//start,min,max,step//15    js.addChangeListener(new ChangeListener() {      @Override      public void stateChanged(ChangeEvent e) {        i = Double.parseDouble(js.getValue().toString());        if (js.getValue().equals(-60)) {          js.setValue(300);        }        if (js.getValue().equals(360)) {          js.setValue(0);        }        repaint();        di = Math.sqrt((iw * iw) + (ih * ih));        //System.out.print("iw" + " = " + iw);        //System.out.print("ih" + " = " + ih);        //System.out.print("di" + " = " + di);        //System.out.print("diag" + " = " + Math.sqrt(di));      }    });    js.setVisible(true);    js.addKeyListener(new KeyAdapter() {      @Override      public void keyTyped(KeyEvent e) {        i = Double.parseDouble(js.getValue().toString()) + 15;        if (js.getValue().equals(-60)) {          js.setValue(300);        }        if (js.getValue().equals(360)) {          js.setValue(0);        }        repaint();      }    });    jp.add(js, BorderLayout.SOUTH);    jp.setBackground(Color.white);    jp.setOpaque(true);    //<editor-fold defaultstate="collapsed" desc="comment">    //    jp.addMouseListener(new MouseAdapter() {    //    //      @Override    //      public void mouseClicked(MouseEvent e) {    //        if (e.getClickCount() > 1) {    //          jp.setBackground(Color.white);    //        }    //      }    //    });    //</editor-fold>    repaint();  }  /**   <p>   @return name of class   */  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }  /**   <p>   @param g Graphics   */  @Override  public void paintComponent(Graphics g) {    super.paintComponent(g);    Graphics2D g2d = (Graphics2D) g; // Create a Java2D version of g.    AffineTransform start = g2d.getTransform();    start.rotate(Math.toRadians(i), image.getWidth(js) / 2, image.getHeight(js)      / 2);    g2d.drawImage(image, start, this);    Rectangle rect = this.getBounds();//creating the AffineTransform instance    AffineTransform affineTransform = new AffineTransform();//set the translation to the mid of the component    affineTransform.setToTranslation((rect.width - image.getWidth(js)) / 2,      (rect.height - image.getHeight(js)) / 2);//rotate with the anchor point as the mid of the image    affineTransform.rotate(Math.toRadians(180), image.getWidth(js) / 2, image      .getHeight(js) / 2);//draw the image using the AffineTransform//g2d.drawImage(image, affineTransform, this);    validate();  }}