/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package wordgen;//import dbviewer.DBViewer;//import static GlobalVariables.T5;import java.awt.Color;import java.awt.Component;import java.awt.Container;import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.io.PrintWriter;import java.util.ArrayList;import javax.swing.JComboBox;import javax.swing.JFrame;import javax.swing.JList;import javax.swing.JOptionPane;import javax.swing.JTextArea;/** <p> @author maggot */public class GlobalMethods {  //<editor-fold defaultstate="collapsed" desc="variables">  private static String CRLF = GlobalVariables.CRLF;  private static String FS = GlobalVariables.FS;//  private static JFileChooser jfc = dbviewer.DBViewer.jfc;  private static String[] table;  private static int cols;  private static int rows;  private static int col;  private static int row;  private static String pop;  private static String tl;  //</editor-fold>  /**   <p>   @param args Strings to start   */  public static void main(String[] args) { //TEST BED////////////////////////////////////////////////////    JPanel jp = new panels.Panel4WordGen();//    JFrame jf = new Frame4(jp);////////////////////////////////////////////////////    String it = "blah blah(hi in wa)";//    String reply = getStringInParens(it);//    //System.out.print("reply" + " = " + reply);////////////////////////////////////////////////////    String it = "\"this is a test\"";//    //System.out.print("" + " = " + capWords(it));////////////////////////////////////////////////////    // void autoColor(JFrame,Color,Color)//    String name = "GlobalMethods";//    JPanel pan = new Panel4(name);//    pan.add(new JTextArea());//    JFrame jf = new Frame4(pan);////////////////////////////////////////////////////    //void getComponents(JFrame)//    Component [] components = getComponents(jf);//    for (int i = 0; i < components.length; i++) {//      Component component = components[i];//      component.list();//    }//    // void autoColor(JFrame,Color,Color);//    autoColor(jf,Color.BLACK,Color.WHITE);//    // String [] listExtensions(String src)//    String[] bits = listExtensions(GlobalVariables.SRC);//    for (int i = 0; i < bits.length; i++) {//      String string = bits[i];//      //System.out.print("" + " = " + string);//    }////////////////////////////////////////////////////////////////////////////////////////////////////  } //TEST BED  /**   <p>   @param f file to read   @return table   */  public static Object[] getCSVTable(File f) {    String[] lines = GlobalMethods.getLinesFromFile(f);    String[] strings = null;    int num = 0;    ArrayList al = new ArrayList();    for (int i = 0; i < lines.length; i++) {      strings = GlobalMethods.stripCSV(lines[i]);      for (int j = 0; j < strings.length; j++) {        System.out.println("" + " = " + strings[i].toString());      }      num += 1;    }    int rows = GlobalMethods.countLines(f);    int len = strings.length * lines.length;    int cols = len / rows;//    for (int i = 0; i < len; i++) {//      System.out.println(strings[i].toString());//    }    return al.toArray();  }  /**   @param jpan  jpanel of piccy   @param fname name to save as   *///  public static void savePic(Component jpan, String fname) {//    Panel4T5CounterMaker.title = fname;//    saveT5(jpan);//  }  /**   @param jpan panel to use Graphics context of   *///  public static void saveT5(Component jpan) {//    File f = null;//    f = new File(Panel4T5CounterMaker.title + ".gif");//    Panel4T5CounterMaker.title = Panel4T5CounterMaker.jLabel13.getText().trim();////    f = new File(Panel4T5CounterMaker.title + ".gif");//    f = new File(Panel4T5CounterMaker.title + ".gif");//    Robot r;//    try {//      r = new Robot();//      BufferedImage bi = r.createScreenCapture(new Rectangle(jpan//        .getLocationOnScreen().x, jpan.getLocationOnScreen().y, jpan.getWidth(),//        jpan.getHeight()));//      try {//        ImageIO.write((RenderedImage) bi, "GIF", f);//      } catch (IOException ex) {//        Logger.getLogger(T5app.class.getName()).log(Level.SEVERE, null, ex);//        JOptionPane.showMessageDialog(Panel4T5CounterMaker.jf, "Grab error");//      }//      Panel4T5CounterMaker.title = "Temp";//    } catch (AWTException ex) {//      Logger.getLogger(GlobalMethods.class.getName())//        .log(Level.SEVERE, null, ex);//    }//  }  /**   <p>   @param jta   to display   @param name  as title   @param table required   */  public static void showTable(JTextArea jta, String name, String[] table) {    int c = 0;    if (table != null) {      if (!table[0].isEmpty()) {        try {          c = Integer.parseInt(table[0]);        } catch (Exception e) {          System.out.println(e);        }        name = table[1].toUpperCase();        jta.append(name + CRLF);        jta.append(GlobalMethods.comment("=", 20));        for (int i = 1; i < table.length; i++) {          jta.append(table[i] + "\t");          if (i % c == 0) {            jta.append(CRLF);          }        }      } else {        JOptionPane.showMessageDialog(jta, "" + table[0].toString());      }    }  }  /**   <p>   @param size String to show as title of table   @param Size Table to display   @return text of table   */  public static String showTable(String size, String[] Size) {    JTextArea jta = new JTextArea();    showTable(jta, "Size", Size);    return jta.getText();  }  /**   <p>   @param ra   array to check   @param name NOT USED   @return string   */  public static String printStringArray(String name, String[] ra) {    String string = "";    for (int k = 1; k < ra.length; k++) {      string += "\t" + ra[k];      if (k % Integer.parseInt(ra[0]) == 0) {        string += CRLF;      }    }    return string;  }  /**   <p>   @param file to search   @return number of lines in file   */  public static int countLines(File file) {    int lines = 0;    try {      BufferedReader reader = new BufferedReader(new FileReader(file));      String line;      // read input lines until the end of file is reached      while ((line = reader.readLine()) != null) {        lines++; // increment line count      }      reader.close();    } catch (IOException exception) {    }    return lines;  }  /**   <p>   @param hex to split   @return array of coords (x and y)   */  public static String[] splitCoords(String hex) {    String[] strings = new String[2];    strings[0] = hex.substring(0, 2);    strings[1] = hex.substring(2, 4);    return strings;  }  /**   <p>   @param string to search   @return string inside parens IE (String string)   */  public static String getStringInParens(String string) {    if ((string.contains("(")) & string.contains(")")) {      int start = string.indexOf("(") + 1;      int end = string.indexOf(")");      String contents = string.substring(start, end);      ////System.out.print("contents" + " = " +contents);      return contents;    }    return null;  }  /**   <p>   @param string to search   @return string before parenthese ()   */  public static String getStringBeforeParens(String string) {    return "NOT YET";  }  /**   <p>   @param column    column to check if it contains value   @param value     value to check is in column   @param column2   column to retrieve data from   @param tabledata table of data   @return string from table   */  public static String getStringFromTable(String column, String value,    String column2, String[] tabledata) {    // column  = title of table column that we compare with value to attain correct line of table    // value   = string to compare to attain correct line of table    // column2 = column to use for return value    // tabledata = String[]    try {      int cols = Integer.parseInt(tabledata[0]);      int col = 0;      int i;      for (i = 1; i <= cols; i++) {        if (column.equals(tabledata[i])) {          col = i;//        jta.append("  col = " + tabledata[i] + CRLF);          break;        }      }      int line = 0;      int j = col;      if (j > tabledata.length) {        j = tabledata.length;      }      for (j = col; j < tabledata.length; j += cols) {        if (value.equals(tabledata[j])) {//        jta.append("  value = " + tabledata[j] + CRLF);//        jta.append("  line " + j / cols + CRLF);          line = j / cols;          break;        }      }      int k;      int col2 = 0;      for (k = 1; k <= cols; k++) {        if (tabledata[k].startsWith(column2)) {          col2 = k;//        jta.append("  col2 = " + tabledata[k] + CRLF);          break;        }      }//    jta.append("  return = " + tabledata[col2 + (line * cols)] + CRLF);      return tabledata[col2 + (line * cols)];    } catch (Exception e) {      return null;    }  }  /**   <p>   @param com component to blacken   */  public static void blacken(Component com) {    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("" + " = " + );    }//</editor-fold>    com.setBackground(Color.lightGray);    com.setBackground(Color.black);  }  /**   <p>   @param it   container   @param back colour to set   @param fore colour to set   */  public static void autoColor(Container it, Color back, Color fore) {//    Component[] comps = it.getComponents();//    it.setForeground(fore);//    it.setBackground(back);//    //comp = new Component[comps.length];//    for (int i = 0; i < comps.length; i++) {//      if ((comps[i] != null) & (comps[i].isVisible())) {//        comps[i] = it.getComponent(i);//        //System.out.print("" + " = " + comps[i].toString());//        if ((comps[i].getForeground() != Color.GREEN) & (comps[i].getForeground() != Color.RED)) {//          comps[i].setForeground(fore);//        }//        comps[i].setBackground(back);//      }//    }  }  /**   <p>   @param dir to search   @return list of contents   *///  public static String[] getDirContents(String dir) {//    //<editor-fold defaultstate="collapsed" desc="DEBUG">//    boolean DEBUG = false;//    if (DEBUG) { // true or false//      System.out.print("\t" + Thread.currentThread().getStackTrace()[1]//        .getMethodName());//      System.out.print("dir" + " = " + dir);//      //System.out.print("" + " = " + );//    }////</editor-fold>//    ArrayList<String> al = new ArrayList<>(100);//    String[] f = FindExtensions.listFiles(new File(dir));////    if (f.length > 0) {////      for (int i = 0; i < f.length; i++) {////        //String string = f[i];////      }////    }//    return f;//  }  /**   <p>   @param dir to search for extensions   @return array of extensions   *///  public static String[] getExtensions(String dir) {//    String[] strings;//    strings = FindExtensions.listExtensions(getDirContents(dir));//    return strings;//  }  /**   <p>   @param jf JFrame containing components   @return list of components   */  public static Component[] getComponents(JFrame jf) {    return jf.getComponents();  }  /**   <p>   @param jp container to search   @return list of components   */  public static Component[] getComponents(Container jp) {    return jp.getComponents();  }  /**   @param f file to search   @return lines within file   */  public static String[] getLinesFromFile(File f) {    String line;    String[] lines = new String[countLines(f)];    int max = 0;    int i = 0;    try {      BufferedReader in = new BufferedReader(new FileReader(f));      try {        while ((line = in.readLine()) != null) {          //line = line.trim();          lines[i] = line;          i += 1;        }        in.close();      } catch (IOException ex) {        //Logger.getLogger(GlobalMethods.class.getName()).log(Level.SEVERE, null, ex);      }    } catch (FileNotFoundException ex) {      //Logger.getLogger(GlobalMethods.class.getName()).log(Level.SEVERE, null, ex);    }    return lines;  }  /**   <p>   @param table  array of strings for table   @param find   search for this   @param titles yes/no   @return line from table   */  public static String getLinesFromTable(String[] table, String find,    boolean titles) {    String string = "";    int num = Integer.parseInt(table[0]);    if (titles == true) {      for (int i = 1; i <= num; i++) {        string += "\t" + table[i].toUpperCase();      }      string += CRLF;    }    for (int i = 1; i < table.length; i += num) {      if (find.equals(table[i])) {        for (int j = i; j < i + num; j++) {          string += "\t" + table[j];        }        string += CRLF;      }    }    return string;  }  /**   <p>   @param table name of array of strings for table   @return titles of table columns   */  public static String getTableTitles(String[] table) {    String reply = "";    for (int i = 1; i < Integer.parseInt(table[0]) + 1; i++) {      reply += "\t" + table[i].toUpperCase();    }    return reply + CRLF;  }  /**   <p>   @param f File to search   @return longest line   */  public static int getLongestLine(File f) {    String[] lines = getLinesFromFile(f);    int max = 0;    for (int i = 0; i < lines.length; i++) {      if (lines[i].length() > max) {        max = lines[i].length();      }    }    return max;  }  /**   <p>   @param jl JList to get strings from   @return individual lines as array   */  public static String[] getStringsFromList(JList<String> jl) {    String[] strings = new String[jl.getModel().getSize()];    for (int i = 0; i < strings.length; i++) {      strings[i] = jl.getModel().getElementAt(i);    }    return strings;  }  /**   <p>   @param strings to print   @param title   their name   */  public static void printLoop(Object[] strings, String title) {    if (strings != null) {      int num = strings.length;      //System.out.print("=======================");      //System.out.print("" + "\t" + title);      for (int i = 0; i < num; i++) {        //System.out.print("" + strings[i]);      }      //System.out.print("=======================");    }  }  /**   <p>   @param strings to convert   @return morse as dot and dash string   */  public static String morsePrint(String[] strings) {    //http://en.wikipedia.org/wiki/Morse_code    // 0  dot = 1d "." dot    // 1  dash = 3d "_" dash    // 2  space between parts of the same letter = 1d " " space    // 3  space between two letters = 3d "   " letter    // 4  space between two words = 7d "       " word    //    String[] letters = new String[]{      ". _",//A =      "_ . . .",//B =      "_ . _ .",//C =      "_ . .",//D =      ".",//E =      ". . _ .",//F =      "_ _ .",//G =      ". . . .",//H =      ". .",//I =      ". _ _ _",//J =      "_ . _",//K =      ". _ . .",//L =      "_ _",//M =      "_ .",//N =      "_ _ _",//O =      ". _ _ .",//P =      "_ _ . _",//Q =      ". _ .",//R =      ". . .",//S =      "_",//T =      ". . _",//U =      ". . . _",//V =      ". _ _",//W =      "_ . . _",//X =      "_ . _ _",//Y =      "_ _ . ."//Z =    };    String[] numbers = new String[]{      ". _ _ _",//1 =      ". . _ _ _",//2 =      ". . . _ _",//3 =      ". . . . _",//4 =      ". . . . .",//5 =      "_ . . . .",//6 =      "_ _ . . .",//7 =      "_ _ _ . .",//8 =      "_ _ _ _ .",//9 =      "_ _ _ _ _"//0 =    };    String[] alnum = new String[letters.length + numbers.length];    System.arraycopy(letters, 0, alnum, 0, 26);    System.arraycopy(numbers, 0, alnum, 26, 10);    return "";  }  /**   <p>   @param txt to capitalise   @return capitalised text   */  public static String capWords(String txt) {//    String[] words = txt.split(" ");//    String[] words = txt.replace("\"", "").split(" ");    String[] words = txt.replace(",", ", ").split(" ");    String worded = "";    for (int i = 0; i < words.length; i++) {      String word = words[i].toLowerCase();      if (word.length() > 0) {        String start = word.substring(0, 1).toUpperCase();        words[i] = start + word.substring(1);        if ("\"".equals(start)) {          start = "\"" + word.substring(1, 2).toUpperCase();          words[i] = start + word.substring(2);        }        worded += words[i];        if (i < words.length - 1) {          worded += " ";        }      }    }    return worded;  }  /**   <p>   @param line to strip   @return array of strings broken by ""\",\""   */  public static String[] stripCSV(String line) {    String[] strings = line.split("\",\"");    int num = strings.length;    strings[0] = strings[0].replace("\"", "");    strings[num - 1] = strings[num - 1].replace("\"", "");    for (int i = 0; i < num; i++) {      //System.out.print("strings[" + i + "]" + " = " + strings[i]);    }    return strings;  }  /**   saveIt   <p>   @param jta text to save   *///  public static void saveIt(JTextArea jta) {//    //<editor-fold defaultstate="collapsed" desc="DEBUG">//    boolean DEBUG = false;//    if (DEBUG) { // true or false//      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());//      //System.out.print("Start SAVE");//    }//    //</editor-fold>//    int ret;//    if ((ret = DBViewer.jfc.showSaveDialog(DBViewer.jfc))//      == JFileChooser.APPROVE_OPTION) {//      String file = DBViewer.jfc.getSelectedFile().toString();//      DBViewer.jfc.setSelectedFile(new File(file));////      //System.out.print("SAVE " + file);//      try {//        try (PrintWriter out = new PrintWriter(new FileWriter(file))) {//          out.print(jta.getText());////          //System.out.print("" + " = " + "Saving");//        }//      } catch (IOException ex) {//        //System.out.print(ex);//      }////      //System.out.print("" + " = " + "Saved");//    }//  }  /**   <p>   @param jta  to read   @param file to save   *///  public static void saveIt(JTextArea jta, String file) {//    int ret;//    DBViewer.jfc.setSelectedFile(new File(file));//    if ((ret = DBViewer.jfc.showSaveDialog(DBViewer.jfc))//      == JFileChooser.APPROVE_OPTION) {////      String file = DBViewer.jfc.getSelectedFile().toString();////      //System.out.print("SAVE " + file);//      try {//        try (PrintWriter out = new PrintWriter(new FileWriter(file))) {//          out.print(jta.getText());////          //System.out.print("" + " = " + "Saving");//        }//      } catch (IOException ex) {//        //System.out.print(ex);//      }////      //System.out.print("" + " = " + "Saved");//    }//  }  /**   <p>   @param txt to add   *///  public static void saveCSV(String[] txt) {//    JTextArea jta = new JTextArea("\tsaveCSV\nTest\n");//    JPanel jp = new Panel4("CSV");//    jp.add(jta);//    JFrame jf = new Frame4(jp);////    jta.setText("");//    for (int i = 0; i < txt.length - 1; i++) {//      jta.append("\"" + txt[i] + "\",");//    }//    jta.append("\"" + txt[txt.length - 1] + "\";");//  }  /**   <p>   @param jta JTextArea of items to add to jcb   @param jcb JComboBox place to add strings from jta   */  public static void toComboBox(JTextArea jta, JComboBox<String> jcb) {    String[] strings = jta.getText().split(CRLF);    JComboBox<String> jcb2 = new JComboBox<>(strings);    jcb.setModel(jcb2.getModel());  }  /**   @param jcb JComboBox   @param jta JTextArea   */  public static void toTextArea(JComboBox<String> jcb, JTextArea jta) {    jta.setText("");    for (int i = 0; i < jcb.getItemCount(); i++) {      jta.append(jcb.getItemAt(i) + CRLF);    }  }  /**   @param tl int to convert   @return hex value   */  public static String toHex(int tl) {    String tech = "";    switch (tl) {      case 10: {        tech = "A";        break;      }      case 11: {        tech = "B";        break;      }      case 12: {        tech = "C";        break;      }      case 13: {        tech = "D";        break;      }      case 14: {        tech = "E";        break;      }      case 15: {        tech = "F";        break;      }      case 16: {        tech = "G";        break;      }      case 17: {        tech = "H";        break;      }      case 18: {        tech = "I";        break;      }      case 19: {        tech = "J";        break;      }      case 20: {        tech = "K";        break;      }      default: {        tech = "" + tl;      }    }    return tech;  }  /**   <p>   @param hex to convert   @return decimal value   */  public static int fromHex(String hex) {    int num = 0;    if (hex == null) {      return 0;    }    switch (hex) {      case "A": {        num = 10;        break;      }      case "B": {        num = 11;        break;      }      case "C": {        num = 12;        break;      }      case "D": {        num = 13;        break;      }      case "E": {        num = 14;        break;      }      case "F": {        num = 15;        break;      }      case "G": {        num = 16;        break;      }      case "H": {        num = 17;        break;      }      case "I": {        num = 18;        break;      }      case "J": {        num = 19;        break;      }      case "K": {        num = 20;        break;      }      default: {        try {          num = Integer.parseInt(hex);        } catch (Exception e) {          num = 0;        }      }    }    return num;  }  /**   <p>   @param comm letter to print   @param num  number of multiples of comm   @return line of comment string   */  public static String comment(String comm, int num) {    String string = "";    for (int i = 0; i < num; i++) {      string += (comm);    }    return string + CRLF;  }  /**   <p>   @param overwrite //true=save new data, false = check if already done and                    ask if overwrite   @param jta       JTextArea to save   @param hasparent whether run from another program or alone from main()   *///  public static void autoSave(boolean overwrite, JTextArea jta,//    Boolean hasparent) {//    //true=save new data, false = check if already done and ask if overwrite//    JFileChooser jfc = dbviewer.DBViewer.jfc;//    File f = null;//    if (hasparent == true) {//      f = new File(panels.Panel4SubSector.jList1.getSelectedValue().toString()//        + "-" + panels.Panel4SubSector.UWP.getText().substring(7, 8) + ".txt");//    } else {//      //f = new File("./OrbitalData.txt");//    }//    jfc.setSelectedFile(f);//    saveIt(jta);//  }  /**   <p>   @param j number to convert   @return letter of the alphabet   */  public static String num2Let(int j) {    String let = "";    switch (j) {      case 0:        let = "Z";        break;      case 1:        let = "A";        break;      case 2:        let = "B";        break;      case 3:        let = "C";        break;      case 4:        let = "D";        break;      case 5:        let = "E";        break;      case 6:        let = "F";        break;      case 7:        let = "G";        break;      case 8:        let = "H";        break;      case 9:        let = "I";        break;      case 10:        let = "J";        break;      case 11:        let = "K";        break;      case 12:        let = "L";        break;      case 13:        let = "M";        break;      case 14:        let = "N";        break;      case 15:        let = "O";        break;      case 16:        let = "P";        break;      case 17:        let = "Q";        break;      case 18:        let = "R";        break;      case 19:        let = "S";        break;      case 20:        let = "T";        break;      case 21:        let = "U";        break;      case 22:        let = "V";        break;      case 23:        let = "W";        break;      case 24:        let = "X";        break;      case 25:        let = "Y";        break;      case 26:        let = "Z";        break;    }    return let;  }  /**   <p>   @param letter to convert   @return pronunciation of letter   */  public static String let2Snd(String letter) {    String Sound = "";    switch (letter) {      case "A":        Sound = "Aye";        break;      case "B":        Sound = "Bee";        break;      case "C":        Sound = "See";        break;      case "D":        Sound = "Dee";        break;      case "E":        Sound = "Eee";        break;      case "F":        Sound = "Eff";        break;      case "G":        Sound = "Gee";        break;      case "H":        Sound = "Aitch";        break;      case "I":        Sound = "Eye";        break;      case "J":        Sound = "Jay";        break;      case "K":        Sound = "Kay";        break;      case "L":        Sound = "Ell";        break;      case "M":        Sound = "Em";        break;      case "N":        Sound = "En";        break;      case "O":        Sound = "Oh";        break;      case "P":        Sound = "Pee";        break;      case "Q":        Sound = "Cue";        break;      case "R":        Sound = "Are";        break;      case "S":        Sound = "Ess";        break;      case "T":        Sound = "Tee";        break;      case "U":        Sound = "You";        break;      case "V":        Sound = "Vee";        break;      case "W":        Sound = "DoubleYou";        break;      case "X":        Sound = "Eks";        break;      case "Y":        Sound = "Wye";        break;      case "Z":        Sound = "Zed";        break;    }    return Sound;  }  /**   <p>   @param letter to convert   @return Greek alpha bet(a) delta gamma)   */  public static String let2Grk(String letter) {    String Word = "";    switch (letter.toUpperCase()) {      case "A": {        Word = "Alpha";        break;      }      case "B": {        Word = "Beta";        break;      }      case "C": {        Word = "Gamma";        break;      }      case "D": {        Word = "Delta";        break;      }      case "E": {        Word = "Epsilon";        break;      }      case "F": {        Word = "Zeta";        break;      }      case "G": {        Word = "Eta";        break;      }      case "H": {        Word = "Theta";        break;      }      case "I": {        Word = "Iota";        break;      }      case "J": {        Word = "Kappa";        break;      }      case "K": {        Word = "Lambda";        break;      }      case "L": {        Word = "Mu";        break;      }      case "M": {        Word = "Nu";        break;      }      case "N": {        Word = "Xi";        break;      }      case "O": {        Word = "Omicron";        break;      }      case "P": {        Word = "Po";        break;      }      case "Q": {        Word = "Rho";        break;      }      case "R": {        Word = "Sigma";        break;      }      case "S": {        Word = "Tau";        break;      }      case "T": {        Word = "Upsilon";        break;      }      case "U": {        Word = "Phi";        break;      }      case "V": {        Word = "Chis";        break;      }      case "W": {        Word = "Psi";        break;      }      case "X": {        Word = "Omega";        break;      }      case "Y": {        Word = "DUH";        break;      }      case "Z": {        Word = "Zero";        break;      }    }    return Word;  }  /**   <p>   @param jta to countLines   @return number of lines   */  public static int countLines(JTextArea jta) {    //count lines in JTextArea    int num = 0;    String string = jta.getText();    String[] strings = string.split(CRLF);    for (int i = 0; i < jta.getLineCount() - 1; i++) {      //System.out.print("" + " = " +strings[i]);    }    return strings.length;  }  /**   <p>   @param jta       JTextArea to display in   @param tables    tables to display   @param names     names of table to display   @param startname name of file to save   *///  public static void saveCSVs(JTextArea jta, String[][] tables, String[] names,//    String startname) {//    String name;//    String[] table;//    for (int j = 0; j < tables.length; j++) {//      table = tables[j];//      name = names[j];//      jta.setText("");//      int num = Integer.parseInt(table[0].toString());//      for (int i = 1; i < table.length; i++) {//        jta.append("\"" + table[i] + "\"");//        if (i != table.length - 1) {//          jta.append(",");//          if (i % num == 0) {//            jta.append(CRLF);//          }//        }//      }//      GlobalMethods.saveIt(jta,//        GlobalVariables.CSV + startname + name);//    }//    jta.setText("");//  }  /**   <p>   @param num number of dice to roll   @return result of multiple die rolls   */  public static int getRoll(int num) {    int roll = 0, i = 0;    for (i = 0; i < num; i++) {      roll += (int) ((Math.random() * 6) + 1);    }    return roll;  }  /**   <p>   @param dir  for file   @param file title of file   @param ext  extension of file   @param txt  to save   */  public static void saveTextFile(String dir, String file, String ext,    String txt) {//    //<editor-fold defaultstate="collapsed" desc="DEBUG">//    boolean DEBUG = false;//    if (DEBUG) { // true or false//      System.out.print(globals.GlobalMethods.comment("=", 20));//      System.out.println("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());//      System.out.print(globals.GlobalMethods.comment("-", 20));//    }////</editor-fold>    String string;    string = null;    //JOptionPane.showMessageDialog(null, string);    try {      string = dir + FS + file + "." + ext.toLowerCase();      string = string.replace(FS + FS, FS);      string = string.replace("..", ".");//      JOptionPane.showMessageDialog(null, string);      try (PrintWriter out = new PrintWriter(new FileWriter(new File(string)))) {        out.print(txt);        out.close();      }    } catch (IOException ex) {      System.out.println("IOException" + " = " + ex);    }  }  public static void saveTextFile(String d, String f, String e, String[] lines) {    String txt = "";    for (int i = 0; i < lines.length; i++) {      txt += lines[i] + CRLF;      System.out.println(lines[i]);    }    saveTextFile(d, f, e, txt);  }  /**   <p>   @param folder for file   @param name   name of file   @param ext    extension of file   @return txt array of strings   */  public static String loadTextFile(String folder, String name, String ext) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      System.out.print(GlobalMethods.comment("=", 20));      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]        .getMethodName());      System.out.print(GlobalMethods.comment("-", 20));    }//</editor-fold>    String text = null;    String string = null;    try {      string = folder + FS + name + "." + ext;      string = string.replace(FS + FS, FS);      string = string.replace("..", ".");      File f = new File(string);      String[] lines = getLinesFromFile(f);      text = "";      for (int i = 0; i < lines.length; i++) {        text += lines[i] + CRLF;      }    } catch (Exception e) {      System.out.println("Exception" + " = " + e);    }//    JOptionPane.showMessageDialog(jf, "" + string);    return text;  }  /**   <p>   @param path file to load   @return all text as one string   */  public static String loadTextFile(String path) {    String[] lines = getLinesFromFile(new File(path));    String ret = "";    for (int i = 0; i < lines.length; i++) {      ret += lines[i] + CRLF;    }    return ret;  }  /**   <p>   @param text to save   @param ext  file extension   *///  public static void saveText(String text, final String ext) {//    System.out.println(text);//    jfc.setFileFilter(new FileFilter() {//      @Override//      public boolean accept(File file) {//        if (ext.toString().endsWith(ext)) {//          return true;//        } else {//          return false;//        }//      }////      @Override//      public String getDescription() {//        return GlobalMethods.capWords(ext) + " files";//      }//    });//    int reply = jfc.showSaveDialog(null);//    if (reply == JFileChooser.APPROVE_OPTION) {//      try {//        saveTextFile(jfc.getCurrentDirectory().toString(),//          Panel4SubSector.jList1.getSelectedValue().toString(),//          ext,//          text);//      } catch (Exception e) {//        saveTextFile(jfc.getCurrentDirectory().toString(),//          "Test",//          ext,//          text);//      }//    }//  }  /**   <p>   @return value between 1 and 6   */  public static int roll1d() {    return GlobalMethods.getRoll(1);  }  /**   <p>   @return value between 2 and 12   */  public static int roll2d() {    return GlobalMethods.getRoll(2);  }  /**   <p>   @return value between -5 and +5   */  public static int rollFlux() {    return GlobalMethods.getRoll(2) - 7;  }  /**   <p>   @return good flux roll   */  public static int rollGoodFlux() {    int x = GlobalMethods.getRoll(2) - 7;    if (x < 0) {      x = -x;    }    return x;  }  /**   <p>   @return bad flux roll   */  public static int rollBadFlux() {    int x = GlobalMethods.getRoll(2) - 7;    if (x > 0) {      x = -x;    }    return x;  }  /**   <p>   @param table string array to search   @param start beginning array number of required line   @return line from table   */  public static String getLineFromTable(String[] table, int start) {    String reply = "";    for (int i = start; i < (start + Integer.parseInt(table[0])); i++) {      reply += "\t" + table[i];    }    return reply;  }  /**   <p>   @param star to check for HZ   @return HZ of specified star   *///  public static String getHZ(String star) {//    try {//      Panel4T5Locator.type = star.substring(0, 1);//      Panel4T5Locator.dec = Integer.parseInt(star.substring(1, 2));//      Panel4T5Locator.size = star.substring(3);//      return getHZ(Panel4T5Locator.type, Panel4T5Locator.dec,//        Panel4T5Locator.size);//    } catch (Exception e) {//      return "0";//    }//  }  /**   <p>   @param type of star   @param dec  of star   @param size of star   @return HZ for star   *///  public static String getHZ(String type, int dec, String size) {//    //<editor-fold defaultstate="collapsed" desc="DEBUG">//    boolean DEBUG = false;//    if (DEBUG) {//    }//    //</editor-fold>//    int x = 0;//    //    String mod = "";//    switch (type) {//      case "A": {//        if (dec <= 3) {//          dec = 0;//        } else if (dec >= 4 & dec <= 8) {//          dec = 4;//        } else if (dec >= 9) {//          dec = 9;//        }//        break;//      }//      case "F": {//        if (dec <= 1) {//          type = "A";//          dec = 9;//        } else if (dec >= 2 & dec <= 6) {//          dec = 2;//        } else if (dec >= 7) {//          dec = 7;//        }//        break;//      }//      case "G": {//        if (dec <= 1) {//          type = "F";//          dec = 7;//        } else if (dec >= 2 & dec <= 8) {//          dec = 2;//        } else if (dec >= 9) {//          dec = 9;//        }//        break;//      }//      case "K": {//        if (dec <= 3) {//          type = "G";//          dec = 9;//        } else if (dec >= 4 & dec <= 8) {//          dec = 4;//        } else if (dec >= 9) {//          dec = 9;//        }//        break;//      }//      case "M": {//        if (dec <= 3) {//          type = "K";//          dec = 9;//        } else if (dec >= 4 & dec <= 8) {//          dec = 4;//        } else if (dec >= 9) {//          dec = 9;//        }//        break;//      }//    }//    //    JOptionPane.showMessageDialog(jf, type + dec);//    try {//      x = Integer.parseInt(getStringFromTable("Size", size, type + dec,//        GlobalVariables.HabZones));//      return "" + x;//    } catch (NumberFormatException e) {//      x = -1;//      return "" + x;//    }//  }//  static String getFromTable(String[] table, String x, String y) {////    System.out.println("table[0]" + " = " + table[0]);//    cols = Integer.parseInt(table[0]);////    System.out.println("cols" + " = " + cols);//    rows = (table.length - 1) / cols;////    System.out.println("rows" + " = " + rows);//    col = 0;//    row = GlobalMethods.fromHex(y);////    System.out.println("row" + " = " + row);//    pop = Panel4SubSector.po;////    System.out.println("pop" + " = " + pop);//    tl = Panel4SubSector.tl;////    System.out.println("tl" + " = " + tl);//    int i = 0;//    for (i = 1; i <= cols; i++) {//      if (table[i].contains(x)) {//        col = i;////        System.out.println("row" + " = " + y);//        break;//      }//    }//    for (i = 1; i < table.length; i += cols) {//      if (table[i].contains(y)) {//        break;//      }//    }//    if (i + col < table.length) {//      return table[(i + col) - 1];//    } else {//      return "X";//    }//  }//  static String getFromTable(int tablenum, String x, String y) {//    table = tables[tablenum];////    System.out.println("table[0]" + " = " + table[0]);//    cols = Integer.parseInt(table[0]);////    System.out.println("cols" + " = " + cols);//    rows = (table.length - 1) / cols;////    System.out.println("rows" + " = " + rows);//    col = 0;//    row = GlobalMethods.fromHex(y);////    System.out.println("row" + " = " + row);//    pop = Panel4SubSector.po;////    System.out.println("pop" + " = " + pop);//    tl = Panel4SubSector.tl;////    System.out.println("tl" + " = " + tl);//    int i = 0;//    for (i = 1; i <= cols; i++) {//      if (table[i].contains(x)) {//        col = i;////        System.out.println("row" + " = " + y);//        break;//      }//    }//    for (i = 1; i < table.length; i += cols) {//      if (table[i].contains(y)) {//        break;//      }//    }//    if (i + col < table.length) {//      return table[(i + col) - 1];//    } else {//      return "X";//    }//  }  /**   @param jf frame to grab   *///  public static void grab(JFrame jf) {//    JFrame frame = (JFrame) jf.getRootPane().getParent();//    GlobalMethods.grabFrame(frame);//  }  /**   <p>   @param jf JFrame to grab   *///  public static void grabFrame(JFrame jf) {//    Robot r;//    try {//      r = new Robot();//      String path = T5 + FS + jf.getTitle() + ".gif";//      BufferedImage bi = r.createScreenCapture(new Rectangle(//        jf.getContentPane().getX(), jf.getContentPane().getY(), jf//        .getContentPane().getWidth(), jf.getContentPane().getHeight()));//      File f = new File(path);////      try {//////        ImageIO.write((RenderedImage) bi, "GIF", f);////      } catch (IOException ex) {////        Logger.getLogger(T5app.class////          .getName()).log(Level.SEVERE, null, ex);////      }////      //BufferedImage capture = runtime.createScreenCapture(aThis.getBounds());//    } catch (AWTException ex) {//      Logger.getLogger(GlobalMethods.class.getName())//        .log(Level.SEVERE, null, ex);//    }//    grabComponentAs(jf.getContentPane(), jf.getTitle());//  }  /**   @param comp  component to grab   @param fname name to save as   *///  public static void grabComponentAs(Component comp, String fname) {//    String title = fname;//    saveT5(comp);//  }  /**   @param txt text to put on clipboard   *///  public static void txt2cb(String txt) {////    if (running) {//    if (txt != null) {//      StringSelection sel = new StringSelection(txt.trim() + CRLF);//      Panel4T5Locator.cb.setContents(sel, null);//      System.out.println(sel);//    }////    }//  }  /**   @return string contained on clipboard   @throws UnsupportedFlavorException on problem   @throws IOException                on error   *///  public static String paste() throws UnsupportedFlavorException, IOException {//    //<editor-fold defaultstate="collapsed" desc="IF DEBUG">//    boolean DEBUG = false;//    //DEBUG = false;//    if (DEBUG) { // true or false//      System.out.print(GlobalMethods.comment("=", 80));//      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]//        .getMethodName());//      System.out.println(Panel4T5Locator.cb.getContents(null));//      System.out.println(Panel4T5Locator.cb.getAvailableDataFlavors());//      System.out.println(Panel4T5Locator.cb.getData(DataFlavor//        .getTextPlainUnicodeFlavor()));//    }//    //</editor-fold>//    String string = Panel4T5Locator.cb.getContents("global").toString();//    System.out.println(string);//    return string;//  }  /**   @return UPP   */  public static String rollUPP() {    String UPP = "";    for (int i = 0; i < 6; i++) {      String upp = toHex(roll2d());      UPP += upp;    }    return UPP;  }  /**   @return NPC   *///  public static String showNPC() {//    JTextArea jta = new JTextArea();////    JPanel jp = new Panel4("NPC");////    jp.add(jta, BorderLayout.CENTER);////    JFrame jf = new Frame4(jp);////    jf.setSize(200, 200);////    jf.addWindowListener(new WindowAdapter() {////////      @Override////      public void windowClosed(WindowEvent e) {////      }////////      @Override////      public void windowClosing(WindowEvent e) {////        Panel4T5Locator.txt2cb(jta.getText());////      }////////    });//    String race = Panel4T5Locator.jcb4Lang.getSelectedItem().toString();//    int a = GlobalMethods.roll1d();//    if (a < 5) {//      Panel4T5Locator.Sex.setSelected(true);//    } else {//      Panel4T5Locator.Sex.setSelected(false);//    }//    if (Panel4T5Locator.Sex.isSelected()) {//      race += "-" + "Male";//    } else {//      race += "-" + "Female";//    }//    String name = Panel4T5Locator.jtf4Word.getText();//    String career = Panel4T5Locator.jcb4Career.getSelectedItem().toString();//    String terms = "" + Panel4T5Locator.js4Terms.getValue();//    String upp = Panel4T5Locator.jtf4UPP.getText();//    int age = (18 + (int) Panel4T5Locator.js4Terms.getValue() * 4);//    if (career.startsWith("-")) {//      career = Panel4T5Locator.jtf4Word.getText();//    } else {//      Panel4T5CounterMaker.Folder.setSelectedItem(career);//      Panel4T5CounterMaker.t12.setText(race);//      Panel4T5CounterMaker.t13.setText(name);//      Panel4T5CounterMaker.t14.setText("Terms: " + terms);//      Panel4T5CounterMaker.t15.setText("UPP: " + upp);//      Panel4T5CounterMaker.t16.setText("AGE: " + age);//      int agerolls = Integer.parseInt(terms) - 4;//      if (agerolls > 0) {//        Panel4T5CounterMaker.t16.setText(//          "AGE: " + age + ":(-" + (agerolls) + ")");//      }//      Panel4T5CounterMaker.t17.setText("RANK: " + "");//      Panel4T5CounterMaker.X.doClick();//      Panel4T5CounterMaker.X.doClick();//      Panel4T5CounterMaker.setText.doClick();//    }//    jta.setText("");//    String[] detailtypes = new String[]{//      "Race", "Name", "Career", "Terms", "Age",//      "UPP", "", "", "", ""//    };//    String[] details = new String[]{//      race, name, career, terms, "" + age,//      upp//    };//    for (int i = 0; i < details.length; i++) {//      jta.append(detailtypes[i].toUpperCase() + ": " + details[i] + CRLF);//    }//    return jta.getText();////    jta.append("TERMS: " + terms + CRLF);////    jta.append("AGE: " + num + "-" + (num + 3) + " yrs" + CRLF);//  }}/* */