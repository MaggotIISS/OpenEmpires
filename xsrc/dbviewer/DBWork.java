/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer;import java.awt.BorderLayout;import java.awt.Component;import java.awt.Dimension;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.io.File;import java.util.ArrayList;import javax.swing.AbstractAction;import javax.swing.Box;import javax.swing.JButton;import javax.swing.JCheckBox;import javax.swing.JComboBox;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JSpinner;import javax.swing.JTextArea;import javax.swing.JTextField;import javax.swing.SpinnerNumberModel;import panels.Panel4Careers;import panels.Panel4LabelComboButton;/** @author maggot.iiss */public class DBWork extends JPanel {  private int num = 10;  /**   JFrame   */  public static JFrame jf = new JFrame();  /**   DBWork   */  public static DBWork dbw;  /**   Box   */  public static Box southpanel = Box.createHorizontalBox();  /**   Box   */  public static Box northpanel = Box.createHorizontalBox();  /**   JSpinner   */  public static final JSpinner js = new JSpinner();  private static JScrollPane jsp;  private static JComboBox jcb;  private static JTextArea jta;  private static String CRLF = System.lineSeparator();  private static String FS = File.separator;  private String[] args = {"DBWork"};  //<editor-fold defaultstate="collapsed" desc="main">//  /**//   *//   * @param args//   *///  public static void main(String[] args) {//    if (args.length < 1) {//      args = new String[]{"DBWork"};//    }//    jf.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);//    jf.addWindowListener(new WindowAdapter() {////      @Override//      public void windowClosing(WindowEvent we) {//        jf.getContentPane().removeAll();//      }//    });//    jf.setBounds(200, 0, 420, 600);//    jf.setTitle(args[0]);//    dbw = new DBWork(args);//    jsp = new JScrollPane(dbw);//    jf.getContentPane().add(jsp);//    jf.setVisible(true);//    jcb.setSelectedIndex(3);//  }  //</editor-fold>  /**   DBWork   */  @SuppressWarnings("unchecked")  public DBWork() {    super();    jf.getContentPane().removeAll();    jf.setBounds(200, 0, 420, 500);    jf.setTitle(args[0]);    jf.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);    jf.addWindowListener(new WindowAdapterImpl());    jf.setBounds(200, 0, 420, 500);    setLayout(new BorderLayout());    jcb = new JComboBox();    jcb.addActionListener(new RenumberActionListener("Renumber"));    jcb.addItem("");    jcb.addItem("All");    jcb.addItem("Labels");    jcb.addItem("Combos");    jcb.addItem("Buttons");    ActionListener comboListener = new ComboActionListener("comboListener");    jcb.addActionListener(comboListener);    Dimension jsize = jcb.getPreferredSize();    jcb.setMaximumSize(jsize);    northpanel.removeAll();    northpanel.add(jcb);    jf.getContentPane().add(northpanel, BorderLayout.NORTH);    JLabel jlc = new JLabel("Component");    js.setModel(new SpinnerNumberModel(0, 0, 1, 1));    Dimension ssize = js.getPreferredSize();    js.setMaximumSize(ssize);    final JTextField jtf = new JTextField(8);    Dimension prefwid = jtf.getPreferredSize();    jtf.setMaximumSize(prefwid);    final JCheckBox cb = new JCheckBox("false");    cb.setToolTipText("String? else Variable");    cb.addActionListener(new CheckBoxActionListener(cb));    final JComboBox commands = new JComboBox();    commands.addItem("");    commands.addItem("writeJava");    commands.addItem("readJava");    commands.addItem("setEnabled");    commands.addItem("setToolTipText");    commands.addItem("clearItems");    commands.addItem("addItem");    Dimension csize = commands.getPreferredSize();    commands.setMaximumSize(csize);    commands.addActionListener(new CommandActionListener(commands, cb, jtf));    JLabel jlv = new JLabel("Value");    southpanel.removeAll();    southpanel.add(jlc);    southpanel.add(js);    southpanel.add(commands);    southpanel.add(jlv);    southpanel.add(jtf);    southpanel.add(cb);    jf.getContentPane().add(southpanel, BorderLayout.SOUTH);    jta = new JTextArea();    jsp = new JScrollPane(jta);    MouseListener mouseadapter = new WindowClear();    jta.addMouseListener(mouseadapter);    jf.getContentPane().add(jsp, BorderLayout.CENTER);    jf.setVisible(true);    jcb.setSelectedIndex(3);    commands.setSelectedIndex(2);    jf.toFront();  }  /**   @param args strings to start   */  public DBWork(String[] args) {    this();    jf.setTitle(args[0]);  }  /**   @return name of class   */  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }  private class WindowClear extends MouseAdapter {    public WindowClear() {    }    @Override    public void mouseClicked(MouseEvent me) {      if (me.getClickCount() == 3) {        jta.setText("");      }    }  }  private static class WindowAdapterImpl extends WindowAdapter {    public WindowAdapterImpl() {    }    @Override    public void windowClosing(WindowEvent we) {      jf.getContentPane().removeAll();    }  }  private class RenumberActionListener extends AbstractAction {    public RenumberActionListener(String arg0) {      super(arg0);    }    @Override    public void actionPerformed(ActionEvent arg0) {      js.setModel(new SpinnerNumberModel(0, 0, num, 1));    }  }  private class ComboActionListener extends AbstractAction {    public ComboActionListener(String arg0) {      super(arg0);    }    @Override    public void actionPerformed(ActionEvent arg0) {      jta.setText("");      switch (jcb.getSelectedItem().toString()) {        default:          jta.append(CRLF);          break;        case "":          break;        case "All":          showParts("All");          break;        case "Labels":          showParts("JLabel");          break;        case "Combos":          showParts("JComboBox");          break;        case "Buttons":          showParts("JButton");          break;      }    }    @SuppressWarnings("unchecked")    private void showParts(String string) {      int i, l = 0, c = 0, b = 0;      int len;      Component[] comps;      String varname;      String name = null;//        switch (jf.getTitle()) {//          case "PCGen"://            name = Panel4Careers.getPCName();//            break;//          default://            name = DBViewer1.getTitle();//            Debug.debug(" = " + name + FS + "Lists" + FS + name + ".java");//        }      len = Panel4LabelComboButton.getJpan().getComponents().length;      js.setModel(new SpinnerNumberModel(0, 0, num, 1));      comps = Panel4LabelComboButton.getJpan().getComponents();      ArrayList jlabel = new ArrayList();      ArrayList jcombobox = new ArrayList();      ArrayList jbutton = new ArrayList();      jta.append("Components = " + len + CRLF);      num = 0;      for (i = 0; i < len; i++) {        comps[i] = Panel4LabelComboButton.getJpan().getComponent(i);        if (Panel4LabelComboButton.getJpan().getComponent(i).toString()          .contains(string)) {          String start = "Component [" + i + "] = " + comps[i].getName() + " = ";//            num+=1;          switch (string) {            case "JLabel":              jlabel.add(comps[i]);              varname = "jlabel";              start += varname + " [";              jta.append(start + l + "]" + CRLF);              l += 1;              break;            case "JComboBox":              jcombobox.add(comps[i]);              varname = "jcombobox";              start += varname + " [";              jta.append(start + c + "]" + CRLF);              c += 1;              break;            case "JButton":              jbutton.add(comps[i]);              varname = "jbutton";              start += varname + " [";              jta.append(start + b + "]" + CRLF);              b += 1;              break;          }        }        if ("All".equals(string)) {          jta.append("comps[" + i + "] = " + comps[i].getName());          jta.append(" = " + comps[i].toString() + CRLF);        }        num = comps.length - 1;      }      switch (string) {        case "All":          jta.append("comps.length() = " + comps.length);          break;        case "JLabel":          jta.append("jlabel.size() = " + jlabel.size());          break;        case "JComboBox":          jta.append("jcombobox.size() = " + jcombobox.size());          break;        case "JButton":          jta.append("jbutton.size() = " + jbutton.size());          break;      }      jta.append(CRLF + CRLF);    }  }  private static class CheckBoxActionListener implements ActionListener {    private final JCheckBox cb;    public CheckBoxActionListener(JCheckBox cb) {      this.cb = cb;    }    @Override    public void actionPerformed(ActionEvent arg0) {      if (cb.isSelected()) {        cb.setText("true");      } else {        cb.setText("false");      }    }  }  private class CommandActionListener implements ActionListener {    private final JComboBox commands;    private final JCheckBox cb;    private final JTextField jtf;    public CommandActionListener(JComboBox commands, JCheckBox cb,      JTextField jtf) {      this.commands = commands;      this.cb = cb;      this.jtf = jtf;    }    @Override    public void actionPerformed(ActionEvent arg0) {      String value = commands.getSelectedItem().toString();      if (value.equals("writeJava")) {        writeJava();      } else {        switch (value) {          //Text          case "setToolTipText":          case "addItem":            if ("true".equals(cb.getText())) {              value = "(\"" + jtf.getText() + "\");\n";            } else {              value = "(" + jtf.getText() + ");\n";            }            break;          //true/false          case "setEnabled":            value = "(" + cb.getText() + ");\n";            break;          //nothing          case "clearItems":            value = "();\n";            break;          case "readJava":            readJava();            break;        }        jta.append("comps[" + js.getValue() + "]." + commands.getSelectedItem()          .toString() + value);      }    }    private void writeJava() {      jta.setText("" + "//writeJava ");      String title;      switch (jf.getTitle()) {        case "DBViewer":          //jta.append(DBViewer1.getTitle());          title = DBViewer.getTitle();          break;        case "DBWork":          //jta.append("DBWork");          title = "DBWork";          break;        case "PCGen":          //jta.append(Panel4Careers.getPCName());          title = Panel4Careers.getPCName();          break;        default:          //jta.append(DBViewer1.getTitle());          title = DBViewer.getTitle();          break;      }      jta.append(title + "Work" + CRLF        + "Component[] comps = new Component[Panel4LabelComboButton.getJpan().getComponents().length];"        + CRLF);      jta.append("for (int i = 0; i < comps.length; i++) {" + CRLF);      jta.append(        "  comps[i] = Panel4LabelComboButton.getJpan().getComponent(i);" + CRLF);      jta.append("};" + CRLF);      Component[] comps = new Component[Panel4LabelComboButton.getJpan()        .getComponents().length];      for (int i = 0; i < comps.length; i++) {        comps[i] = Panel4LabelComboButton.getJpan().getComponent(i);        String end = comps[i].getName() + CRLF;        String enable = "comps[" + i + "].setEnabled(true);" + CRLF;        String tip = "comps[" + i + "].setToolTipText(\"LabelTip\");" + CRLF;        String clear = "comps[" + i + "].clearItems();" + CRLF;        String add = "comps[" + i + "].addItem(\"\");" + CRLF;        switch (jcb.getSelectedItem().toString()) {          case "All":            if (comps[i].toString().contains("JLabel")) {              jta.append("\t// JLabel " + end);              jta.append(enable);              jta.append(tip);            } else if (comps[i].toString().contains("JComboBox")) {              jta.append("\t// JComboBox " + end);              jta.append(enable);              jta.append(tip);              jta.append(clear);              jta.append(add);            } else if (comps[i].toString().contains("JButton")) {              jta.append("\t// JButton " + end);              jta.append(enable);              jta.append(tip);            }            break;          case "Labels":            if (comps[i].toString().contains("JLabel")) {              jta.append("\t// JLabel " + end);              jta.append(enable);              jta.append(tip);            }            break;          case "Combos":            if (comps[i].toString().contains("JComboBox")) {              jta.append("\t// JComboBox " + end);              jta.append(enable);              jta.append(tip);              jta.append(clear);              jta.append(add);            }            break;          case "Buttons":            if (comps[i].toString().contains("JButton")) {              jta.append("\t// JButton " + end);              jta.append(enable);              jta.append(tip);            }            break;        }      }    }    private void readJava() {      jta.setText("");      int len = Panel4LabelComboButton.getJpan().getComponents().length;      Component[] comps = Panel4LabelComboButton.getJpan().getComponents();      for (int i = 0; i < len; i++) {        String it = jcb.getSelectedItem().toString();        switch (it) {          case "All":            if (comps[i].toString().contains("JLabel")) {              JLabel jl = (JLabel) comps[i];              jta.append("JLabel comps[" + i + "].getText() = " + jl.getText()                + CRLF);              jta.append("JLabel comps[" + i + "].getToolTipText() = " + jl                .getToolTipText() + CRLF);            } else if (comps[i].toString().contains("JComboBox")) {              JComboBox jc = (JComboBox) comps[i];              for (int j = 0; j < jc.getItemCount(); j++) {                jta.append("JComboBox comps[" + i + "].getItemAt(" + j                  + ").toString() = " + jc.getItemAt(j).toString() + CRLF);              }            } else if (comps[i].toString().contains("JButton")) {              JButton jb = (JButton) comps[i];              jta.append("JButton comps[" + i + "].getText() = " + jb.getText()                + CRLF);              jta.append("JButton comps[" + i + "].getToolTipText() = " + jb                .getToolTipText() + CRLF + CRLF);            }            break;          case "Labels":            if (comps[i].toString().contains("JLabel")) {              JLabel jl = (JLabel) comps[i];              jta.append("JLabel comps[" + i + "].getText() = " + jl.getText()                + CRLF);              jta.append("JLabel comps[" + i + "].getToolTipText() = " + jl                .getToolTipText() + CRLF + CRLF);            }            break;          case "Combos":            if (comps[i].toString().contains("JComboBox")) {              JComboBox jc = (JComboBox) comps[i];              for (int j = 0; j < jc.getItemCount(); j++) {                jta.append("JComboBox comps[" + i + "].getItemAt(" + j                  + ").toString() = " + jc.getItemAt(j).toString() + CRLF);              }            }            break;          case "Buttons":            if (comps[i].toString().contains("JButton")) {              JButton jb = (JButton) comps[i];              jta.append("JButton comps[" + i + "].getText() = " + jb.getText()                + CRLF);              jta.append("JLabel comps[" + i + "].getToolTipText() = " + jb                .getToolTipText() + CRLF + CRLF);            }            break;        }      }    }  }}