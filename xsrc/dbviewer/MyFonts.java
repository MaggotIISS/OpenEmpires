/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer;import dbviewer.globals.GlobalMethods;import java.awt.Color;import java.awt.Font;import java.awt.FontMetrics;import java.awt.GraphicsEnvironment;import javax.swing.DefaultListModel;import javax.swing.JFrame;import javax.swing.JPanel;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener;import panels.Frame4;import panels.Panel4;/** <p> @author maggot.iiss */@SuppressWarnings("serial")public class MyFonts extends Panel4 {  private static int i = 0;  /**   Font name   */  public static String name = "Dialog";  /**   Font style   */  public static int style = Font.BOLD;  /**   Font size   */  public static int size = 8;  private static Font font = new Font(name, style, size);  private static DefaultListModel<String> dlm = new DefaultListModel<>();  private static FontMetrics metrics = null;  private static JFrame jf;  /**   <p>   @param args strings to start   */  public static void main(String[] args) {    JPanel jp = new MyFonts();    JFrame jf = new Frame4(jp);//    jf = new JFrame();//    jf.setBounds(0, 0, 500, 500);//    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//    jf.setContentPane(new MyFonts());//    jf.setVisible(true);////    jf.addWindowListener(new WindowAdapter() {////////      public void WindowClosing(WindowEvent we) {////        String reply = JOptionPane.showInputDialog("Enter Font info");////      }////    });  }  /**   Creates new form Fonts   */  public MyFonts() {    initComponents();    jTextField1.setFont(font);    resetFont(name, style, size);    ListSelectionListener lsl = new ListSelectionListenerImpl();    jList2.addListSelectionListener(lsl);    write();    GlobalMethods.autoColor(jTextField1, Color.black, Color.lightGray);    GlobalMethods.autoColor(jList2, Color.black, Color.lightGray);    GlobalMethods.autoColor(jTextArea1, Color.black, Color.lightGray);    GlobalMethods.autoColor(jList1, Color.black, Color.lightGray);  }  /**   <p>   @return name of class   */  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }  /**   This method is called from within the constructor to initialize the form.   WARNING: Do NOT modify this code. The content of this method is always   regenerated by the Form Editor.   */  // <editor-fold defaultstate="collapsed" desc="Generated Code">  //GEN-BEGIN:initComponents  @SuppressWarnings("unchecked")  private void initComponents() {    jScrollPane1 = new javax.swing.JScrollPane();    jList1 = new javax.swing.JList();    jScrollPane2 = new javax.swing.JScrollPane();    jList2 = new javax.swing.JList();    jTextField1 = new javax.swing.JTextField();    jScrollPane3 = new javax.swing.JScrollPane();    jTextArea1 = new javax.swing.JTextArea();    jScrollPane1.setName("jScrollPane1"); // NOI18N    jList1.setFont(jList1.getFont().deriveFont(jList1.getFont().getSize() - 1f));    jList1.setModel(new javax.swing.AbstractListModel() {      String[] strings = {"setFont", "setSize", "setStyle", "setPosition"};      @Override      public int getSize() {        return strings.length;      }      @Override      public Object getElementAt(int i) {        return strings[i];      }    });    jList1.setInheritsPopupMenu(true);    jList1.setName("jList1"); // NOI18N    jList1.addMouseListener(new java.awt.event.MouseAdapter() {      @Override      public void mouseClicked(java.awt.event.MouseEvent evt) {        jList1MouseClicked(evt);      }    });    jScrollPane1.setViewportView(jList1);    jScrollPane2.setName("jScrollPane2"); // NOI18N    jList2.setName("jList2"); // NOI18N    jList2.addMouseListener(new java.awt.event.MouseAdapter() {      @Override      public void mouseClicked(java.awt.event.MouseEvent evt) {        jList2MouseClicked(evt);      }    });    jScrollPane2.setViewportView(jList2);    jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);    jTextField1.setText("Traveller");    jTextField1.setName("jTextField1"); // NOI18N    jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {      @Override      public void keyPressed(java.awt.event.KeyEvent evt) {        jTextField1KeyPressed(evt);      }      @Override      public void keyReleased(java.awt.event.KeyEvent evt) {        jTextField1KeyReleased(evt);      }      @Override      public void keyTyped(java.awt.event.KeyEvent evt) {        jTextField1KeyTyped(evt);      }    });    jScrollPane3.setName("jScrollPane3"); // NOI18N    jTextArea1.setColumns(20);    jTextArea1.setRows(5);    jTextArea1.setName("jTextArea1"); // NOI18N    jScrollPane3.setViewportView(jTextArea1);    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);    this.setLayout(layout);    layout.setHorizontalGroup(      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)      .addGroup(layout.createSequentialGroup().addGroup(layout        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 134,          Short.MAX_VALUE).addComponent(jScrollPane2, 0, 134, Short.MAX_VALUE)        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 134,          Short.MAX_VALUE)).addPreferredGap(          javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(          jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 141,          Short.MAX_VALUE)));    layout.setVerticalGroup(      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)      .addGroup(layout.createSequentialGroup().addComponent(jTextField1,        javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 81,          javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(          javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(          jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 231,          Short.MAX_VALUE)).addComponent(jScrollPane3,        javax.swing.GroupLayout.Alignment.TRAILING,        javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE));  }  //GEN-END:initComponents  // </editor-fold>  @SuppressWarnings("unchecked")  private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked    dlm = new DefaultListModel<>();    switch (jList1.getSelectedValue().toString()) {      case "setFont": {        String[] fontnames = GraphicsEnvironment.getLocalGraphicsEnvironment()          .getAvailableFontFamilyNames();        for (i = 0; i < fontnames.length; i++) {          dlm.add(i, fontnames[i]);        }        break;      }      case "setSize": {        for (i = 50; i >= 2; i -= 2) {          int j = 0;          dlm.add(j, "" + i);          j += 1;        }        break;      }      case "setStyle": {        dlm.add(0, "Font.PLAIN");        dlm.add(1, "Font.BOLD");        dlm.add(2, "Font.ITALIC");        dlm.add(3, "Font.BOLD + Font.ITALIC");        break;      }      case "setPosition": {        dlm.add(0, "Center");        dlm.add(1, "Left");        dlm.add(2, "Right");        break;      }    }    jList2.setModel(dlm);    resetFont(name, style, size);  }//GEN-LAST:event_jList1MouseClicked  private void jList2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseClicked    resetFont(name, style, size);  }//GEN-LAST:event_jList2MouseClicked  private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed    write();  }//GEN-LAST:event_jTextField1KeyPressed  private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped    write();  }//GEN-LAST:event_jTextField1KeyTyped  private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased    write();  }//GEN-LAST:event_jTextField1KeyReleased  // Variables declaration - do not modify//GEN-BEGIN:variables  private static javax.swing.JList jList1;  private static javax.swing.JList jList2;  private javax.swing.JScrollPane jScrollPane1;  private javax.swing.JScrollPane jScrollPane2;  private javax.swing.JScrollPane jScrollPane3;  private static javax.swing.JTextArea jTextArea1;  private static javax.swing.JTextField jTextField1;  // End of variables declaration//GEN-END:variables  /**   <p>   @param name  name of font   @param style style of font   @param size  size of font   */  public static void resetFont(String name, int style, int size) {    font = new Font(name, style, size);    jTextField1.setFont(font);    jTextField1.setText(jTextField1.getText());    jTextField1.setFont(jTextField1.getFont());    metrics = jTextField1.getFontMetrics(font);    write();  }  private static void write() {    jTextArea1.setText("");    StringBuilder sb = new StringBuilder();    Font f = new Font(name, style, size);    sb.append("Font f = new Font(\"").append(name).append("\",").append(style)      .append(",").append(size).append(");" + "\n");    sb.append("//fontmetrics.getHeight = ").append(getStringHeight()).append(      "\n");    sb.append("//fontmetrics.stringWidth(\"").append(jTextField1.getText())      .append("\") = ").append(getStringWidth()).append("\n");    sb.append("//jTextField1.setHorizontalAlignment(").append(jTextField1      .getHorizontalAlignment()).append(")\n");    jTextArea1.setText(sb.toString());//            jTextField1.setHorizontalAlignment(jList2.getSelectedIndex() * 2);  }  /**   <p>   @return Font info   */  public static String getFontInfo() {    resetFont(name, style, size);    String s = "Font f = new Font(\"" + name + "\"," + style + "," + size + ");"      + "\n";    return s;  }  /**   <p>   @return font name   */  public static String getFontName() {    resetFont(name, style, size);    return name;  }  /**   <p>   @return style   */  public static int getFontStyle() {    resetFont(name, style, size);    return style;  }  /**   <p>   @return font size   */  public static int getFontSize() {    resetFont(name, style, size);    return size;  }  private static class ListSelectionListenerImpl implements    ListSelectionListener {    public ListSelectionListenerImpl() {    }    @Override    public void valueChanged(ListSelectionEvent lse) {      switch (jList1.getSelectedValue().toString()) {        case "setFont": {          if (!jList2.isSelectionEmpty()) {            name = jList2.getSelectedValue().toString();          }          break;        }        case "setStyle": {          int num = 0;          if (!jList2.isSelectionEmpty()) {            num = jList2.getSelectedIndex();            style = num;          }          break;        }        case "setSize": {          int num = size;          if (!jList2.isSelectionEmpty()) {            num = (jList2.getSelectedIndex() + 1) * 2;            size = num;          }          break;        }        case "setPosition": {          if (!jList2.isSelectionEmpty()) {            jTextField1.setHorizontalAlignment(jList2.getSelectedIndex() * 2);          }          break;        }      }      resetFont(name, style, size);    }  }  private static int getStringHeight() {    return metrics.getHeight();  }  private static int getStringWidth() {    return metrics.stringWidth(jTextField1.getText());  }}