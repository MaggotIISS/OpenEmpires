/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer;import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.util.ArrayList;import java.util.logging.Level;import java.util.logging.Logger;import javax.swing.DefaultListModel;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTable;import javax.swing.table.TableColumn;/** <p> @author maggot.iiss */public class MyJTable extends JPanel {//==================================================  /**   <p>   @param data table to search for duplicates   @param col  to strip of duplicates   @return list of unique objects   */  @SuppressWarnings("unchecked")  public Object[] stripDupesFromCol(String[][] data, int col) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    Boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());    }    //</editor-fold>    sectors = new ArrayList();    int len = lines[0].split(",").length;    colnames = new String[len];    System.arraycopy(all[0], 0, colnames, 0, len);    String[] bits = lines[1].split(",");    sectors.add(bits[col]);    Boolean found;    String searchfor;    String searchin;    for (int i = 2; i < linecount; i++) {      bits = lines[i].split(",");      searchfor = bits[col];      found = false;      for (int k = 0; k < sectors.size(); k++) {        searchin = sectors.get(k).toString();        if (searchfor.toLowerCase().equals(searchin.toLowerCase())) {          found = true;        }      }      if (!found) {        sectors.add(searchfor);      }    }//    for (int i = 0; i < sectors.size(); i++) {//      //System.out.print(i + " = " + sectors.get(i).toString().toUpperCase());//    }    //System.out.print("END" + " = " + sectors.size() + " different entries");    Object[] reply = sectors.toArray();    return reply;  }  /**   <p>   @return filename   */  public String getFileName() {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    Boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());    }    //</editor-fold>    return fileName;  }  /**   <p>   @return name of class   */  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }  /**   <p>   @param name to setFileName   */  public void setFileName(String name) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    Boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());    }    //</editor-fold>    String old = getFileName();    fileName = name;  }//==================================================  /**   <p>   @param filename path and filename of File   @return JScrollPane containing JTable (filled)   */  public static JScrollPane createTable(String filename) {    try {      fileName = filename;      Object[][] data = getDataFromFile(new File(fileName));      Object[] titles = data[0];      jt = new JTable(data, titles);      jt.setFillsViewportHeight(true);      jt.setAutoCreateColumnsFromModel(true);      //jt.setAutoCreateRowSorter(true);      jt.setColumnSelectionAllowed(true);      //jt.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);      for (int i = 0; i < data.length; i++) {        TableColumn col = new TableColumn();        col.sizeWidthToFit();      }      //addID();      jt.doLayout();      JScrollPane jsp = new JScrollPane(jt);      //<editor-fold defaultstate="collapsed" desc="DEBUG">      Boolean DEBUG = false;      if (DEBUG) { // true or false        //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      }      //</editor-fold>      return jsp;    } catch (Exception e) {    }    return null;  }//  private static void addID() {//    TableColumn idColumn = new TableColumn();//    idColumn.setHeaderValue("ID");//    jt.addColumn(idColumn);//    //System.out.print("jt.getColumn(\"ID\")" + " = " + jt.getColumn("ID"));//    int cols = jt.getColumnCount();//    int col = cols-1;//    for (int i = 0; i < jt.getRowCount(); i++) {//      //System.out.print("" + " = " + i);//      //jt.setValueAt(""+i, i, col);//    }//    //<editor-fold defaultstate="collapsed" desc="DEBUG">//    Boolean DEBUG = false;//    if (DEBUG) { // true or false//      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());//      ////System.out.print("" + " = " +);////      //System.out.print("idColumn.getHeaderValue().toString()" + " = " + idColumn.getHeaderValue().toString());//      //System.out.print("idColumn.getClass()" + " = " + idColumn.getClass());//      //System.out.print("jt" + " = " + jt);//      //System.out.print("jt.getColumnCount()" + " = " + jt.getColumnCount());//      for (int i = 0; i < cols; i++) {//        //System.out.print("Column" + " = " + i);//        //System.out.print("jt.getColumnClass(" + i + ")" + " = " + jt.getColumnClass(i));//      }//    }//    //</editor-fold>//  }  /**   <p>   @param c column to getColumnClass   @return class of column   */  public Class<?> getColumnClass(int c) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    Boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());    }    //</editor-fold>    //System.out.print("Here!!!!!!!!!!!!!!!!!!!!!!!!" + " = ");    return all[0][c].getClass();  }  /**   <p>   @param file file to extract from   @return string array of data   */  @SuppressWarnings("unchecked")  public static String[][] getDataFromFile(File file) {    try {      linecount = 0;      al = new ArrayList();      try {        fr = new FileReader(file);      } catch (FileNotFoundException ex) {        Logger.getLogger(JTable.class.getName()).log(Level.SEVERE, null, ex);      }      BufferedReader br = new BufferedReader(fr);      String line;      try {        while ((line = br.readLine()) != null) {          al.add(line);          linecount += 1;        }        br.close();      } catch (IOException ex) {        Logger.getLogger(JTable.class.getName()).log(Level.SEVERE, null, ex);      }      lines = null;      lines = new String[linecount];      lines[0] = al.get(0).toString();      max = lines[0].split("\",\"").length;      all = null;      all = new String[linecount][max];      for (int i = 0; i < linecount; i++) {        lines[i] = al.get(i).toString();        parts = (String[]) lines[i].split("\",\"");//      System.arraycopy(parts, 0, all, 0, max);        for (int j = 0; j < parts.length; j++) {          all[i][j] = parts[j].replace("\"", "");        }      }      //<editor-fold defaultstate="collapsed" desc="DEBUG">      Boolean DEBUG = false;      if (DEBUG) { // true OR false        //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      }      //</editor-fold>      return all;    } catch (Exception e) {    }    return null;  }  //==================================================  private static String fileName = null;  private static DefaultListModel dlm = new DefaultListModel();  private static int max = 0;  private static int linecount = 0;  private static ArrayList al = new ArrayList();  private static String[] lines;  private static String[] parts;  /**   String array   */  public static String[][] all;  private static FileReader fr = null;  private static ArrayList sectors = null;  private static String[] args = {fileName};  private static String[] colnames = null;  private static JTable jt = null;}