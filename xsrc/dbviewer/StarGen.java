/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer;import dbviewer.globals.GlobalMethods;import java.util.Arrays;import javax.swing.JComboBox;import javax.swing.JOptionPane;import static javax.swing.JOptionPane.showMessageDialog;import panels.Panel4StarGen;import static panels.Panel4StarGen.jButton1;import panels.Panel4StarPic;import panels.Panel4SubSector;/** <p> @author Your Name Mark Ferguson maggot.iiss@sky.com */public class StarGen {  //<editor-fold defaultstate="collapsed" desc="variables">  private static String CRLF = dbviewer.globals.GlobalVariables.CRLF;  //<editor-fold defaultstate="collapsed" desc="Magnitude">  /**   Magnitude   */  public static final String[] Magnitude = new String[]{    "8",    "Class", "Ia", "Ib", "II", "III", "IV", "V", "VI",    "B0", "-9.60", "-8.80", "-8.30", "-7.80", "-7.50", "-7.10", "0",    "B5", "-8.50", "-6.90", "-5.90", "-3.50", "-3.10", "-2.71", "0",    "A0", "-7.80", "-5.70", "-3.60", "-1.36", "-0.70", "-0.10", "0",    "A5", "-7.50", "-5.40", "-2.55", "-0.10", "0.85", "1.80", "0",    "F0", "-7.20", "-4.90", "-2.18", "0.45", "1.58", "2.50", "0",    "F5", "-7.00", "-4.50", "-2.00", "0.70", "2.10", "3.40", "4.80",    "G0", "-7.30", "-4.70", "-2.10", "0.52", "2.74", "4.57", "5.97",    "G5", "-7.60", "-5.00", "-2.40", "0.08", "3.04", "5.20", "6.60",    "K0", "-7.70", "-5.40", "-2.60", "-0.17", "3.10", "5.70", "7.10",    "K5", "-7.80", "-6.00", "-3.70", "-1.50", "0", "7.40", "8.80",    "M0", "-7.90", "-6.90", "-4.40", "-1.90", "0", "8.25", "9.65",    "M5", "-8.00", "-7.60", "-5.65", "-3.60", "0", "10.20", "11.60",    "M9", "-8.10", "-7.90", "-5.75", "-3.80", "0", "13.90", "15.30"  };  //</editor-fold>  //<editor-fold defaultstate="collapsed" desc="Luminosity">  /**   Luminosity   */  public static final String[] Luminosity = new String[]{    "8",    "Class", "Ia", "Ib", "II", "III", "IV", "V", "VI",    "B0", "560000", "270000", "170000", "107000", "81000", "56000", "0",    "B5", "204000", "46700", "18600", "6700", "2000", "1400", "0",    "A0", "107000", "15000", "2200", "280", "156", "90", "0",    "A5", "81000", "11700", "850", "90", "37", "16", "0",    "F0", "61000", "7400", "600", "53", "19", "8.1", "0",    "F5", "51000", "5100", "510", "43", "12", "3.5", "0.977",    "G0", "67000", "6100", "560", "50", "6.5", "1.21", "0.322",    "G5", "89000", "8100", "740", "75", "4.9", "0.67", "0.186",    "K0", "97000", "11700", "890", "95", "4.67", "0.42", "0.117",    "K5", "107000", "20400", "2450", "320", "0", "0.08", "0.025",    "M0", "117000", "46000", "4600", "470", "0", "0.04", "0.011",    "M5", "129000", "89000", "14900", "2280", "0", "0.007", "0.002",    "M9", "141000", "117000", "16200", "2690", "0", "0.001", "0.00006"  };  //</editor-fold>  //<editor-fold defaultstate="collapsed" desc="Temp">  /**   Temp   */  public static final String[] Temp = new String[]{    "8",    "Class", "Ia", "Ib", "II", "III", "IV", "V", "VI",    "B0", "22000", "24000", "25000", "26000", "27000", "28000", "0",    "B5", "14200", "14500", "15100", "15200", "15400", "15500", "0",    "A0", "9000", "9100", "9300", "9500", "9700", "9900", "0",    "A5", "8000", "8100", "8200", "8300", "8400", "8500", "0",    "F0", "6900", "7000", "7100", "7200", "7300", "7400", "0",    "F5", "6100", "6300", "6400", "6500", "6600", "6700", "6800",    "G0", "5400", "5600", "5700", "5800", "5900", "6000", "6100",    "G5", "4700", "4850", "5000", "5100", "5200", "5500", "5600",    "K0", "4000", "4100", "4300", "4500", "4700", "4900", "5000",    "K5", "3300", "3500", "3650", "3800", "0", "4100", "4200",    "M0", "2800", "2900", "3100", "3400", "0", "3500", "3600",    "M5", "2000", "2200", "2400", "2650", "0", "2800", "2900",    "M9", "1900", "2000", "2100", "2200", "0", "2300", "2400"  };  //</editor-fold>  //<editor-fold defaultstate="collapsed" desc="Radii">  /**   Radii   */  public static final String[] Radii = new String[]{    "8",    "Class", "Ia", "Ib", "II", "III", "IV", "V", "VI",    "B0", "52", "30", "22", "16", "13", "10", "0",    "B5", "75", "35", "20", "10", "5.3", "4.4", "0",    "A0", "135", "50", "18", "6.2", "4.5", "3.2", "0",    "A5", "149", "55", "14", "4.6", "2.7", "1.8", "0",    "F0", "174", "59", "16", "4.7", "2.7", "1.7", "0",    "F5", "204", "60", "18", "5.2", "2.6", "1.4", "1.14",    "G0", "298", "84", "25", "7.1", "2.5", "1.03", "1.02",    "G5", "454", "128", "37", "11", "2.8", "0.91", "0.55",    "K0", "654", "216", "54", "16", "3.3", "0.908", "0.40",    "K5", "1010", "392", "124", "42", "0", "0.566", "0.308",    "M0", "1467", "857", "237", "63", "0", "0.549", "0.256",    "M5", "3020", "2073", "712", "228", "0", "0.358", "0.104",    "M9", "3499", "2876", "931", "360", "0", "0.201", "0.053"  };  //</editor-fold>  //<editor-fold defaultstate="collapsed" desc="Masses">  /**   Masses   */  public static final String[] Masses = new String[]{    "8",    "Class", "Ia", "Ib", "II", "III", "IV", "V", "VI",    "B0", "60", "50", "30", "25", "20", "18", "0",    "B5", "30", "25", "20", "15", "10", "6.5", "0",    "A0", "18", "16", "14", "12", "6", "3.2", "0",    "A5", "15", "13", "11", "9", "4", "2.1", "0",    "F0", "13", "12", "10", "8", "2.5", "1.7", "0",    "F5", "12", "10", "8.1", "5", "2", "1.3", "0.8",    "G0", "12", "10", "8.1", "2.5", "1.75", "1.04", "0.6",    "G5", "13", "12", "10", "3.2", "2", "0.94", "0.528",    "K0", "14", "13", "11", "4", "2.3", "0.825", "0.430",    "K5", "18", "16", "14", "5", "0", "0.570", "0.330",    "M0", "20", "16", "14", "6.3", "0", "0.489", "0.154",    "M5", "25", "20", "16", "7.4", "0", "0.331", "0.104",    "M9", "30", "25", "18", "9.2", "0", "0.215", "0.058"  };  //</editor-fold>  //<editor-fold defaultstate="collapsed" desc="WhiteDwarfs">  /**   WhiteDwarfs   */  public static final String[] WhiteDwarfs = new String[]{    "6",    "DB", "8.1", "0.046", "25000", "0.018", "0.26",    "DA", "10.5", "0.005", "14000", "0.017", "0.36",    "DF", "13.6", "0.0003", "6600", "0.013", "0.42",    "DG", "15.3", "0.00006", "4500", "0.012", "0.63",    "DK", "15.6", "0.00004", "3500", "0.009", "0.83",    "DM", "15.9", "0.00003", "2700", "0.006", "1.11"  };  //</editor-fold>  //<editor-fold defaultstate="collapsed" desc="HabitableDistance">  /**   HabitableDistance   */  public static final String[] HabitableDistance = new String[]{    "14",    "Size", "B0", "B5", "A0", "A5", "F0", "F5", "G0", "G5", "K0", "K5", "M0",    "M5", "M9",    "Ia", "748", "451", "327", "284", "246", "225", "258", "298", "311", "327",    "342", "359", "375",    "Ib", "519", "216", "122", "108", "86", "71", "78", "90", "108", "142",    "214", "298", "342",    "II", "412", "136", "47", "29", "24", "22", "23", "27", "30", "49", "67",    "122", "127",    "III", "327", "81", "16", "9.4", "7.3", "6.6", "7.1", "8.7", "9.7", "17",    "21", "48", "52",    "IV", "284", "44", "12", "6.1", "4.4", "3.5", "2.5", "2.2", "2.1", "0", "0",    "0", "0",    "V", "236", "37", "9.5", "4.0", "2.8", "1.9", "1.1", "0.8", "0.6", "0.3",    "0.2", "0.1", "0.03",    "VI", "0", "0", "0", "0", "0", "1", "0.6", "0.4", "0.3", "0.14", "0.09",    "0.04", "0",    "VII", "0.1", "0.1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"  };  //</editor-fold>  //<editor-fold defaultstate="collapsed" desc="Distance">  /**   Distance   */  public static final String[] Distance = new String[]{    "4",    "ORBIT", "AU", "MKM", "SOLAR RADII",    "0", "0.2", "29.9", "40",    "1", "0.4", "59.8", "80",    "2", "0.7", "104.7", "140",    "3", "1", "149.6", "200",    "4", "1.6", "239.3", "320",    "5", "2.8", "418.9", "560",    "6", "5.2", "777.9", "1040",    "7", "10", "1495.9", "2000",    "8", "19.6", "2932", "3920",    "9", "38.8", "5804", "7760",    "10", "77.2", "11548", "15440",    "11", "154", "23038", "30800",    "12", "307.6", "46016", "61520",    "13", "614.8", "91972", "123498",    "14", "1229.2", "183885", "245836",    "15", "2458", "367711", "491594",    "16", "4915.6", "735363", "983106",    "17", "9830.8", "1470666", "1966132",    "18", "19661.2", "2940274", "3932184",    "19", "39322", "5882488", "7864290"  };  //</editor-fold>  /**   orbitdata   */  public static String[] orbitdata = new String[20];  /**   lines   */  public static String[] lines;  /**   txt   */  public static String[] txt;  /**   begin   */  public static int begin = 0;  /**   type   */  public static String type = null;  /**   size   */  public static String size = null;  /**   stars   */  public static int stars = 0;  /**   string   */  public static String string;  /**   orbits   */  public static Object[] orbits;  /**   Orbit   */  public static String[] Orbit;  /**   viewing   */  public static boolean viewing = false;  /**   UWP   */  public static String[] UWP = new String[]{};  private static int end;  private static int cols;  /**   start   */  public static int start;  private static boolean[] OrbitFilled;  private static int emptyorbits;      //total emptyorbits  private static int capturedplanets;  //total captured  private static int num1;  private static int[] nums;  private static int outernull;//nas.length - 1;  private static int innerbelt = 0;  private static int dec;  private static int ggs;  private static int blen;  private static int glen;  private static int[] b;  private static int[] g;//Orbit numbers  private static int pbs;  /**   useless   */  public static int useless = 0;  //</editor-fold>  //<editor-fold defaultstate="collapsed" desc="Planets">  /**   Planets   */  public static String[] Planets = new String[]{    "3",    "ORBIT", "ORBIT MKM", "ORBIT AU",    "0", "29.9", "0.2",    "1", "59.8", "0.4",    "2", "104.7", "0.7",    "3", "149.6", "1.0",    "4", "339.3", "1.6",    "5", "418.9", "2.8",    "6", "777.9", "5.2",    "7", "1495.9", "10.0",    "8", "2932", "19.6",    "9", "5804", "38.8",    "10", "11548", "77.2",    "11", "23038", "154.0",    "12", "46016", "307.4",    "13", "91972", "614.8",    "14", "183885", "1229.2",    "15", "367711", "2458.0"  };  //</editor-fold>  //<editor-fold defaultstate="collapsed" desc="Moons">  /**   Moons   */  public static String[] Moons = new String[]{    "5",    "NUM", "RING", "CLOSE", "FAR", "EXTREME",    "0", "-", "-", "-", "-",    "1", "1", "-", "-", "-",    "2", "1", "3", "15", "75",    "3", "1", "4", "20", "100",    "4", "2", "5", "25", "125",    "5", "2", "6", "30", "150",    "6", "3", "7", "35", "175",    "7", "-", "8", "40", "200",    "8", "-", "9", "45", "225",    "9", "-", "10", "50", "250",    "10", "-", "11", "55", "275",    "11", "-", "12", "60", "300",    "12", "-", "13", "65", "325"  };  //</editor-fold>  //<editor-fold defaultstate="collapsed" desc="Zones">  /**   Zones   */  public static String[] Zones = new String[]{    "1",    "	Ia - Bright Super Giant\n"    + "Orbit	B0	B5	A0	A5	F0	F5	G0	G5	K0	K5	M0	M5	M9	\n"    + "1	_	_	_	_	_	_	_	_	_	_	. .	.	\n"    + "2	_	_	_	_	_	_	_	_	_	_	.	.	.	\n"    + "3	_	_	_	_	_	_	_	_	_	_	.	.	.	\n"    + "4	_	_	_	_	_	_	_	_	_	_	.	.	.	\n"    + "5	_	_	_	_	_	_	_	_	_	_	.	.	.	\n"    + "6	_	_	_	_	I	I	_	_	_	_	.	.	.	\n"    + "7	_	I	I	I	I	I	I	I	I	I	I	.	.	\n"    + "8	I	I	I	I	I	I	I	I	I	I	I	I	I	\n"    + "9	I	I	I	I	I	I	I	I	I	I	I	I	I	\n"    + "10	I	I	I	I	I	I	I	I	I	I	I	I	I	\n"    + "11	I	I	I	I	I	H	I	I	I	I	I	I	I	\n"    + "12	I	H	H	H	H	O	H	H	H	H	H	H	H	\n"    + "13	H	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "14	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "15	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "16	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "17	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "18	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "19	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "\n"    + "\n"    + "	Ib - Weaker Super Giant\n"    + "Orbit	B0	B5	A0	A5	F0	F5	G0	G5	K0	K5	M0	M5	M9	\n"    + "1	_	_	_	_	_	_	_	_	_	_	_	_	_	\n"    + "2	_	_	_	_	_	_	_	_	_	_	_	_	_	\n"    + "3	_	_	_	_	_	I	I	_	_	_	_	_	_	\n"    + "4	_	_	_	I	I	I	I	I	_	_	_	_	_	\n"    + "5	_	_	I	I	I	I	I	I	I	_	_	_	_	\n"    + "6	_	I	I	I	I	I	I	I	I	I	I	_	_	\n"    + "7	_	I	I	I	I	I	I	I	I	I	I	I	_	\n"    + "8	I	I	I	I	I	I	I	I	I	I	I	I	I	\n"    + "9	I	I	I	I	I	I	I	I	I	I	I	I	I	\n"    + "10	I	I	I	H	H	H	H	H	H	I	I	I	I	\n"    + "11	I	H	H	O	O	O	O	O	O	H	H	I	I	\n"    + "12	I	O	O	O	O	O	O	O	O	O	H	H	H	\n"    + "13	H	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "14	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "15	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "16	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "17	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "18	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "19	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "\n"    + "\n"    + "	II - Bright Giant\n"    + "Orbit	B0	B5	A0	A5	F0	F5	G0	G5	K0	K5	M0	M5	M9	\n"    + "1	_	_	_	_	_	_	_	_	_	_	_	_	_	\n"    + "2	_	_	_	I	I	I	I	I	I	_	_	_	_	\n"    + "3	_	_	I	I	I	I	I	I	I	I	_	_	_	\n"    + "4	_	_	I	I	I	I	I	I	I	I	I	_	_	\n"    + "5	_	I	I	I	I	I	I	I	I	I	I	_	_	\n"    + "6	_	I	I	I	I	I	I	I	I	I	I	I	I	\n"    + "7	I	I	I	I	I	I	I	I	I	I	I	I	I	\n"    + "8	I	I	I	H	H	H	H	H	I	I	I	I	I	\n"    + "9	I	I	H	O	O	O	O	O	H	H	I	I	I	\n"    + "10	I	I	O	O	O	O	O	O	O	O	H	I	I	\n"    + "11	I	H	O	O	O	O	O	O	O	O	O	H	H	\n"    + "12	H	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "13	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "14	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "15	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "16	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "17	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "18	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "19	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "\n"    + "\n"    + "	III - Giant\n"    + "Orbit	B0	B5	A0	A5	F0	F5	G0	G5	K0	K5	M0	M5	M9	\n"    + "1	_	_	I	I	I	I	I	I	I	I	_	_	_	\n"    + "2	_	_	I	I	I	I	I	I	I	I	I	_	_	\n"    + "3	_	_	I	I	I	I	I	I	I	I	I	_	_	\n"    + "4	_	_	I	I	I	I	I	I	I	I	I	I	I	\n"    + "5	_	I	I	I	I	I	I	I	I	I	I	I	I	\n"    + "6	_	I	I	I	H	H	H	I	I	I	I	I	I	\n"    + "7	I	I	I	H	O	O	O	H	H	I	I	I	I	\n"    + "8	I	I	H	O	O	O	O	O	O	H	H	I	I	\n"    + "9	I	I	O	O	O	O	O	O	O	O	O	H	H	\n"    + "10	I	H	O	O	O	O	O	O	O	O	O	O	O	\n"    + "11	I	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "12	H	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "13	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "14	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "15	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "16	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "17	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "18	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "19	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "\n"    + "\n"    + "	IV - Sub Giant\n"    + "Orbit	B0	B5	A0	A5	F0	F5	G0	G5	K0	\n"    + "0	_	_	_	I	I	I	I	I	I	\n"    + "1	_	_	I	I	I	I	I	I	I	\n"    + "2	_	_	I	I	I	I	I	I	I	\n"    + "3	_	I	I	I	I	I	I	I	I	\n"    + "4	_	I	I	I	I	I	I	I	H	\n"    + "5	_	I	I	I	I	H	H	H	O	\n"    + "6	_	I	I	H	H	O	O	O	O	\n"    + "7	I	I	H	O	O	O	O	O	O	\n"    + "8	I	I	O	O	O	O	O	O	O	\n"    + "9	I	H	O	O	O	O	O	O	O	\n"    + "10	I	O	O	O	O	O	O	O	O	\n"    + "11	I	O	O	O	O	O	O	O	O	\n"    + "12	H	O	O	O	O	O	O	O	O	\n"    + "13	O	O	O	O	O	O	O	O	O	\n"    + "14	O	O	O	O	O	O	O	O	O	\n"    + "15	O	O	O	O	O	O	O	O	O	\n"    + "16	O	O	O	O	O	O	O	O	O	\n"    + "17	O	O	O	O	O	O	O	O	O	\n"    + "18	O	O	O	O	O	O	O	O	O	\n"    + "19	O	O	O	O	O	O	O	O	O	\n"    + "\n"    + "\n"    + "	V - Main Sequence\n"    + "Orbit	B0	B5	A0	A5	F0	F5	G0	G5	K0	K5	M0	M5	M9	\n"    + "0	_	_	I	I	I	I	I	I	I	H	H	O	O	\n"    + "1	_	_	I	I	I	I	I	I	I	O	O	O	O	\n"    + "2	_	_	I	I	I	I	I	H	H	O	O	O	O	\n"    + "3	_	I	I	I	I	I	H	O	O	O	O	O	O	\n"    + "4	_	I	I	I	I	H	O	O	O	O	O	O	O	\n"    + "5	_	I	I	I	H	O	O	O	O	O	O	O	O	\n"    + "6	I	I	I	H	O	O	O	O	O	O	O	O	O	\n"    + "7	I	I	H	O	O	O	O	O	O	O	O	O	O	\n"    + "8	I	I	O	O	O	O	O	O	O	O	O	O	O	\n"    + "9	I	H	O	O	O	O	O	O	O	O	O	O	O	\n"    + "10	I	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "11	I	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "12	H	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "13	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "14	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "15	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "16	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "17	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "18	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "19	O	O	O	O	O	O	O	O	O	O	O	O	O	\n"    + "\n"    + "\n"    + "	VI - Sub Dwarf\n"    + "Orbit	F5	G0	G5	K0	K5	M0	M5	M9	\n"    + "0	I	I	I	I	O	O	O	O	\n"    + "1	I	I	H	H	O	O	O	O	\n"    + "2	I	H	O	O	O	O	O	O	\n"    + "3	H	O	O	O	O	O	O	O	\n"    + "4	O	O	O	O	O	O	O	O	\n"    + "5	O	O	O	O	O	O	O	O	\n"    + "6	O	O	O	O	O	O	O	O	\n"    + "7	O	O	O	O	O	O	O	O	\n"    + "8	O	O	O	O	O	O	O	O	\n"    + "9	O	O	O	O	O	O	O	O	\n"    + "10	O	O	O	O	O	O	O	O	\n"    + "11	O	O	O	O	O	O	O	O	\n"    + "\n"    + "\n"    + "	D - White Dwarf\n"    + "Orbit	BD	AD	FD	GD	KD	MD	\n"    + "0	H	O	O	O	O	O	\n"    + "1	O	O	O	O	O	O	\n"    + "2	O	O	O	O	O	O	\n"    + "3	O	O	O	O	O	O	\n"    + "4	O	O	O	O	O	O	\n"    + "5	O	O	O	O	O	O	\n"    + "6	O	O	O	O	O	O	\n"    + "7	O	O	O	O	O	O	\n"    + "8	O	O	O	O	O	O	\n"    + "9	O	O	O	O	O	O	\n"    + ""  };//</editor-fold>  /**   <p>   @param args strings to start   */  public static void main(String[] args) {    Panel4StarGen.main(args);  }  /**   printStellarData   */  @SuppressWarnings("unchecked")  public static void printStellarData() {//<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print(globals.GlobalMethods.comment("=", 20));      //System.out.println("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      //System.out.print(globals.GlobalMethods.comment("-", 20));    }//</editor-fold>//    try {    int num = 0;    String itsorbit = null;    String orbitsround = "0";    String space = null;    //<editor-fold defaultstate="collapsed" desc="systemfeaturenature">    //    if (null != nature) {    switch (Panel4StarGen.nature) {      case "Solo": {        num = 1;        break;      }      case "Binary": {        num = 2;        break;      }      case "Trinary": {        num = 3;        break;      }      default: {        num = 0;        break;      }    }    //</editor-fold>    //<editor-fold defaultstate="collapsed" desc="decimals">    JComboBox jcb;    if (Panel4StarGen.hasparent == true) {      jcb = new JComboBox();      int j;      for (j = 0; j < num; j++) {        switch (j) {          case 0: {            jcb = Panel4SubSector.jcb4Star1;            break;          }          case 1: {            jcb = Panel4SubSector.jcb4Star2;            break;          }          case 2: {            jcb = Panel4SubSector.jcb4Star3;            break;          }        }        if (!"".equals(jcb.getSelectedItem().toString())) {          Panel4StarGen.dec[j] = Integer.parseInt(jcb.getSelectedItem()            .toString().substring(1, 2));        }      }    } else {      jcb = new JComboBox<>();      jcb.addItem("M7 Ia");      Panel4StarGen.dec[0] = Integer.parseInt(jcb.getSelectedItem().toString()        .substring(1, 2));    }    //    primaryorbits = svars[10];    Panel4StarGen.Orbits[0] = Panel4StarGen.primaryorbits;    Panel4StarGen.systemfeaturemaxorbits = Panel4StarGen.primaryorbits;    Panel4StarGen.Orbits[1] = Panel4StarGen.secondaryorbits;    Panel4StarGen.Orbits[2] = Panel4StarGen.tertiaryorbits;    //</editor-fold>    Panel4StarGen.jta.append(GlobalMethods.comment("=", 20));    Panel4StarGen.jta.append("" + Panel4StarGen.nature + " Stellar System"      + Panel4StarGen.CRLF);    ////System.out.println("Primary system gasgiantquantity" + " = " + Panel4StarGen.gasgiantquantity);    ////System.out.println("Primary system planetoidquantity" + " = " + Panel4StarGen.planetoidquantity);    Panel4StarGen.useUWP.setSelected(false);    String zone = "MT";    try {      for (int i = 0; i < num; i++) {        //<editor-fold defaultstate="collapsed" desc="star">        switch (i) {          case 0: {            space = "    ";            type = Panel4StarGen.primarytype;            size = Panel4StarGen.primarysize;            itsorbit = Panel4StarGen.primaryorbit;            orbitsround = Panel4StarGen.primaryorbits;            break;          }          case 1: {            space = "        ";            type = Panel4StarGen.secondarytype;            size = Panel4StarGen.secondarysize;            itsorbit = Panel4StarGen.secondaryorbit;            orbitsround = Panel4StarGen.secondaryorbits;            break;          }          case 2: {            space = "            ";            type = Panel4StarGen.tertiarytype;            size = Panel4StarGen.tertiarysize;            itsorbit = Panel4StarGen.tertiaryorbit;            orbitsround = Panel4StarGen.tertiaryorbits;            break;          }        }        String trim = size.trim();        size = trim;        //</editor-fold>        //<editor-fold defaultstate="collapsed" desc="startable">        trim = type.trim();        type = trim;        Panel4StarGen.jta.append("" + space + Panel4StarGen.star[i]          + Panel4StarGen.CRLF);        ////System.out.println("size" + " = " + size);        try {          switch (size) {            case "Ia": {              Panel4StarGen.startable = Panel4StarGen.startables[0];              break;            }            case "Ib": {              Panel4StarGen.startable = Panel4StarGen.startables[1];              break;            }            case "II": {              Panel4StarGen.startable = Panel4StarGen.startables[2];              break;            }            case "III": {              Panel4StarGen.startable = Panel4StarGen.startables[3];              break;            }            case "IV": {              Panel4StarGen.startable = Panel4StarGen.startables[4];              break;            }            case " V":            case "V": {              Panel4StarGen.startable = Panel4StarGen.startables[5];              break;            }            case "VI": {              Panel4StarGen.startable = Panel4StarGen.startables[6];              break;            }            case "VII":            case "D": //          case "B":            {              Panel4StarGen.startable = Panel4StarGen.startables[7];              break;            }            default: {              JOptionPane.showMessageDialog(Panel4StarGen.save, "OI");              ////System.out.println("OI" + Panel4StarGen.CRLF);              ////System.out.println("default size" + " = " + size);              ////System.out.println("type" + " = " + type);              ////System.out.println("startable" + " = " + Panel4StarGen.startable);              break;            }          }        } catch (NullPointerException e) {          ////System.out.println("e" + "371 = " + e);          ////System.out.println("e.getMessage()" + " = " + e.getMessage());          ////System.out.println("size" + " = " + size);        }        Panel4StarGen.jta.append("" + space + type + Panel4StarGen.dec[i]);        Panel4StarGen.jta.append("" + Panel4StarGen.startable          + Panel4StarGen.CRLF);        //</editor-fold>        //<editor-fold defaultstate="collapsed" desc="orbits">        if (i != 0) {          Panel4StarGen.jta.append("" + space + "orbit @ " + itsorbit            + Panel4StarGen.CRLF);        }        if (Integer.parseInt(orbitsround) > 0) {          Panel4StarGen.jta.append("" + "\t "            + Panel4StarGen.planetaryorbitnumtitle);          Panel4StarGen.jta.append("" + "\t "            + Panel4StarGen.planetaryorbitnumautitle);          Panel4StarGen.jta.append("" + "\t " + "Zone");          Panel4StarGen.jta.append("" + Panel4StarGen.CRLF);        } else {          Panel4StarGen.jta.append("" + "\t " + "NO PLANETARY BODIES"            + Panel4StarGen.CRLF);        }        type.trim();        size.trim();        //</editor-fold>        //<editor-fold defaultstate="collapsed" desc="size">        if (!"VI".equals(size) & !"D".equals(size) & !"VII".equals(size)) {          //JOptionPane.showMessageDialog(jButton4, size);          //<editor-fold defaultstate="collapsed" desc="type">          switch (type) {            case "B": {              Panel4StarGen.col = 1;              break;            }            case "A": {              Panel4StarGen.col = 3;              break;            }            case "F": {              Panel4StarGen.col = 5;              break;            }            case "G": {              Panel4StarGen.col = 7;              break;            }            case "K": {              Panel4StarGen.col = 9;              break;            }            case "M": {              Panel4StarGen.col = 11;              break;            }            default: {              ////System.out.println("printStellarData()");              ////System.out.println("type" + " = " + type);              ////System.out.println("size" + " = " + size);            }          }          //</editor-fold>        } else if ("VI".equals(size)) {          //JOptionPane.showMessageDialog(jButton4, size);          //<editor-fold defaultstate="collapsed" desc="type">          switch (type) {            //          case "B": {            //            col = 1;            //            break;            //          }            //          case "A": {            //            col = 2;            //            break;            //          }            case "F": {              Panel4StarGen.col = 1;              break;            }            case "G": {              Panel4StarGen.col = 2;              break;            }            case "K": {              Panel4StarGen.col = 4;              break;            }            case "M": {              Panel4StarGen.col = 6;              break;            }            default: {              ////System.out.println("printStellarData()");              ////System.out.println("Panel4StarGen.col" + " = " + Panel4StarGen.col);              Panel4StarGen.col = 6;              break;            }          }          //</editor-fold>        } else if ("VII".equals(size) | "D".equals(size)) {          //JOptionPane.showMessageDialog(jButton4, size);          //<editor-fold defaultstate="collapsed" desc="type">          switch (type) {            case "B": {              Panel4StarGen.col = 1;              break;            }            case "A": {              Panel4StarGen.col = 2;              break;            }            case "F": {              Panel4StarGen.col = 3;              break;            }            case "G": {              Panel4StarGen.col = 4;              break;            }            case "K": {              Panel4StarGen.col = 5;              break;            }            case "M": {              Panel4StarGen.col = 6;              break;            }            default: {              ////System.out.println("printStellarData()");              Panel4StarGen.col = 6;              break;            }          }          //</editor-fold>        }        if (Panel4StarGen.dec[i] >= 5) {          Panel4StarGen.col += 1;        }        //</editor-fold>        //<editor-fold defaultstate="collapsed" desc="Print World Orbits">        int cols = 0;        String[] tables = null;        switch (size) {          case "Ia": {            begin = 1;            cols = Panel4StarGen.supergiantscols;            tables = Panel4StarGen.supergiants;            break;          }          case "Ib": {            begin = 1;            cols = Panel4StarGen.weakersupergiantscols;            tables = Panel4StarGen.weakersupergiants;            break;          }          case "II": {            begin = 1;            cols = Panel4StarGen.brightgiantscols;            tables = Panel4StarGen.brightgiants;            break;          }          case "III": {            begin = 1;            cols = Panel4StarGen.giantscols;            tables = Panel4StarGen.giants;            break;          }          case "IV": {            begin = 0;            cols = Panel4StarGen.subgiantscols;            tables = Panel4StarGen.subgiants;            break;          }          case "V": {            begin = 0;            cols = Panel4StarGen.mainsequencecols;            tables = Panel4StarGen.mainsequence;            break;          }          case "VI": {            begin = 0;            cols = Panel4StarGen.subdwarfscols;            tables = Panel4StarGen.subdwarfs;            break;          }          case "VII":          case "D": {            begin = 0;            cols = Panel4StarGen.whitedwarfscols;            tables = Panel4StarGen.whitedwarfs;            break;          }        }        //</editor-fold>        findZones();        placeComponents(i, begin);//      Panel4StarGen.jta.append(getPlanetaryOrbits(begin, Integer.parseInt(orbitsround) - 1, cols, tables));      }    } catch (Exception e) {      String msg = e.toString();      showMessageDialog(null, msg);      ////System.out.println("e" + " = " + msg);    }    lines = Panel4StarGen.jta.getText().split(Panel4StarGen.CRLF);    try {      for (int i = 0; i < lines.length; i++) {        if (lines[i].contains("Secondary") | lines[i].contains("Tertiary")) {          break;        }        zone = findZone(i);        if (zone != null) {          ////System.out.println("zone" + " = " + zone);          String msg = "Zone is NOT null";//          JOptionPane.showMessageDialog(null, msg);        } else {        }      }    } catch (NullPointerException e) {      ////System.out.println("NPE588" + " = " + e);    }  }  /**   arrange   */  public static void arrange() {    try {      addStars();//      addGasGiants();//      addPlanetoids();//      addEmpty();//      addCaptured();//      addPlanets();//      addMainworld();      Panel4StarPic.MO = Orbit.length;      rePrint();    } catch (Exception e) {      System.out.println("\t" + " = " + e);      System.out.println("924 e.getLocalizedMessage()" + " = " + e        .getLocalizedMessage());      jButton1.doClick();    }  }  /**   <p>   @return zone for marker character   */  public static String findZones() {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      ////System.out.println(globals.GlobalMethods.comment("=", 20));//    ////System.out.println(globals.GlobalMethods.comment("-",20));      ////System.out.println("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.println(globals.GlobalMethods.comment("-", 20));//    for(int i=0; i<svars.length; i++) {//          ////System.out.println("" + svarnames[i] + " = " + svars[i]);//    }//    for(int i=0; i<ivars.length; i++) {//          ////System.out.println("" + ivarnames[i] + " = " + ivars[i]);//    }    }//</editor-fold>//    for (int i = 0; i < Integer.parseInt(Panel4StarGen.primaryorbits); i++) {//      //////System.out.println("" + " = " + globals.GlobalMethods.Let2Grk(//              globals.GlobalMethods.Num2Let(i + 1)));//    }    lines = Panel4StarGen.jta.getText().split(Panel4StarGen.CRLF);    string = "";    for (int i = 0; i < lines.length; i++) {      if (lines[i].contains("\t.\t")) {        string += "" + i + " = " + "Inside star" + CRLF;      }      if (lines[i].contains("\t-\t")) {        string += "" + i + " = " + "Unavailable" + CRLF;      }      if (lines[i].contains("\tI\t")) {        string += "" + i + " = " + "Inner" + CRLF;      }      if (lines[i].contains("\tH\t")) {        string += "" + i + " = " + "Habitable" + CRLF;        String it = lines[i].trim().substring(0, 2);        ////System.out.println(it);//.trim().substring(0, 2));        Panel4StarPic.setHabitable(it);//.trim().substring(0, 2));      }      if (lines[i].contains("\tO\t")) {        string += "" + i + " = " + "Outer" + CRLF;      }    }    return string;//    ////System.out.println("" + " = " +getHabitableZone());  }  /**   <p>   @param i orbit number   @return letter code for stellar zone   */  public static String getZone(int i) {//    ////System.out.println("type" + " = " + type);//    ////System.out.println("dec" + " = " + dec);//Panel4StarGen.dec[0]);//    ////System.out.println("size" + " = " + size);    int num = 0;    //<editor-fold defaultstate="collapsed" desc="size tables">    switch (size) {      case "Ia": {        //    "Ia - Bright Super Giant",        num = 0;        Panel4StarGen.starcolumns = "" + Panel4StarGen.supergiantscols;        Panel4StarGen.table = Panel4StarGen.supergiants;        break;      }      case "Ib": {        //    "Ib - Weaker Super Giant",        num = 1;        Panel4StarGen.starcolumns = "" + Panel4StarGen.weakersupergiantscols;        Panel4StarGen.table = Panel4StarGen.weakersupergiants;        break;      }      case "II": {        //    "II - Bright Giant",        num = 2;        Panel4StarGen.starcolumns = "" + Panel4StarGen.brightgiantscols;        Panel4StarGen.table = Panel4StarGen.brightgiants;        break;      }      case "III": {        //    "III - Giant",        num = 3;        Panel4StarGen.starcolumns = "" + Panel4StarGen.giantscols;        Panel4StarGen.table = Panel4StarGen.giants;        break;      }      case "IV": {        //    "IV - Sub Giant",        num = 4;        Panel4StarGen.starcolumns = "" + Panel4StarGen.subgiantscols;        Panel4StarGen.table = Panel4StarGen.subgiants;        break;      }      case "V": {        //    "V - Main Sequence",        num = 5;        Panel4StarGen.starcolumns = "" + Panel4StarGen.mainsequencecols;        Panel4StarGen.table = Panel4StarGen.mainsequence;        break;      }      case "VI": {        //    "VI - Sub Dwarf",        num = 6;        Panel4StarGen.starcolumns = "" + Panel4StarGen.subdwarfscols;        Panel4StarGen.table = Panel4StarGen.subdwarfs;        break;      }      case "VII":      case "D": {        //    "D - White Dwarf"        num = 7;        Panel4StarGen.starcolumns = "" + Panel4StarGen.whitedwarfscols;        Panel4StarGen.table = Panel4StarGen.whitedwarfs;        break;      }    }    Panel4StarGen.startable = Panel4StarGen.startables[num];    //</editor-fold>////    Panel4StarGen.getStarTables(num);//Test OK    //FIND COLUMNS REQUIRED TO DISPLAY ZONE INFO FOR STAR    //<editor-fold defaultstate="collapsed" desc="getColumn">//    ////System.out.println("Panel4StarGen.starcolumns" + " = " + Panel4StarGen.starcolumns);    int min = 1;    int max = Integer.parseInt(Panel4StarGen.starcolumns);    int col = 0;    dec = Panel4StarGen.dec[0];    for (int k = 0; k < max; k++) {      if (Panel4StarGen.table[k].contains(type)) {//        ////System.out.println("dec" + " = " + dec);        if (dec >= 5) {//          ////System.out.println("dec >= 5");          col = k + 1;        } else if (dec < 5) {//          ////System.out.println("dec < 5");          col = k;        }//        ////System.out.println("Column = " + col);        break;      }    }//    ////System.out.println();    //</editor-fold>    int orbnum = (i + 1) * Integer.parseInt(Panel4StarGen.starcolumns) + col;    // i + col = Orbit number    //<editor-fold defaultstate="collapsed" desc="print Zone">    num = Integer.parseInt(Panel4StarGen.starcolumns);    int leng = Panel4StarGen.table.length;    int line = leng - num;    //Panel4StarGen.jta.append("\t" + Panel4StarGen.startable + CRLF);    for (int j = 0; j < line; j += num) {      for (i = 0; i < num; i++) {        //Panel4StarGen.jta.append("" + Panel4StarGen.table[i + j] + "\t");      }      //Panel4StarGen.jta.append(CRLF);    }    //</editor-fold>//    Panel4StarGen.jta.append("" + CRLF);    return Panel4StarGen.table[orbnum];  }  /**   set HZ   */  public static void setHabitable() {    String line = dbviewer.globals.GlobalMethods.comment("-", 20);    int count = 0;    String search = "\tH";    for (int j = 0; j < txt.length; j++) {      if (txt[j].contains(search)) {        count += 1;        //////System.out.print("txt[" + (j + 1) + "]" + " = " + txt[j + 1] + CRLF);      }      if (txt[j].contains(search)) {        Panel4StarPic.habitable = "" + (count - start);      }    }  }  /**   <p>   @param num number of HZ   */  public static void setHabitable(int num) {    Panel4StarPic.habitable = "" + num;  }  private static String getHabitableZone() {    //setHabitable();    return Panel4StarPic.habitable;  }  /**   showOrbitData   */  public static void showOrbitData() {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      ////System.out.print(globals.GlobalMethods.comment("=", 20));      ////System.out.println("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print(globals.GlobalMethods.comment("-", 20));    }//</editor-fold>    Panel4StarGen.jta.setText("");    printStellarData();    txt = Panel4StarGen.jta.getText().split(CRLF);    int max;    for (max = 0; max < txt.length; max++) {      if (txt[max].contains("Secondary")) {        break;      }    }    int count = 0;    for (int i = 0; i < max; i++) {      txt[i] = txt[i].trim();//      ////System.out.println(i + " = " + txt[i]);      if (txt[i].contains("--------------------")) {        count += 1;      }    }//    orbitdata = Orbit;    int num;    for (int i = 0; i < max; i++) {      String target = "--------------------";      if (txt[i].equals(target)) {        orbitdata = Orbit;//        ////System.out.print(globals.GlobalMethods.comment("=", 20));//        ////System.out.println("Lined @ " + i);        if (i + 3 < max) {          String string2 = txt[i + 1].substring(0, 2).trim();//          ////System.out.println(string2);//          ////System.out.println(txt[i + 2]);//          ////System.out.println(txt[i + 3]);          num = Integer.parseInt(string2);          try {            orbitdata[num] = txt[i + 3];          } catch (ArrayIndexOutOfBoundsException e) {            ////System.out.println("e" + "1181 = " + e);            break;          }          Orbit = orbitdata;        }      }    }//    try {//      if (orbitdata[0] == null) {//        orbitdata[0] = "OI";//      }//    } catch (Exception e) {//      ////System.out.println("e" + "1191 = " + e);//    }//    JOptionPane.showMessageDialog(null, orbitdata.length);//    for (int i = 0; i < orbitdata.length - 1; i++) {//      if (orbitdata[i] != null) {//        ////System.out.println("" + " = " + orbitdata[i]);//      }//    }  }  private static String findZone(int line) {    lines = Panel4StarGen.jta.getText().split(Panel4StarGen.CRLF);    String zone = null;    if (lines[line].contains("\t.\t")) {      zone = "inside";//inside star    } else if (lines[line].contains("\t_\t")) {      zone = "unavailable";//unavailable zone orbit    } else if (lines[line].contains("\tI\t")) {      zone = "inner";//inner zone orbit    } else if (lines[line].contains("\tH\t")) {      zone = "habitable";//habitable zone orbit//      Panel4StarPic.setHabitable(lines[line].trim().substring(0, 2));    } else if (lines[line].contains("\tO\t")) {      zone = "outer";      //outer zone orbit    }    return zone;  }  private static String getRandomUWP(int orbit) {    //<editor-fold defaultstate="collapsed" desc="strings">    int hab;    try {      hab = Integer.parseInt(getHabitableZone());    } catch (NumberFormatException e) {      //////System.out.println("e.toString()" + "620 = " + e.toString());      //JOptionPane.showMessageDialog(null, e);      hab = 0;    }    string = "Y0000000";    String sp = string.substring(0, 1),      si = string.substring(1, 2),      at = string.substring(2, 3),      hy = string.substring(3, 4),      po = string.substring(4, 5),      go = string.substring(5, 6),      ll = string.substring(6, 7),      tl = string.substring(7, 8);//    String[] uwp = new String[] {//      sp,si,at,hy,po,go,ll,tl//    };    //</editor-fold>    //<editor-fold defaultstate="collapsed" desc="rolls">    int[] rolls = new int[]{      0,//sp      panels.Panel4StarGen.getRoll(2),// - 2,//si      panels.Panel4StarGen.getRoll(2),// - 7 + Integer.parseInt(si),//at      panels.Panel4StarGen.getRoll(2),// - 7 + Integer.parseInt(si),//hy      panels.Panel4StarGen.getRoll(2),// - 2,//po      panels.Panel4StarGen.getRoll(2),//go      panels.Panel4StarGen.getRoll(2),//ll      panels.Panel4StarGen.getRoll(2)//tl    };    //</editor-fold>    //<editor-fold defaultstate="collapsed" desc="DMs">    int[] DMs = new int[]{0, 0, 0, 0, 0, 0, 0, 0};    try {      hab = Integer.parseInt(getHabitableZone());    } catch (Exception e) {//      JOptionPane.showMessageDialog(null, hab);      hab = 100;    }    //<editor-fold defaultstate="collapsed" desc="PortDMs">    //Port    //</editor-fold>  //0    //<editor-fold defaultstate="collapsed" desc="SizeDMs">    //Size    DMs[1] = -2;    switch (orbit) {      case 0: {        DMs[1] += -5;        break;      }      case 1: {        DMs[1] += -4;        break;      }      case 2: {        DMs[1] += -2;        break;      }    }    String star = "";    if (Panel4StarGen.hasparent == true) {      star += Panel4SubSector.jcb4Star1.getSelectedItem().toString();    }    if (star.startsWith("M")) {      DMs[1] += -2;    }    //</editor-fold>  //1    //<editor-fold defaultstate="collapsed" desc="AtmosphereDMs">    //Atmosphere    DMs[2] = -7;    if (orbit < hab & orbit >= 0) {      DMs[2] += -2;    }    if (orbit > hab & orbit >= 0) {      DMs[2] += -4;    }    //</editor-fold>  //2    //<editor-fold defaultstate="collapsed" desc="HydrosphereDMs">    //Hydrosphere    if (orbit > hab & hab >= 0) {      DMs[3] += -2;    }    if (Integer.parseInt(at) < 2 | dbviewer.globals.GlobalMethods.fromHex(at)      > 9) {      DMs[3] += -4;    }    //</editor-fold>  //3    //<editor-fold defaultstate="collapsed" desc="PopulationDMs">    //Population//    setHabitable();//    msg += "getHabitableZone() = " + getHabitableZone() + CRLF;    DMs[4] = -2;    if (orbit < hab) {      DMs[4] += -5;    }    if (orbit > hab) {      DMs[4] += -3;    }//    String msg = "DM" + DMs[4] + CRLF;//    msg += "Orbit " + orbit + CRLF;//    JOptionPane.showMessageDialog(null, msg);//    ////System.out.println("msg" + " = " + msg);    //</editor-fold>  //4    //<editor-fold defaultstate="collapsed" desc="port">    //Port    //</editor-fold>  //0    //<editor-fold defaultstate="collapsed" desc="size">    {      int num = rolls[1] + DMs[1];      if (num < 1) {        si = "0";      } else {        si = "" + dbviewer.globals.GlobalMethods.toHex(Panel4StarGen.setMaximum(          Panel4StarGen.setMinimum(num, 0), 20));      }    }    //</editor-fold>  //1    //<editor-fold defaultstate="collapsed" desc="atmosphere">    //atmosphere    int atm = dbviewer.globals.GlobalMethods.fromHex(si);    at = "" + dbviewer.globals.GlobalMethods.toHex(rolls[2] + DMs[2] + atm);    int num = (rolls[2] + -7 + atm);    if (num < 1) {      at = "0";    } else if (si == "S") {      at = "0";    } else {      at = "" + dbviewer.globals.GlobalMethods.toHex(Panel4StarGen.setMaximum(        Panel4StarGen.setMinimum(num, 0), 20));    }    if (("0".equals(si)) | ("S".equals(si))) {      at = "0";    }    if (orbit > (hab + 2) & hab >= 0) {      int it = Panel4StarGen.getRoll(2);      if (it == 12) {        at = "A";      }    }    //</editor-fold>  //2    //<editor-fold defaultstate="collapsed" desc="hydrographics">    //hydrographics    if (rolls[3] + DMs[3] < 1) {      hy = "0";    } else {      hy = "" + dbviewer.globals.GlobalMethods.toHex(rolls[3] + DMs[3]);    }    if (orbit < hab & hab >= 0) {      hy = "0";    }    try {      if (Integer.parseInt(si) < 2) {        hy = "0";      }    } catch (Exception e) {      hy = "0";    }    //</editor-fold>  //3    //<editor-fold defaultstate="collapsed" desc="population">    //population    if (!"0".equals(at) | !"5".equals(at) | !"6".equals(at) | !"8".equals(at)) {      DMs[4] += -2;    }    try {      po = "" + dbviewer.globals.GlobalMethods.toHex(Panel4StarGen.setMinimum(        Panel4StarGen.setMaximum(          rolls[4] + DMs[4],          dbviewer.globals.GlobalMethods.fromHex(Panel4StarGen.uwp.getText()            .substring(4, 5)) - 1), 0));    } catch (Exception e) {    }//    ////System.out.println("  (rolls[4] + DMs[4]) = " + (rolls[4] + DMs[4]));    //</editor-fold>  //4    //<editor-fold defaultstate="collapsed" desc="government">    //government//    go = "" + globals.GlobalMethods.toHex(//            Panel4StarGen.setMinimum(Panel4StarGen.getRoll(1), 0));    int mod = 0;    int code = 0;    //if mainworld 6 , then DM+=po    int mwpo = dbviewer.globals.GlobalMethods.fromHex(Panel4StarGen.uwp      .getText().substring(4, 5));    int mwgo = dbviewer.globals.GlobalMethods.fromHex(Panel4StarGen.uwp      .getText().substring(5, 6));    switch (mwgo) {      case 6: {        mod = mwpo;        break;      }      case 7:      case 8:      case 9:      case 10:      case 11:      case 12: {        mod = 1;        break;      }    }    mod += Panel4StarGen.getRoll(1);    switch (mod) {      case 1: {        code = 0;        break;      }      case 2: {        code = 1;        break;      }      case 3: {        code = 2;        break;      }      case 4: {        code = 3;        break;      }      case 5:      case 6:      case 7:      case 8:      case 9:      case 10:      case 11:      case 12:      case 13:      case 14:      case 15:      case 16:      case 17:      case 18: {        code = 6;        break;      }    }    go = "" + code;    if ("0".equals(po)) {      go = "0";    }    //</editor-fold>  //5    //<editor-fold defaultstate="collapsed" desc="lawlevel">    //lawlevel    ll = "" + (dbviewer.globals.GlobalMethods.toHex(Panel4StarGen.setMinimum(      Panel4StarGen.getRoll(1) - 3,      0) + dbviewer.globals.GlobalMethods.fromHex(Panel4StarGen.uwp.getText()        .substring(6, 7))));    if ("0".equals(po)) {      ll = "0";    }    //</editor-fold>  //6    //<editor-fold defaultstate="collapsed" desc="techlevel">    //techlevel    tl = "" + dbviewer.globals.GlobalMethods.toHex(      Panel4StarGen.setMinimum(rolls[6] + DMs[6], 0));    if ("0".equals(po)) {      tl = "0";    }    //</editor-fold>  //7    for (int i = 0; i < 8; i++) {      ////System.out.println("" + i + " = " + rolls[i] + " + " + DMs[i]//              + " = " + globals.GlobalMethods.toHex(rolls[i] + DMs[i]));    }//    help();    sp = "X";    string = sp + si + at + hy + po + go + ll + "-" + tl;    String data = "";    if ((null != getHabitableZone())) {      Panel4StarPic.habitable = "" + getHabitableZone();    } else {      //JOptionPane.showMessageDialog(null, orbit);    }    try {      for (int i = 0; i < Orbit.length; i++) {//        System.out.println("Orbit[" + i + "]" + " = " + Orbit[i]);      }    } catch (Exception e) {    }    try {      if ("Planet".equals(Orbit[orbit])) {        data = " - " + string;        if (orbit == Integer.parseInt(getHabitableZone())) {          data = " - " + Panel4StarGen.uwp.getText();        }      }      if ("Gas Giant".equals(Orbit[orbit])) {        int rad = 0;        int rnd = (int) Math.random() * 2;        if (rnd == 0) {          data = " - " + "LGG";          //60-120kmR (1to7+5)*10          rad = (int) (((Math.random() * 7) + 1) + 5) * 10;          data += " - " + rad + ",000km radius";        }        if (rnd == 1) {          data = " - " + "SGG";          //20-60kmR 10-50+10          rad = (int) ((Math.random() * 5) + 1) * 10;          data += " - " + rad + ",000km radius";        }      }      if ("Planetoid Belt".equals(Orbit[orbit])) {        data = " - ";      }      if ((Orbit[orbit]).contains("Secondary") | Orbit[orbit].contains(        "Tertiary")) {        data = " - Star";      }    } catch (Exception e) {    }//    if (Orbit[orbit].length() <= 6) {//      data = starty;//    }    return data;  }  private static void placeComponents(int i, int startsat) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      ////System.out.println(globals.GlobalMethods.comment("=", 20));//    ////System.out.println(globals.GlobalMethods.comment("-",20));      ////System.out.println("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.println(globals.GlobalMethods.comment("-", 20));    }//</editor-fold>    String gg, pb, num;    int orbitso = 20;           //total of orbits//    int ggs = 0;              //total of ggs//    int pbs = 0;              //total of pbs    int availableorbits;  //orbits+captured-emptyorbits    //<editor-fold defaultstate="collapsed" desc="orbital info">    //<editor-fold defaultstate="collapsed" desc="place stars">    switch (i) {      case 0:        num = Panel4StarGen.primaryorbits;        if (Panel4StarGen.hasparent) {          gg = Panel4SubSector.jcb4PAG.getSelectedItem().toString().substring(2);          pb = Panel4SubSector.jcb4PAG.getSelectedItem().toString().substring(1,            2);        } else {          gg = "2";          pb = "2";        }        break;      case 1:        num = Panel4StarGen.secondaryorbits;        gg = "0";        pb = "0";        break;      case 2:        num = Panel4StarGen.tertiaryorbits;        gg = "0";        pb = "0";        break;      default:        num = "2";        gg = "1";        pb = "1";        break;    }    //</editor-fold>    orbitso = Integer.parseInt(num);    //<editor-fold defaultstate="collapsed" desc="orbits">    try {      orbitso = Integer.parseInt(num);      if (orbitso < 1) {        orbitso = 1;      }      if (orbitso > -1) {        orbitdata = new String[25];      }      ggs = Integer.parseInt(gg);      pbs = Integer.parseInt(pb);      if (orbitso < (ggs + pbs + begin)) {        orbitso = (ggs + pbs);      }    } catch (NegativeArraySizeException e) {      String msg = "";      msg += ("placeComponents(int i, int startsat)" + CRLF);      msg += ("e" + " = " + e + CRLF);      msg += ("i" + " = " + i + CRLF);      msg += ("startsat" + " = " + startsat + CRLF);      ////System.out.println(msg);      //      ////System.out.println("" + " = " + e.getMessage());      //      ////System.out.println("" + " = " + e.fillInStackTrace());      //      ////System.out.println("" + " = " + e.getStackTrace());      //      e.printStackTrace();    }    ////System.out.print(globals.GlobalMethods.comment("-", 20));    ////System.out.println("orbitso" + " = " + orbitso);    ////System.out.println("gas giants" + " = " + ggs);    ////System.out.println("planetoid belts" + " = " + pbs);    //</editor-fold>    //<editor-fold defaultstate="collapsed" desc="emptyorbits">    int roll = (int) ((Math.random() * 6) + 1);    if (roll > 4) { //Empty Orbits present      roll = (int) ((Math.random() * 6) + 1);      switch (roll) {        case 1:        case 2: {          emptyorbits = 1;          break;        }        case 3: {          emptyorbits = 2;          break;        }        case 4:        case 5:        case 6: {          emptyorbits = 3;          break;        }        default: {          emptyorbits = 0;        }      }    } else {      emptyorbits = 0;    }    //</editor-fold>    ////System.out.println("emptyorbits" + " = " + emptyorbits);    //<editor-fold defaultstate="collapsed" desc="capturedplanets">    roll = (int) ((Math.random() * 6) + 1);    if (roll > 4) { //Captured Planets present      capturedplanets = (int) ((Math.random() * 3) + 1);    } else {      capturedplanets = 0;    }    //</editor-fold>    ////System.out.println("capturedplanets" + " = " + capturedplanets);    //<editor-fold defaultstate="collapsed" desc="tidy">    boolean[] orbitfilled = null;    if (orbitso > -1) {      availableorbits = orbitso;//- emptyorbits + capturedplanets;    } else {      availableorbits = 0;    }    ////System.out.println("availableorbits" + " = " + availableorbits);    orbitdata = new String[orbitso + startsat];    orbitfilled = new boolean[orbitso + startsat];    //</editor-fold>    //<editor-fold defaultstate="collapsed" desc="Place Gas Giants first in orbit between 0/1 and orbits, outer zone first">    //Place Gas Giants first in orbit between 0/1 and orbits, outer zone first    for (int j = 0; j < ggs; j++) {      boolean done = false;      while (done == false) {        int orbitnum = (int) ((Math.random() * orbitso) + startsat);        int num1 = 0;        try {          if (orbitfilled[orbitnum] == false) {            //place gg in ounter orbits first            orbitfilled[orbitnum] = true;            num1 = (int) ((Math.random() * 2) + 1);            switch (num1) {              case 1: {                orbitdata[orbitnum] = "SGG";                break;              }              case 2: {                orbitdata[orbitnum] = "LGG";                break;              }            }            done = true;            ////System.out.println(orbitdata[orbitnum] + " @ " + orbitnum);          }        } catch (java.lang.ArrayIndexOutOfBoundsException e) {          String msg = "";          msg += "ArrayIndexOutOfBoundsException" + " = " + e + CRLF;          msg += "orbitfilled.length" + " = " + orbitfilled.length + CRLF;          msg += "orbitnum" + " = " + orbitnum + CRLF;          msg += "num" + " = " + num + CRLF;          msg += "num1" + " = " + num1 + CRLF;          msg += "orbitso" + " = " + orbitso + CRLF;          msg += "startsat" + " = " + startsat + CRLF;          //JOptionPane.showMessageDialog(null, msg);          System.exit(10);        }      }    }    //</editor-fold>    //<editor-fold defaultstate="collapsed" desc="Place Asteroid Belts next in orbit between 0/1 and orbits">    //Place Asteroid Belts next in orbit between 0/1 and orbits    //preferably next orbit in from GGs    for (int j = 0; j < pbs; j++) {      boolean done = false;      while (done == false) {        int orbitnum = (int) ((Math.random() * orbitso) + startsat);        try {          if (orbitfilled[orbitnum] == false) {            //place gg in orbit number            orbitfilled[orbitnum] = true;            orbitdata[orbitnum] = "Planetoid belt";            done = true;            ////System.out.println("Planetoid belt placed" + " @ " + orbitnum);          }        } catch (Exception e) {          ////System.out.println("e" + "1006 = " + e);//          JOptionPane.showMessageDialog(null, e);        }      }    }    //</editor-fold>    //<editor-fold defaultstate="collapsed" desc="planets">    int planets = 0;    for (int j = startsat; j < orbitso; j++) {      if (orbitdata[j] == null) {        planets += 1;        orbitdata[j] = "Planet";        orbitfilled[j] = true;      }    }    //</editor-fold>    //<editor-fold defaultstate="collapsed" desc="check">    for (int j = startsat; j < orbitso; j++) {      ////System.out.print(globals.GlobalMethods.comment("-", 20));      ////System.out.println("orbitfilled[" + j + "]" + " = " + orbitfilled[j]);      ////System.out.println("  orbitdata[" + j + "]" + " = " + orbitdata[j]);      ////System.out.print(globals.GlobalMethods.comment("-", 20));    }    //    JOptionPane.showMessageDialog(null, "planets = " + planets);    //</editor-fold>    //</editor-fold>  }  private static String getRandomMoons(int orb) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      ////System.out.print(globals.GlobalMethods.comment("=", 20));      ////System.out.println("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print(globals.GlobalMethods.comment("-", 20));    }//</editor-fold>//    for (int i = 0; i < Orbit.length; i++) {    orbitdata = Orbit;//    }    int moons = 0;    try {      string = Orbit[orb];    } catch (Exception e) {    }    ////System.out.println("string" + " = " + string);    String strings = "";    if (string.contains("Star")) {      moons = 0;    } else if (string.contains("LGG")) {      moons = Panel4StarGen.getRoll(2);    } else if (string.contains("SGG")) {      moons = Panel4StarGen.getRoll(2) - 4;    } else if (string.contains("Planetoid belt")) {      moons = 0;    } else if (string.contains("Planet ")) {      moons = Panel4StarGen.getRoll(1) - 3;    }    if (moons < 1) {      moons = 0;    } else {      orbits = new String[moons];      calcOrbits(moons);      for (int i = 1; i <= moons; i++) {        if (i > 1) {          strings += "\t";        }        strings += "\t" + dbviewer.globals.GlobalMethods.let2Snd(          dbviewer.globals.GlobalMethods.num2Let(i))          + "\t" + getMoonUWP(string, orb)          + "\t@ " + orbits[i - 1] + " Dias"          //                + "\t" + string          + CRLF;      }    }//    help();    return strings;  }  private static String getMoonUWP(String world, int orbit) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      ////System.out.print(globals.GlobalMethods.comment("=", 20));      ////System.out.println("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print(globals.GlobalMethods.comment("-", 20));    }//</editor-fold>    String starport = "Y",      size = "0",      atmosphere = "0",      hydrosphere = "0",      population = "0",      government = "0",      lawlevel = "0",      techlevel = "0";    String uwp = starport + size + atmosphere + hydrosphere      + population + government + lawlevel + techlevel;    int s = 0;    int num = 0;    String main = "";    //////System.out.println("world" + " = " + world.trim());    ////System.out.println("starport" + " = " + starport);    //<editor-fold defaultstate="collapsed" desc="SIZE">    //SIZE    if (world.contains("SGG")) {      //size = 2d-6      size = "" + Panel4StarGen.setMinimum((Panel4StarGen.getRoll(2) - 6), 0);    }    if (world.contains("LGG")) {      //size = 2d-4      size = "" + Panel4StarGen.setMinimum((Panel4StarGen.getRoll(2) - 4), 0);    }//    ////System.out.println("size" + " = " + size);    if (world.contains("Planet ")) {      main = world.substring(9);//      ////System.out.println("world.substring(9)" + " = " + main);      int siz = dbviewer.globals.GlobalMethods.fromHex(main.substring(1, 2));      //size = world size - 1d      s = Panel4StarGen.setMinimum(siz - Panel4StarGen.getRoll(1), 0);      //if size==0 use "R"      size = "" + s;      if (siz == 0) {        size = "R";      }      //if size < 0 use "S"      if (siz < 0) {        size = "S";      }//      ////System.out.println("siz" + " = " + siz);//      ////System.out.println("s" + " = " + s);    }    //</editor-fold>    ////System.out.println("size" + " = " + size);    //<editor-fold defaultstate="collapsed" desc="ATMOSPHERRE">    //ATMOSPHERRE    //2d-7+size    num = Panel4StarGen.getRoll(2) - 7 + s;    atmosphere = "" + dbviewer.globals.GlobalMethods.toHex(Panel4StarGen      .setMaximum(Panel4StarGen.setMinimum(num, 0), 20));//    ////System.out.println("atmosphere" + " = " + atmosphere);//    ////System.out.println("num" + " = " + num);    //JOptionPane.showMessageDialog(null, atmosphere);    //</editor-fold>    ////System.out.println("atmosphere" + " = " + atmosphere);    //<editor-fold defaultstate="collapsed" desc="HYDROSPHERE">    //HYDROSPHERE    //2d-7+size    num = Panel4StarGen.getRoll(2) - 7 + s;    //of outer then -4    if (getZone(orbit).equals("O")) {      num += -4;    }    //if inner then 0    if (getZone(orbit).equals(".") | getZone(orbit).equals("I")) {      num = 0;    }    //if size 0- then 0    if (size == "0" | size == "S") {      num = 0;    }    //if atm 1- or A+ then -4    int at = dbviewer.globals.GlobalMethods.fromHex(Panel4StarGen.uwp.getText()      .substring(2, 3));    if (at < 2 | at > 9) {      num += -4;    }    hydrosphere = "" + dbviewer.globals.GlobalMethods.toHex(Panel4StarGen      .setMaximum(Panel4StarGen.setMinimum(num, 0), 10));//    ////System.out.println("hydrosphere" + " = " + hydrosphere);//    ////System.out.println("num" + " = " + num);//    ////System.out.println("" + globals.GlobalMethods.comment("=", 20));//    ////System.out.println("  orbit" + " = " + orbit);//    ////System.out.println("  getZone(" + orbit + ")" + " = " + getZone(orbit));    //</editor-fold>    ////System.out.println("hydrosphere" + " = " + hydrosphere);    //<editor-fold defaultstate="collapsed" desc="POPULATION">    //POPULATION    //2d-2    num = Panel4StarGen.getRoll(2) - 2;    //if inner then -5    if (getZone(orbit).contains("I")) {      num += -5;    }    //if outer then -4    if (getZone(orbit).contains("O")) {      num += -4;    }    //if size 4- then -2    try {      s = Integer.parseInt(size);      if (s < 5) {        num += -2;      }    } catch (Exception e) {      //s = 0;    }    if (s < 5) {      num += -2;    }    //if atm not 5,6 or 8 then -2    at = dbviewer.globals.GlobalMethods.fromHex(Panel4StarGen.uwp.getText()      .substring(2, 3));    if (at == 5 | at == 6 | at == 8) {      num += -4;    }    //if size "R" then 0    if ("R".equals(size)) {      num = 0;    }    population = "" + dbviewer.globals.GlobalMethods.toHex(Panel4StarGen      .setMaximum(Panel4StarGen.setMinimum(num, 0), 10));    //</editor-fold>    ////System.out.println("population" + " = " + population);    //<editor-fold defaultstate="collapsed" desc="GOVERNMENT">    //GOVERNMENT    num = Panel4StarGen.getRoll(1);    if ("0".equals(population)) {      num = 0;    }    government = "" + dbviewer.globals.GlobalMethods.toHex(Panel4StarGen      .setMaximum(Panel4StarGen.setMinimum(num, 0), 15));    if ("0".equals(population)) {      government = "0";    }    //</editor-fold>    ////System.out.println("government" + " = " + government);    //<editor-fold defaultstate="collapsed" desc="LAWLEVEL">    //LAWLEVEL    int ll = Integer.parseInt(Panel4StarGen.uwp.getText().substring(6, 7));    num = Panel4StarGen.getRoll(1) - 3 + ll;//    lawlevel = "" + globals.GlobalMethods.toHex(Panel4StarGen.setMaximum(Panel4StarGen.setMinimum(num, 0), 15));    lawlevel = "" + dbviewer.globals.GlobalMethods.toHex(Panel4StarGen      .setMaximum(Panel4StarGen.setMinimum(num, 0), 15));    if ("0".equals(population)) {      lawlevel = "0";    }    //</editor-fold>    ////System.out.println("lawlevel" + " = " + lawlevel);    //<editor-fold defaultstate="collapsed" desc="TECHLEVEL">    //TECHLEVEL    //main TL-1, TL if military base or research lab//    num = Integer.parseInt(Panel4StarGen.uwp.getText().substring(8,9))-1;    num = dbviewer.globals.GlobalMethods.fromHex(Panel4StarGen.uwp.getText()      .substring(8, 9)) - 1;    if ("0".equals(population)) {      num = 0;    }    techlevel = "" + dbviewer.globals.GlobalMethods.toHex(Panel4StarGen      .setMaximum(Panel4StarGen.setMinimum(num, 0), 20));    //</editor-fold>    ////System.out.println("techlevel" + " = " + techlevel);    //<editor-fold defaultstate="collapsed" desc="ORBITS">    //ORBITS - ROLL 2D    //-1 per roll after first    //7- = Close    //8+ = Far    //if orbiting GG then 12+ = Extreme    //if size = "R" then roll 1d on Ring table    //</editor-fold>    uwp = starport      + size      + atmosphere      + hydrosphere      + population      + government      + lawlevel      + "-"      + techlevel;    return uwp;  }  private static int calcOrbits(int moons) {    int[] rolls = new int[moons];    int roll;    int[] roll2s = new int[moons];    int roll2;    Object[] results = new Object[moons];    int result;    for (int i = 0; i < moons; i++) {      //satelliteorbitnum      roll = Panel4StarGen.getRoll(2);      rolls[i] = roll;      //////System.out.println("rolls[" + i + "]" + " = " + rolls[i]);      roll2 = Panel4StarGen.getRoll(2);      roll2s[i] = roll2;      //satelliteorbitring      if (roll < 8) {        //satelliteorbitclose        //////System.out.println("close" + " = " + Panel4StarGen.satelliteorbitclose[roll2s[i]]);        orbits[i] = Panel4StarGen.satelliteorbitclose[roll2s[i]];      } else {        //satelliteorbitfar        //////System.out.println("far" + " = " + Panel4StarGen.satelliteorbitfar[roll2s[i]]);        orbits[i] = Panel4StarGen.satelliteorbitfar[roll2s[i]];        if (string.contains("GG")) {          if (roll == 12) {            //satelliteorbitextreme            //////System.out.println("extreme" + " = " + Panel4StarGen.satelliteorbitextreme[roll2s[i]]);            orbits[i] = Panel4StarGen.satelliteorbitextreme[roll2s[i]];          }        }      }      try {        results[i] = Integer.parseInt("" + orbits[i]);      } catch (Exception e) {      }    }    if (results != null & results.length > 0) {      try {        Arrays.sort(results);        //////System.out.println("" + " = " + orbits.toString());        boolean done = false;        for (int i = 1; i < results.length; i++) {          if (results[i - 1] == results[i]) {            results[i] = "" + ((int) results[i] + 1);          }//          Arrays.sort(results);        }      } catch (NullPointerException e) {        ////System.out.println("np3" + "1382 = " + e);      }    }    orbits = results;    return 0;  }  private static void showPrimary() {    //print table of zones for all orbits available    ////System.out.println("primarytype" + " = " + Panel4StarGen.primarytype);    ////System.out.println("dec[0]" + " = " + Panel4StarGen.dec[0]);    ////System.out.println("primarysize" + " = " + Panel4StarGen.primarysize);  }  private static int getUsedLen(int[] p) {    //unless first is used as Orbit 0!    int i;    for (i = 0; i < p.length; i++) {      if (p[i] == 0) {        break;      }    }    return i;  }  private static void countNullOrbits() {    // count null orbits    int unplaced = 0;    for (int i = 0; i < Orbit.length; i++) {      if (OrbitFilled[i] == false) {        unplaced += 1;      }    }    ////System.out.println("null orbits" + " = " + unplaced);  }  private static int getNullOrbitCount() {    // count null orbits    int unplaced = 0;    for (int i = 0; i < Orbit.length; i++) {      if (OrbitFilled[i] == false) {        unplaced += 1;      }    }    ////System.out.println("null orbits" + " = " + unplaced);    return unplaced;  }  private static void getOuterNull() {    for (int j = 0; j < pbs; j++) {      //print best null      ////System.out.println("BEST NULL");      int[] nas = getNullArrayNums();      outernull = 0;      for (int i = 0; i < nas.length - 1; i++) {        if (nas[i + 1] < nas[i]) {          outernull = nas[i];          continue;        }      }      ////System.out.println("nas[" + outernull + "]" + " = null");//      printOrbits();    }  }  private static void getInnerBelt() {    //get inner belt    for (int i = 0; i < Orbit.length; i++) {      if ("Planetoid Belt".equals(Orbit[i])) {        innerbelt = i;        break;      }    }  }  /**   rePrint   */  public static void rePrint() {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      System.out.print(dbviewer.globals.GlobalMethods.comment("=", 20));      System.out.println("\t" + Thread.currentThread().getStackTrace()[1]        .getMethodName());      System.out.print(dbviewer.globals.GlobalMethods.comment("-", 20));    }    //</editor-fold>//    txt = Panel4StarGen.jta.getText().split(CRLF);////    Panel4StarGen.jta.setText("");//    Panel4StarGen.jta.setText(Panel4Locator.getString() + CRLF);//    Panel4StarGen.jta.append(GlobalMethods.comment("=", 20));//    Panel4StarGen.jta.append(Panel4StarGen.nature + " Stellar System" + CRLF);//    Panel4StarGen.jta.append("Primary " + CRLF + Panel4StarGen.primarytype);//    Panel4StarGen.jta.append("" + Panel4StarGen.dec[0]);//    //<editor-fold defaultstate="collapsed" desc="size">//    switch (size) {//      case "Ia": {//        string = Panel4StarGen.startables[0];//        break;//      }//      case "Ib": {//        string = Panel4StarGen.startables[1];//        break;//      }//      case "II": {//        string = Panel4StarGen.startables[2];//        break;//      }//      case "III": {//        string = Panel4StarGen.startables[3];//        break;//      }//      case "IV": {//        string = Panel4StarGen.startables[4];//        break;//      }//      case "V": {//        string = Panel4StarGen.startables[5];//        break;//      }//      case "VI": {//        string = Panel4StarGen.startables[6];//        break;//      }//      case "D"://      case "VII": {//        string = Panel4StarGen.startables[7];//        break;//      }//    }//    //</editor-fold>//    Panel4StarGen.jta.append("" + string + CRLF);//    if (starCheck("Secondary", "Close").contains("Close")) {//      Panel4StarGen.jta.append(starCheck("Secondary", "Close") + CRLF);//    }//    if (starCheck("Tertiary", "Close").contains("Close")) {//      Panel4StarGen.jta.append(starCheck("Tertiary", "Close") + CRLF);//    }//    //-----------------------------------------------------------------------//    findZones();//    Panel4StarGen.jta.append("" + "\t " + Panel4StarGen.planetaryorbitnumtitle);//    Panel4StarGen.jta.append("" + "\t " + Panel4StarGen.planetaryorbitnumautitle);//    Panel4StarGen.jta.append("" + "\t " + "Zone");//    Panel4StarGen.jta.append("" + Panel4StarGen.CRLF);//    orbitdata = Orbit;//    for (int i = 0; i < Orbit.length; i++) {//      Panel4StarGen.jta.append("\t" + dbviewer.globals.GlobalMethods.comment("-", 20));//      Panel4StarGen.jta.append("\t" + Panel4StarGen.planetaryorbitnum[i].trim() + "\t"//        + Panel4StarGen.planetaryorbitnumau[i].trim() + "\t" + getZone(i).trim() + CRLF);//      Panel4StarGen.jta.append("\t" + dbviewer.globals.GlobalMethods.let2Grk(dbviewer.globals.GlobalMethods.num2Let(i + 1)) + Panel4StarGen.CRLF);//      Orbit[i] += getRandomUWP(i);//      Panel4StarGen.jta.append("\t" + Orbit[i] + CRLF);//      Panel4StarGen.jta.append("\t" + getRandomMoons(i) + CRLF);//    }//    if (starCheck("Secondary", "Far").contains("Far")) {//      Panel4StarGen.jta.append(starCheck("Secondary", "Far") + CRLF);//    }//    if (starCheck("Tertiary", "Far").contains("Far")) {//      Panel4StarGen.jta.append(starCheck("Tertiary", "Far") + CRLF);//    }//    StarGen.txt = Panel4StarGen.jta.getText().split(CRLF);//    int count = 0;//    for (int i = 0; i < StarGen.txt.length; i++) {//      if (StarGen.txt[i].equals("--------------------")) {//        count += 1;//      }//      if (StarGen.txt[i].contains("\tH")) {//        StarGen.setHabitable(count - 1);//        ////System.out.println("" + " = " + (count - 1));//        Panel4StarPic.habitable = "" + (count - 1);//        break;//      }//    }//    try {//    } catch (Exception e) {//      System.out.println("" + " = " + e);//    }  }  private static void help() {    ////System.out.print(globals.GlobalMethods.comment("=", 20));    try {      for (int i = 0; i < Orbit.length; i++) {        ////System.out.println("Orbit[" + i + "] = " + Orbit[i]);      }      ////System.out.println("Orbit.length" + " = " + Orbit.length);    } catch (Exception e) {    }//    ////System.out.print(globals.GlobalMethods.comment("=", 20));//    for (int i = 0; i < orbitdata.length; i++) {//      ////System.out.println("orbitdata[" + i + "]" + " = " + orbitdata[i]);////      ////System.out.println("" + " = " +);//    }//    ////System.out.println("orbitdata.length" + " = " + orbitdata.length);  }  private static String starCheck(String title, String dist) {    txt = Panel4StarGen.jta.getText().split(CRLF);    int star = 0;    String thistype = "", thisdec = "", thissize = "", starorbit = "";    String name = "";    switch (title) {      case "Primary": {        star = 0;        thistype = Panel4StarGen.primarytype;        thisdec = "" + Panel4StarGen.dec[0];        thissize = Panel4StarGen.primarysize;        starorbit = Panel4StarGen.primaryorbit;        name = "Primary";        break;      }      case "Secondary": {        star = 1;        thistype = Panel4StarGen.secondarytype;        thisdec = "" + Panel4StarGen.dec[1];        thissize = Panel4StarGen.secondarysize;        starorbit = Panel4StarGen.secondaryorbit;        name = "Secondary";        break;      }      case "Tertiary": {        star = 2;        thistype = Panel4StarGen.tertiarytype;        thisdec = "" + Panel4StarGen.dec[2];        thissize = Panel4StarGen.tertiarysize;        starorbit = Panel4StarGen.tertiaryorbit;        name = "Tertiary";        break;      }    }    if (!"Close".equals(starorbit) & !"Far".equals(starorbit)      & !"Centre".equals(starorbit) & !"Primary".equals(starorbit)      & !"Secondary".equals(starorbit) & !"Tertiary".equals(starorbit)) {      try {        int orb = Integer.parseInt(starorbit);        OrbitFilled[orb] = true;        Orbit[orb] = title + " " + thistype + thisdec + addStarDetails(star);      } catch (Exception e) {      }    }    try {      num1 = getTextLineNum(title) + 2;      String text = txt[num1].trim();      int a = text.indexOf("@");      text = text.substring(a + 2);      if (dist.equals(text)) {        ////System.out.println("" + title + " " + thistype//                + thisdec//                + thissize//                + " @ " + starorbit);      }      if (starorbit.equals(title)) {        return "" + title + " " + thistype          + thisdec          + thissize          + " @ " + starorbit + CRLF;      } else {        return "" + title + " " + thistype          + thisdec          + thissize          + " @ " + starorbit + CRLF;      }    } catch (Exception e) {    }    return ("");  }  private static void addStars() {    //<editor-fold defaultstate="collapsed" desc="comment">    //<editor-fold defaultstate="collapsed" desc="stars">    switch (Panel4StarGen.nature) {      case "Trinary": {        stars = 3;        break;      }      case "Binary": {        stars = 2;        break;      }      case "Solo": {        stars = 1;        break;      }    }    //</editor-fold>    //=========================================================    txt = Panel4StarGen.jta.getText().trim().split(CRLF);    //<editor-fold defaultstate="collapsed" desc="stars > 2">    if (stars > 2) {      ////System.out.print(GlobalMethods.comment("-", 20));//      ////System.out.println("Panel4StarGen.tertiarytype" + " = " + Panel4StarGen.tertiarytype);//      ////System.out.println("Panel4StarGen.dec[2]" + " = " + Panel4StarGen.dec[2]);//      ////System.out.println("Panel4StarGen.tertiarysize" + " = " + Panel4StarGen.tertiarysize);//      ////System.out.println("Panel4StarGen.tertiaryorbit" + " = " + Panel4StarGen.tertiaryorbit);//      ////System.out.println("Panel4StarGen.tertiaryorbits" + " = " + Panel4StarGen.tertiaryorbits);      type = Panel4StarGen.tertiarytype;      size = Panel4StarGen.tertiarysize;//      ////System.out.println("addSizeDMs(" + Panel4StarGen.tertiarytype + ", " + Panel4StarGen.tertiarysize + ") = " + Panel4StarGen.getSizeDMs(type, size));    }    //</editor-fold>    //<editor-fold defaultstate="collapsed" desc="stars > 1">    if (stars > 1) {//      ////System.out.print(GlobalMethods.comment("-", 20));//      ////System.out.println("Panel4StarGen.secondarytype" + " = " + Panel4StarGen.secondarytype);//      ////System.out.println("Panel4StarGen.dec[1]" + " = " + Panel4StarGen.dec[1]);//      ////System.out.println("Panel4StarGen.secondarysize" + " = " + Panel4StarGen.secondarysize);//      ////System.out.println("Panel4StarGen.secondaryorbit" + " = " + Panel4StarGen.secondaryorbit);//      ////System.out.println("Panel4StarGen.secondaryorbits" + " = " + Panel4StarGen.secondaryorbits);      type = Panel4StarGen.secondarytype;      size = Panel4StarGen.secondarysize;//      ////System.out.println("addSizeDMs(" + Panel4StarGen.secondarytype + ", " + Panel4StarGen.secondarysize + ") = " + Panel4StarGen.getSizeDMs(type, size));    }    //</editor-fold>    //<editor-fold defaultstate="collapsed" desc="stars > 0">    ////System.out.print(GlobalMethods.comment("-", 20));//    ////System.out.println("Panel4StarGen.primarytype" + " = " + Panel4StarGen.primarytype);//    ////System.out.println("Panel4StarGen.dec[0]" + " = " + Panel4StarGen.dec[0]);//    ////System.out.println("Panel4StarGen.primarysize" + " = " + Panel4StarGen.primarysize);//    ////System.out.println("Panel4StarGen.primaryorbit" + " = " + Panel4StarGen.primaryorbit);//    ////System.out.println("Panel4StarGen.primaryorbits" + " = " + Panel4StarGen.primaryorbits);    type = Panel4StarGen.primarytype;    size = Panel4StarGen.primarysize;//    ////System.out.println("addSizeDMs(" + Panel4StarGen.primarytype + ", " + Panel4StarGen.primarysize + ") = " + Panel4StarGen.getSizeDMs(type, size));//    ////System.out.println("stars" + " = " + stars);    //</editor-fold>    //<editor-fold defaultstate="collapsed" desc="size">    size = Panel4StarGen.primarysize;    String[] table = null;    switch (size) {      case "Ia": {        Panel4StarGen.setSuperGiants();//Ia        table = Panel4StarGen.supergiants;        break;      }      case "Ib": {        Panel4StarGen.setWeakerSuperGiants();//Ib        table = Panel4StarGen.weakersupergiants;        break;      }      case "II": {        Panel4StarGen.setBrightGiants();//II        table = Panel4StarGen.brightgiants;        break;      }      case "III": {        Panel4StarGen.setGiants();//III        table = Panel4StarGen.giants;        break;      }      case "IV": {        Panel4StarGen.setSubGiants();//IV        table = Panel4StarGen.subgiants;        break;      }      case "V": {        Panel4StarGen.setMainSequence();//V        table = Panel4StarGen.mainsequence;        break;      }      case "VI": {        Panel4StarGen.setSubDwarfs();//VI        table = Panel4StarGen.subdwarfs;        break;      }      case "VII":      case "D": {        Panel4StarGen.setWhiteDwarfs();//D        table = Panel4StarGen.whitedwarfs;        break;      }      default: {//        String msg = table.length + CRLF;//        msg += table.toString();//        JOptionPane.showMessageDialog(Panel4StarGen.jta, msg);      }    }    //</editor-fold>    //=========================================================    //<editor-fold defaultstate="collapsed" desc="print table">    ////System.out.println("Panel4StarGen.starcolumns" + " = "//            + Panel4StarGen.starcolumns);    ////System.out.println("search for " + Panel4StarGen.primarytype);    cols = Integer.parseInt(Panel4StarGen.starcolumns);    ////System.out.println();    for (int i = 0; i < table.length; i++) {      ////System.out.print(table[i] + "\t");      if ((i + 1) % (cols) == 0 & i > 0) {        ////System.out.println();      }    }    //</editor-fold>    //=========================================================    //<editor-fold defaultstate="collapsed" desc="print column required">    ////System.out.println("" + " = " + globals.GlobalMethods.comment("-", 20));    dec = Panel4StarGen.dec[0];//integer of primary    int tbl;    int col;    for (col = 1; col < cols; col++) {      tbl = Integer.parseInt(table[col].substring(1, 2));      if (table[col].contains(Panel4StarGen.primarytype)) {        if (dec >= Integer.parseInt(table[col + 1].substring(1, 2))) {          col += 1;          break;        } else {          break;        }      }    }    //</editor-fold>    //=========================================================    //<editor-fold defaultstate="collapsed" desc="print info">    ////System.out.println("Panel4StarGen.primaryorbits" + " = " + Panel4StarGen.primaryorbits);    ////System.out.println("Panel4StarGen.systemfeaturemaxorbits" + " = "//            + Panel4StarGen.systemfeaturemaxorbits);    ////System.out.println("addSizeDMs(" + Panel4StarGen.primarytype + ", "//            + Panel4StarGen.primarysize + ") = "//            + Panel4StarGen.getSizeDMs(type, size));    ////System.out.println("col" + " = " + col);    ////System.out.println("cols" + " = " + cols);    //</editor-fold>    //=========================================================    //<editor-fold defaultstate="collapsed" desc="useless">    for (int i = 0; i < table.length; i++) {      if ((i + 1) % cols == 0) {        if (i < cols) {          ////System.out.println("table[" + col + "] = " + table[col]);        } else {          int orbit = (int) ((i) / cols);          ////System.out.println("table[" + col + "] = Orbit " + (orbit - 1) + " = " + table[col]);          if (table[col].contains(".") | table[col].contains("_")) {            useless += 1;          }        }        col += cols;      }    }    //</editor-fold>    //=========================================================    //<editor-fold defaultstate="collapsed" desc="Orbits">    ////System.out.println("useless" + " = " + useless);    int ggq = Integer.parseInt(Panel4StarGen.gasgiantquantity);    ////System.out.println("gasgiantquantity" + " = " + ggq);    int pbq = Integer.parseInt(Panel4StarGen.planetoidquantity);    ////System.out.println("planetoidquantity" + " = " + pbq);    ////System.out.println("capturedplanets" + " = " + capturedplanets);    ////System.out.println("emptyorbits" + " = " + emptyorbits);    int useableminorbit = useless + ggq + pbq + emptyorbits;    ////System.out.println("useableminorbits" + " = " + useableminorbit);    int sizedm = Panel4StarGen.getSizeDMs(type, size);    ////System.out.println("addSizeDMs(" + Panel4StarGen.primarytype + ", " + Panel4StarGen.primarysize + ") = " + sizedm);    //      int totalorbits = (useablemin + Panel4StarGen.getSizeDMs(type, size));    //      ////System.out.println("totalorbits" + " = " + totalorbits);    int orbitss = Panel4StarGen.getRoll(2);    if (orbitss < (useless + useableminorbit)) {      orbitss = (useless + useableminorbit);    }    ////System.out.println("orbits" + " = " + orbitss);    start = useless + begin;    ////System.out.println("starts @ " + " = " + start);    if (begin == 0) {      end = (start + (orbitss - 1));    } else {      end = (start + orbitss);    }    ////System.out.println("ends @ " + " = " + end);    //      ////System.out.println("table.length" + " = " +table.length);    //</editor-fold>    OrbitFilled = new boolean[orbitss];    Orbit = new String[orbitss];    int num;    try {      num = Integer.parseInt(Panel4StarGen.primaryorbit);    } catch (Exception e) {      ////System.out.println("" + " = " + e);      num = 100;    }    if (stars > 1) {      try {        num = Integer.parseInt(Panel4StarGen.secondaryorbit);      } catch (Exception e) {        ////System.out.println("" + " = " + e);        num = 100;      }      if (num != 100) {        OrbitFilled[num] = true;      }    }    if (stars > 2) {      try {        num = Integer.parseInt(Panel4StarGen.secondaryorbit);      } catch (Exception e) {        ////System.out.println("" + " = " + e);        num = 100;      }      if (num != 100) {        OrbitFilled[num] = true;      }    }    //<editor-fold defaultstate="collapsed" desc="comment">    //    for (int i = 0; i < stars; i++) {    //      try {    //        if (stars > 2) {    //          num = Integer.parseInt(Panel4StarGen.tertiaryorbit);    //        }    //        if (stars > 1) {    //          num = Integer.parseInt(Panel4StarGen.secondaryorbit);    //        }    //        if (stars > 0) {    //          num = Integer.parseInt(Panel4StarGen.primaryorbit);    //        }    //        OrbitFilled[num] = true;    //      } catch (NumberFormatException e) {    //      }    //    }    //</editor-fold>    //=========================================================    //<editor-fold defaultstate="collapsed" desc="Spectra shift">    for (col = 1; col < cols; col++) {      tbl = Integer.parseInt(table[col].substring(1, 2));      if (table[col].contains(Panel4StarGen.primarytype)) {        if (dec >= Integer.parseInt(table[col + 1].substring(1, 2))) {          col += 1;          break;        } else {          break;        }      }    }    //</editor-fold>    //=========================================================    //<editor-fold defaultstate="collapsed" desc="print orbits">    //int num1 = 0;    int num2 = 0;    int orbit;    ////System.out.println("table[" + col + "] = " + table[col]);    ////System.out.print("" + globals.GlobalMethods.comment("==", 20));    System.out.println("" + " = " + 2568);    for (int i = 0; i < table.length; i++) {      if ((i + 1) % cols == 0) {        if (i < cols) {          ////System.out.print("Primary " + Panel4StarGen.primarytype);          ////System.out.print("" + Panel4StarGen.dec[0]);          ////System.out.println("" + Panel4StarGen.primarysize);          starCheck("Secondary", "Close");          starCheck("Tertiary", "Close");          String text = txt[num2].trim();          System.out.println("" + " = " + 2578);          if (text.contains("@")) {            text = text.substring(text.indexOf("@") + 2);            if (!"Close".equals(text) & !"Far".equals(text)              & !"Centre".equals(text) & !"Primary".equals(text)              & !"Secondary".equals(text) & !"Tertiary".equals(text)) {//           if (!"Close".equals(text) & !"Far".equals(text)) {              ////System.out.println("Number");            } else {              ////System.out.println("Close/Far");            }          }          System.out.println("" + " = " + 2590);        } else {          orbit = (int) ((i) / cols) - 1;          if (orbit + begin > end) {            break;          }          ////System.out.println("" + (orbit + begin) + " = " + table[col]);          starCheck("Secondary", "" + (orbit + begin));          starCheck("Tertiary", "" + (orbit + begin));          if (txt[num2].contains("" + orbit)) {            ////System.out.println("" + table[col]);          }        }        col += cols;      }    }    System.out.println("" + " = " + 2606);    starCheck("Secondary", "Far");    System.out.println("" + " = " + 2608);    starCheck("Tertiary", "Far");    //</editor-fold>    try {      if (stars > 2) {        try {//          if ((string = Panel4StarGen.tertiaryorbit) != null) {          if (!"Far".equals(string) | !"Close".equals(string)) {            num = Integer.parseInt(string);            Orbit[num] = "Tertiary " + addStarDetails(2);            OrbitFilled[num] = true;          } else {            JOptionPane.showMessageDialog(jButton1, "OOPs 2625");          }//          }        } catch (Exception e) {          num = 100;        }      }      try {        if (stars > 1) {          num = Integer.parseInt(Panel4StarGen.secondaryorbit);          Orbit[num] = "Secondary " + addStarDetails(1);          OrbitFilled[num] = true;        }      } catch (NumberFormatException e) {        num = 100;      }    } catch (Exception e) {      System.out.println("" + " = " + e.getLocalizedMessage());      System.out.println("num = " + num + " = " + 2646);    }    //</editor-fold>//    printOrbits();  }  private static void addGasGiants() {    ggs = Integer.parseInt(Panel4StarGen.gasgiantquantity);    pbs = Integer.parseInt(Panel4StarGen.planetoidquantity);    System.out.println("ggs" + " = " + ggs);    System.out.println("pbs" + " = " + pbs);    if (ggs > 0) {      int min = 0;      int max = 0;      int poss = 0;      int placed = 0;      int random = 0;      int leftover = 0;      boolean done = false;      boolean mt = false;      int MT = 0;      min = 0;      //<editor-fold defaultstate="collapsed" desc="place in outer zones first">      ////System.out.println("Gas Giants" + " = " + ggs);      //FIRST      //min = getHabitableZone(); if available      try {        min = Integer.parseInt(getHabitableZone());      } catch (Exception e) {        ////System.out.println("e" + "1789 = " + e);//        setHabitable();        min = 0;      }      ////System.out.println("getHabitableZone()" + " = " + getHabitableZone());      max = Orbit.length - begin;      if (max < min) {        int tmp = max;        max = min;        min = tmp;      }      poss = 1 + max - min;      while (!done) {        //placed = 0;        try {          leftover = ggs - placed;          if (leftover < 0) {            leftover = 0;          }          ////System.out.println("leftover" + " = " + leftover);          if (max < min) {            int tmp = max;            max = min;            min = tmp;          }          ////System.out.println("min" + " = " + min);          ////System.out.println("max" + " = " + max);          poss = 1 + max - min;          ////System.out.println("poss" + " = " + poss);          random = (int) (Math.random() * poss) + min;          ////System.out.println("random" + " = " + random);          ////System.out.println("placed < ggs" + " = " + (placed < ggs));          ////System.out.println("placed < poss" + " = " + (placed < poss));          if (placed < ggs & placed < poss) {            if (OrbitFilled[random] == false) {              OrbitFilled[random] = true;              Orbit[random] = "Gas Giant";              placed += 1;            }          } else {            done = true;          }          poss = 1 + max - min;        } catch (ArrayIndexOutOfBoundsException e) {          ////System.out.println("e" + "1864 = " + e);//          boolean[] ofs = new boolean[Orbit.length + 1];//          ofs = OrbitFilled;//          OrbitFilled = ofs;//          String[] os = new String[Orbit.length + 1];//          os = Orbit;//          Orbit = os;        }        ////System.out.println("min" + " = " + min);        ////System.out.println("max" + " = " + max);        ////System.out.println("poss" + " = " + poss);        ////System.out.println("placed" + " = " + placed);        ////System.out.println("random" + " = " + random);        ////System.out.println("leftover" + " = " + leftover);        ////System.out.println("OrbitFilled.length" + " = " + OrbitFilled.length);//        printOrbits();      }      //</editor-fold>      //<editor-fold defaultstate="collapsed" desc="and inner if needed">      if (leftover > 0) {        String msg = "" + leftover + " Leftover";        ////System.out.println(msg);        MT = 0;        int mini = 0;        int maxi = 0;        for (int i = 0; i < max; i++) {          if (OrbitFilled[i] == false) {            if (i < mini) {              mini = i;            }            if (i > maxi) {              maxi = i;            }            MT += 1;          }        }        ////System.out.println("MT" + " = " + MT);        ////System.out.println("mini" + " = " + mini);        int hab = (Integer.parseInt(getHabitableZone()));        ////System.out.println("maxi" + " = " + maxi);        while (leftover > 0) {          for (int i = 0; i < leftover; i++) {            int rand = (int) (Math.random() * maxi) + mini;            ////System.out.println("rand" + " = " + rand);            if (OrbitFilled[rand] == false) {              OrbitFilled[rand] = true;              Orbit[rand] = "Gas Giant";              leftover -= 1;            }          }        }      }      //</editor-fold>//      printOrbits();    }  }  private static void addPlanetoids() {    //<editor-fold defaultstate="collapsed" desc="Planetoids">    ////System.out.print(GlobalMethods.comment("=", 20));    pbs = Integer.parseInt(Panel4StarGen.planetoidquantity);    ////System.out.println("Planetoid Belts" + " = " + pbs);    if (pbs > 0) {      int nums = 0;      for (int i = 0; i < OrbitFilled.length; i++) {        if (OrbitFilled[i] == false) {          nums += 1;        }      }      int pb = Integer.parseInt(Panel4StarGen.planetoidquantity);      while (pb > 0) {        int rand = (int) (Math.random() * nums) + 1;        if (OrbitFilled[rand] == false) {          OrbitFilled[rand] = true;          Orbit[rand] = "Planetoid Belt";          pb -= 1;        }      }      //</editor-fold>      //swapOrbits(3,4);//test ok      int[] one = getBoolArrayNums("Star");//      JOptionPane.showMessageDialog(null, one.length);      b = getBoolArrayNums("Planetoid Belt");      blen = getUsedLen(b);      ////System.out.println("ggs" + " = " + ggs);      g = getBoolArrayNums("Gas Giant");      glen = getUsedLen(g);      getOuterNull();      getInnerBelt();//      for (int i = 0; i < 2; i++) {//        if (outernull > innerbelt) {//          swapOrbits(outernull, innerbelt);//        }//      }    }    printOrbits();  }  private static void addEmpty() {    ////System.out.print(GlobalMethods.comment("=", 20));  }  private static void addCaptured() {    ////System.out.print(GlobalMethods.comment("=", 20));  }  private static void addPlanets() {    ////System.out.print(GlobalMethods.comment("=", 20));    int num = 0;    for (int i = 0; i < OrbitFilled.length; i++) {      if (OrbitFilled[i] == false) {        num += 1;        OrbitFilled[i] = true;        Orbit[i] = "Planet";      }    }    printOrbits();  }  /**   addMainworld   */  public static void addMainworld() {    ////System.out.print(GlobalMethods.comment("=", 20));    //setHabitable();    ////System.out.println("getHabitableZone()" + " = " + getHabitableZone());  }  private static void swapOrbits(int from, int to) {    String tmps = Orbit[from];    Orbit[from] = Orbit[to];    Orbit[to] = tmps;    boolean tmpb = OrbitFilled[from];    OrbitFilled[from] = OrbitFilled[to];    OrbitFilled[to] = tmpb;//    printOrbits();  }  private static int[] getBoolArrayNums(String name) {    nums = new int[10];    int num = 0;    try {      for (int i = 0; i < Orbit.length; i++) {        if (name.equals(Orbit[i])) {          nums[num] = i;          num += 1;          continue;        }      }    } catch (Exception e) {    }    return nums;  }  private static int[] getNullArrayNums() {    nums = new int[10];    int num = 0;    try {      for (int i = 1; i < Orbit.length; i++) {        if (Orbit[i] == null) {          nums[num] = i;          num += 1;          continue;        }      }      nums = new int[num];    } catch (Exception e) {    }    return nums;  }  private static void printOrbits() {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      ////System.out.print(globals.GlobalMethods.comment("=", 20));      ////System.out.println("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print(globals.GlobalMethods.comment("-", 20));    }//</editor-fold>    ////System.out.print(GlobalMethods.comment("=", 20));    ////System.out.print("Primary " + Panel4StarGen.primarytype);    ////System.out.print("" + Panel4StarGen.dec[0]);    ////System.out.println("" + Panel4StarGen.primarysize);    starCheck("Secondary", "Close");    starCheck("Tertiary", "Close");    for (int i = 0; i < Orbit.length; i++) {      ////System.out.println("Orbit[" + i + "]" + " = " + Orbit[i]);    }    starCheck("Secondary", "Far");    starCheck("Tertiary", "Far");//    setHabitable();  }  private static String addStarDetails(int i) {    switch (i) {      case 0: {        string = "";//Panel4StarGen.primarytype + Panel4StarGen.dec[0];        size = Panel4StarGen.primarysize;        break;      }      case 1: {        string = "";//Panel4StarGen.secondarytype + Panel4StarGen.dec[1];        size = Panel4StarGen.secondarysize;        break;      }      case 2: {        string = "";//Panel4StarGen.tertiarytype + Panel4StarGen.dec[2];        size = Panel4StarGen.tertiarysize;        break;      }      default: {        return null;      }    }    int num = 0;    switch (size) {      case "Ia": {        num = 0;        break;      }      case "Ib": {        num = 1;        break;      }      case "II": {        num = 2;        break;      }      case "III": {        num = 3;        break;      }      case "IV": {        num = 4;        break;      }      case "V": {        num = 5;        break;      }      case "VI": {        num = 6;        break;      }      case "D":      case "VII": {        num = 7;        break;      }    }    size = Panel4StarGen.primarysize;    string += Panel4StarGen.startables[num];    //JOptionPane.showMessageDialog(null, string);    return string;  }  static String getTextLine(String text) {    for (int i = 0; i < txt.length; i++) {      if (txt[i].contains(text)) {        return "" + i + " = " + txt[i];      }    }    return null;  }  static int getTextLineNum(String text) {    for (int i = 0; i < txt.length; i++) {      if (txt[i].contains(text)) {        return i;      }    }    return 0;  }  //<editor-fold defaultstate="collapsed" desc="comment">  //  /**  //   *  //   * @param cols  //   * @param table  //   */  //  public static void printTable(int cols, String[] table) {  //    jta.setText("printTable()");  ////    jta.append("Planetary Orbit Table".toUpperCase() + CRLF);  //    jta.append(globals.GlobalMethods.comment("=", 20));  //  //  }  //</editor-fold>  void showTxt() {    for (int i = 0; i < txt.length; i++) {      ////System.out.println("" + i + " = " + txt[i]);    }  }}