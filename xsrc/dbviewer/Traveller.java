/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer;/** @version 1.10 2009-10-18 @author Mark Ferguson */import java.awt.BorderLayout;import java.awt.Component;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.beans.PropertyChangeEvent;import java.beans.PropertyVetoException;import java.beans.VetoableChangeListener;import java.io.File;import java.io.Serializable;import javax.swing.ImageIcon;import javax.swing.JCheckBoxMenuItem;import javax.swing.JDesktopPane;import javax.swing.JDialog;import javax.swing.JFileChooser;import javax.swing.JFrame;import javax.swing.JInternalFrame;import javax.swing.JLabel;import javax.swing.JMenu;import javax.swing.JMenuBar;import javax.swing.JMenuItem;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTextArea;import javax.swing.filechooser.FileNameExtensionFilter;import panels.Frame4;import panels.Panel4;/** This program demonstrates the use of internal frames. */public class Traveller {  /**   <p>   @param args strings to start   */  public static void main(String[] args) {    JFrame frame = new DesktopFrame();    frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);    frame.setVisible(true);  }}/** This desktop frame contains editor panes that show HTML documents. */class DesktopFrame extends JFrame implements Serializable {  public DesktopFrame() {    setTitle("Traveller");    setBounds(200, 0, DEFAULT_WIDTH, DEFAULT_HEIGHT);    setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);    desktop = new JDesktopPane();    JScrollPane jsp = new JScrollPane(desktop);//      add(desktop, BorderLayout.CENTER);    add(jsp, BorderLayout.CENTER);    // set up file chooser    chooser = new JFileChooser();    FileNameExtensionFilter filter = new FileNameExtensionFilter("Trav", "bmp",      "jpg", "jpeg", "gif", "bat", "txt", "cfg", "frm", "vb", "exe", "dwi",      "frx", "gbx", "gsn", "gtl", "hlp", "xls", "mdb", "odb", "npc", "ace",      "zip", "rar", "sec", "sub", "sys", "ttf");    //<editor-fold defaultstate="collapsed" desc="old">    // accept all image files ending with .jpg, .jpeg, .gif    //final ExtensionFileFilter filter = new ExtensionFileFilter();    //final ExtensionFileFilter filter;    //			filter = new ExtensionFileFilter();    //      filter.addExtension("jpg");    //      filter.addExtension("jpeg");    //      filter.addExtension("gif");    //      filter.setDescription("Image files");    //      chooser.setFileFilter(filter);    // accept all Cyberboard & Traveller files    //      final ExtensionFileFilter filter1 = new ExtensionFileFilter();    //      filter1.addExtension("bat");    //      filter1.addExtension("txt");    //      filter1.addExtension("cfg");    //    //      filter1.addExtension("frm");    //      filter1.addExtension("vb");    //    //      filter1.addExtension("exe");    //    //      filter1.addExtension("dwi");    //      filter1.addExtension("frx");    //    //      filter1.addExtension("gbx");    //      filter1.addExtension("gsn");    //      filter1.addExtension("gtl");////      filter1.addExtension("hlp");////      filter1.addExtension("xls");//      filter1.addExtension("mdb");//      filter1.addExtension("odb");////      filter1.addExtension("npc");////      filter1.addExtension("sec");//      filter1.addExtension("sub");//      filter1.addExtension("sys");////      filter1.addExtension("ace");//      filter1.addExtension("zip");//      filter1.addExtension("rar");////      filter1.addExtension("ttf");    //filter1.addExtension("");    //</editor-fold>//      filter1.setDescription("CBT files");    chooser.setFileFilter(filter);    chooser.setAccessory(new ImagePreviewer(chooser));////      chooser.setFileView(new FileIconViewCB(filter, new ImageIcon("palette.gif")));    // set up menus    JMenuBar menuBar = new JMenuBar();    setJMenuBar(menuBar);    JMenu fileMenu = new JMenu("File");    menuBar.add(fileMenu);    JMenuItem openItem = new JMenuItem("Open");    fileMenu.add(openItem);    openItem.addActionListener(new FileOpenListener());    JMenuItem newItem = new JMenuItem("New");    newItem.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent event) {        createInternalFrame(          new JLabel(new ImageIcon(planets[counter] + ".gif")),          planets[counter]);        counter = (counter + 1) % planets.length;      }    });    fileMenu.add(newItem);    JMenuItem exitItem = new JMenuItem("Exit");    exitItem.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent event) {        //System.exit(0);        setVisible(false);      }    });    fileMenu.add(exitItem);    JMenu whoMenu = new JMenu("Who");    menuBar.add(whoMenu);    JMenuItem npcItem = new JMenuItem("npc");    whoMenu.add(npcItem);    JMenuItem pcItem = new JMenuItem("pc");    whoMenu.add(pcItem);    JMenuItem personItem = new JMenuItem("person");    whoMenu.add(personItem);    JMenuItem allyItem = new JMenuItem("ally");    whoMenu.add(allyItem);    JMenuItem enemyItem = new JMenuItem("enemy");    whoMenu.add(enemyItem);    JMenuItem groupItem = new JMenuItem("group");    whoMenu.add(groupItem);    JMenuItem memberItem = new JMenuItem("member");    whoMenu.add(memberItem);    JMenuItem govItem = new JMenuItem("gov");    whoMenu.add(govItem);    JMenuItem powerItem = new JMenuItem("power");    whoMenu.add(powerItem);    JMenuItem corpItem = new JMenuItem("corp");    whoMenu.add(corpItem);    JMenu whatMenu = new JMenu("What");    menuBar.add(whatMenu);    JMenuItem environItem = new JMenuItem("environ");    whatMenu.add(environItem);    JMenuItem suitItem = new JMenuItem("suit");    whatMenu.add(suitItem);    JMenuItem vehicleItem = new JMenuItem("vehicle");    whatMenu.add(vehicleItem);    JMenuItem craftItem = new JMenuItem("craft");    whatMenu.add(craftItem);    JMenuItem shipItem = new JMenuItem("ship");    whatMenu.add(shipItem);    JMenuItem stationItem = new JMenuItem("station");    whatMenu.add(stationItem);    JMenuItem weaponItem = new JMenuItem("weapon");    whatMenu.add(weaponItem);    JMenuItem buildingItem = new JMenuItem("building");    whatMenu.add(buildingItem);    JMenu whyMenu = new JMenu("Why");    menuBar.add(whyMenu);    JMenuItem fightItem = new JMenuItem("fight");    whyMenu.add(fightItem);    JMenuItem flightItem = new JMenuItem("flight");    whyMenu.add(flightItem);    JMenuItem invadeItem = new JMenuItem("invade");    whyMenu.add(invadeItem);    JMenuItem tradeItem = new JMenuItem("trade");    whyMenu.add(tradeItem);    JMenuItem scoutItem = new JMenuItem("scout");    whyMenu.add(scoutItem);    JMenuItem otherItem = new JMenuItem("other");    whyMenu.add(otherItem);    JMenu whereMenu = new JMenu("Where");    menuBar.add(whereMenu);    JMenuItem universeItem = new JMenuItem("universe");    whereMenu.add(universeItem);    JMenuItem sectorItem = new JMenuItem("sector");    whereMenu.add(sectorItem);    JMenuItem subsectorItem = new JMenuItem("subsector");    whereMenu.add(subsectorItem);    JMenuItem systemItem = new JMenuItem("system");    whereMenu.add(systemItem);    JMenuItem planetItem = new JMenuItem("planet");    whereMenu.add(planetItem);    JMenuItem stationsItem = new JMenuItem("stations");    whereMenu.add(stationsItem);    JMenu whenMenu = new JMenu("When");    menuBar.add(whenMenu);    JMenu racesMenu = new JMenu("Races");    menuBar.add(racesMenu);    JMenuItem humanItem = new JMenuItem("human");    racesMenu.add(humanItem);    JMenuItem vargrItem = new JMenuItem("vargr");    racesMenu.add(vargrItem);    JMenuItem zhodaniItem = new JMenuItem("zhodani");    racesMenu.add(zhodaniItem);    JMenuItem darrianItem = new JMenuItem("darrian");    racesMenu.add(darrianItem);    JMenuItem droyneItem = new JMenuItem("droyne");    racesMenu.add(droyneItem);    JMenuItem hiverItem = new JMenuItem("hiver");    racesMenu.add(hiverItem);    JMenu windowMenu = new JMenu("Window");    menuBar.add(windowMenu);    JMenuItem nextItem = new JMenuItem("Next");    nextItem.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent event) {        selectNextWindow();      }    });    windowMenu.add(nextItem);    JMenuItem cascadeItem = new JMenuItem("Cascade");    cascadeItem.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent event) {        cascadeWindows();      }    });    windowMenu.add(cascadeItem);    JMenuItem tileItem = new JMenuItem("Tile");    tileItem.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent event) {        tileWindows();      }    });    windowMenu.add(tileItem);    final JCheckBoxMenuItem dragOutlineItem = new JCheckBoxMenuItem(      "Drag Outline");    dragOutlineItem.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent event) {        desktop.setDragMode(dragOutlineItem.isSelected()          ? JDesktopPane.OUTLINE_DRAG_MODE          : JDesktopPane.LIVE_DRAG_MODE);      }    });    windowMenu.add(dragOutlineItem);    JMenu helpMenu = new JMenu("Help");    menuBar.add(helpMenu);    JMenuItem aboutItem = new JMenuItem("About");    aboutItem.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        JDialog jd = DBViewer.getAbout();        jd.setVisible(true);      }    });    helpMenu.add(aboutItem);    JMenuItem prefsItem = new JMenuItem("Prefs");    prefsItem.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        JPanel p4 = new Panel4(dbviewer.DBViewer.getTitle());        JFrame f4 = new Frame4(p4);        //JPanel pan = new Panel4("Preferences");        JTextArea jta = new JTextArea();        JScrollPane jsp = new JScrollPane(jta);        p4.add(jsp, BorderLayout.CENTER);        //JFrame f4 = new Frame4(pan);        String[] args = {dbviewer.DBViewer.getTitle()};        TravellerPrefs.main(args);      }    });    helpMenu.add(prefsItem);  }  /**   Creates an internal frame on the desktop.   <p>   @param c the component to display in the internal frame   @param s the title of the internal frame.   */  public void createInternalFrame(Component c, String s) {    final JInternalFrame iframe = new JInternalFrame(s,      true, // resizable      true, // closable      true, // maximizable      true); // iconifiable    iframe.add(c, BorderLayout.CENTER);    desktop.add(iframe);    iframe.setFrameIcon(new ImageIcon("document.gif"));    // add listener to confirm frame closing    iframe.addVetoableChangeListener(new VetoableChangeListener() {      @Override      public void vetoableChange(PropertyChangeEvent event)        throws PropertyVetoException {        String name = event.getPropertyName();        Object value = event.getNewValue();        // we only want to check attempts to close a frame        if (name.equals("closed") && value.equals(true)) {          // ask user if it is ok to close          int result = JOptionPane.showInternalConfirmDialog(            iframe, "OK to close?", "Select an Option",            JOptionPane.YES_NO_OPTION);          // if the user doesn't agree, veto the close          if (result != JOptionPane.YES_OPTION) {            throw new PropertyVetoException("User canceled close", event);          }        }      }    });    // position frame    int width = desktop.getWidth() / 4;    int height = desktop.getHeight() / 4;    iframe.reshape(nextFrameX, nextFrameY, width, height);    iframe.setVisible(true);    // select the frame--might be vetoed    try {      iframe.setSelected(true);    } catch (PropertyVetoException e) {    }    frameDistance = iframe.getHeight() - iframe.getContentPane().getHeight();    // compute placement for next frame    nextFrameX += frameDistance;    nextFrameY += frameDistance;    if (nextFrameX + width > desktop.getWidth()) {      nextFrameX = 0;    }    if (nextFrameY + height > desktop.getHeight()) {      nextFrameY = 0;    }  }  /**   Cascades the non-iconified internal frames of the desktop.   */  public void cascadeWindows() {    int x = 0;    int y = 0;    int width = desktop.getWidth() / 2;    int height = desktop.getHeight() / 2;    for (JInternalFrame frame : desktop.getAllFrames()) {      if (!frame.isIcon()) {        try {          // try to make maximized frames resizable; this might be vetoed          frame.setMaximum(false);          frame.reshape(x, y, width, height);          x += frameDistance;          y += frameDistance;          // wrap around at the desktop edge          if (x + width > desktop.getWidth()) {            x = 0;          }          if (y + height > desktop.getHeight()) {            y = 0;          }        } catch (PropertyVetoException e) {        }      }    }  }  /**   Tiles the non-iconified internal frames of the desktop.   */  public void tileWindows() {    // count frames that aren't iconized    int frameCount = 0;    for (JInternalFrame frame : desktop.getAllFrames()) {      if (!frame.isIcon()) {        frameCount++;      }    }    if (frameCount == 0) {      return;    }    int rows = (int) Math.sqrt(frameCount);    int cols = frameCount / rows;    int extra = frameCount % rows;    // number of columns with an extra row    int width = desktop.getWidth() / cols;    int height = desktop.getHeight() / rows;    int r = 0;    int c = 0;    for (JInternalFrame frame : desktop.getAllFrames()) {      if (!frame.isIcon()) {        try {          frame.setMaximum(false);          frame.reshape(c * width, r * height, width, height);          r++;          if (r == rows) {            r = 0;            c++;            if (c == cols - extra) {              // start adding an extra row              rows++;              height = desktop.getHeight() / rows;            }          }        } catch (PropertyVetoException e) {        }      }    }  }  /**   Brings the next non-iconified internal frame to the front.   */  public void selectNextWindow() {    JInternalFrame[] frames = desktop.getAllFrames();    for (int i = 0; i < frames.length; i++) {      if (frames[i].isSelected()) {        // find next frame that isn't an icon and can be selected        int next = (i + 1) % frames.length;        while (next != i) {          if (!frames[next].isIcon()) {            try {              // all other frames are icons or veto selection              frames[next].setSelected(true);              frames[next].toFront();              frames[i].toBack();              return;            } catch (PropertyVetoException e) {            }          }          next = (next + 1) % frames.length;        }      }    }  }  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }  /**   This is the listener for the File-Open menu item.   */  private class FileOpenListener implements ActionListener {    @Override    public void actionPerformed(ActionEvent event) {      chooser.setCurrentDirectory(new File(DBViewer.getTitle()));      // show file chooser dialog      int result = chooser.showOpenDialog(DesktopFrame.this);      // if image file accepted, set it as icon of the label      if (result == JFileChooser.APPROVE_OPTION) {        String name = chooser.getSelectedFile().getPath();        //label.setIcon(new ImageIcon(name));      }    }  }//   private AboutDialog dialog;  private JFileChooser chooser;  //private Label label;//	 private final ExtensionFileFilter filter;  private JDesktopPane desktop;  private int nextFrameX;  private int nextFrameY;  private int frameDistance;  private int counter;  private static final String[] planets = {    "Mercury",    "Venus",    "Earth",    "Mars",    "Jupiter",    "Saturn",    "Uranus",    "Neptune",    "Pluto",};  private static final int DEFAULT_WIDTH = 800;  private static final int DEFAULT_HEIGHT = 500;}