/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer.globals;/** @version 1.00 2000-06-07 @author Cay Horstmann */import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.io.OutputStream;import java.io.PrintStream;import javax.swing.JFrame;import javax.swing.JScrollPane;import javax.swing.JTextArea;import panels.Frame4;/** A window that displays the bytes sent to System.out and System.err */public class ConsoleWindow {  /**   */  private static JTextArea output;  /**   <p>   @param args strings to start   */  public static void main(String[] args) {    init();  }  /**   init   */  public static void init() {    //JFrame frame = new JFrame();    frame.setTitle("ConsoleWindow");    setOutput(new JTextArea());    getOutput().setEditable(true);    frame.getContentPane().add(new JScrollPane(getOutput()));    frame.setSize(WIDTH, HEIGHT);    //frame.setLocation(LEFT, TOP);    frame.setVisible(true);    frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);    // define a PrintStream that sends its bytes to the    // output text area    PrintStream consoleStream;    consoleStream = new PrintStream(new OutputStream() {      @Override      public void write(int b) {      } // never called      @Override      public void write(byte[] b, int off, int len) {        getOutput().append(new String(b, off, len));      }    });    output.addMouseListener(new MouseAdapter() {      @Override      public void mouseClicked(MouseEvent evt) {        if (3 == evt.getClickCount()) {          //System.out.print("Double Click");          output.setText("");        }      }    });    // set both System.out and System.err to that stream    System.setOut(consoleStream);    System.setErr(consoleStream);  }  /**   WIDTH   */  public static final int WIDTH = 420;  /**   HEIGHT   */  public static final int HEIGHT = 500;  /**   LEFT   */  public static final int LEFT = 200;  /**   TOP   */  public static final int TOP = 0;  /**   clear   */  public static void clear() {    setText("");  }  private static String getText() {    return output.getText();    //return null;  }  /**   @return the output   */  public static JTextArea getOutput() {    return output;  }  /**   @param aOutput the output to set   */  public static void setOutput(JTextArea aOutput) {    output = aOutput;  }  private static Object getJta() {    return output;  }  /**   ConsoleWindow   */  public ConsoleWindow() {    init();  }  /**   <p>   @return if visible   */  public static boolean isVisible() {    return frame.isVisible();  }  /**   <p>   @param bool yes or no   */  public static void setVisible(boolean bool) {    frame.setVisible(bool);  }  /**   <p>   @param wid size   @param hgt size   */  public static void setSize(int wid, int hgt) {    //System.out.print("setSize to " + wid + " x " + hgt);    frame.setSize(wid, hgt);  }  /**   <p>   @param top  size   @param left size   @param wid  size   @param hgt  size   */  public static void setBounds(int top, int left, int wid, int hgt) {    frame.setSize(wid, hgt);    frame.setLocation(top, left);  }  /**   frame   */  @SuppressWarnings("PublicField")  public static JFrame frame = new Frame4();  /**   <p>   @param string to set ConsoleWindow   */  public static void setText(String string) {    //ConsoleWindow.setText(""+string);  }  /**   <p>   @param string to add to ConsoleWindow   */  public static void append(String string) {    String words = ConsoleWindow.getOutput().toString();    ConsoleWindow.clear();    ConsoleWindow.append(words + "/n" + string + "/n");  }  /**   <p>   @return name of class   */  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }}