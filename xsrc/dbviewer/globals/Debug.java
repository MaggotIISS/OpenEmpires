/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer.globals;import java.awt.Component;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;import javax.swing.DefaultListModel;import javax.swing.JFileChooser;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JList;import javax.swing.JTextField;import javax.swing.ListModel;/** <p> @author maggot.iiss */public class Debug {  dbviewer.SaveOutputWindow sow = new dbviewer.SaveOutputWindow();  ConsoleWindow cw = new ConsoleWindow();  private String Title;  private JFileChooser jfc;  private String CRLF = System.lineSeparator();  private String string;  private JList<String> jl;  private int i;  private String dir;  private JList jList2;  private String file;  private JList jList3;  private JLabel jLabel1;  private JLabel jLabel2;  private JLabel jLabel3;  private String last;  private JTextField jTextField2;  private DefaultListModel dlm;  private JList jList1;  private Component jlist;//  public static void debug() {//    //debug("Test");//  }  /**   <p>   @param toString words to display   */  public static void debug(String toString) {    System.out.print(toString);  }  private void sow() {    sow(sow.isVisible());  }  private void sow(boolean visible) {    if (visible == true) {      sow.setVisible(false);    } else {      sow.setVisible(true);    }  }  private void cw(boolean visible) {    if (visible == true) {      cw.setVisible(false);    } else {      cw.setVisible(true);    }  }  private void cw() {    cw(cw.isVisible());  }  private void open() {    String dirname = getTitle();    //System.out.print("Directory = " + dirname);    //open(dirname);  }  private String getTitle() {    return "";  }  private void setTitle(String title) {    Title = title;  }  private void open(String dirname, JList<String> jList2) {    String filename = "";    jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);    jfc.setCurrentDirectory(new File(dirname));    if (!jList2.isSelectionEmpty()) {      filename = jList2.getSelectedValue().toString();      jfc.setSelectedFile(new File(dirname + "/" + filename));      //System.out.print("OPEN " + dirname + " looking 4 " + filename);    } else if (jList2.isSelectionEmpty()) {      jfc.setSelectedFile(null);      //System.out.print("OPEN " + dirname);      //filename = "";    }    int reply = jfc.showOpenDialog(new JFrame());    if (reply == JFileChooser.APPROVE_OPTION) {      //System.out.print("APPROVE_OPTION");      sow.clear();      sow.setTitle(jfc.getSelectedFile().toString());      try {        try (BufferedReader in = new BufferedReader(new FileReader(dirname + "/"          + filename))) {          String line;          while ((line = in.readLine()) != null) {            sow.append(line + CRLF);          }        }      } catch (IOException iox) {        //System.out.print(iox);      }    } else if (reply != JFileChooser.APPROVE_OPTION) {      //System.out.print("CANCEL_OPTION");    }  }  private void save() {    save(getTitle(), jl);  }  private void save(String title, JList jList1) {    //string = getTitle();    string = title;    //debug("save = " + string);    jfc.setCurrentDirectory(new File(jList1.getSelectedValue().toString()));    //jfc.setFileFilter(new FileFilter() {});    int reply = 0;    if ((reply = jfc.showSaveDialog(new JFrame())) != 0) {      //System.out.print("CANCEL");    } else {      //System.out.print("SAVE");    }  }  private void createComment() {    int spaces = 0;    String letter = "-";    string = "";    string = createComment(spaces, letter);    sow.append(string);  }  private String createComment(int spaces, String letter) {    String s = "";    if (i > 0) {      for (i = 0; i < spaces; i++) {        s += " ";      }    }    s += "//";    for (i = 0; i < 78 - spaces; i++) {      s += letter;    }    s += CRLF;    return s;  }//  private void setVars() {//    setVars("setVars");//  }  private void setVars(String string, JList jList1) {    //debug("");    if (!jList1.isSelectionEmpty()) {      dir = jList1.getSelectedValue().toString();    } else {      dir = "-";    }    if (!jList2.isSelectionEmpty()) {      file = jList2.getSelectedValue().toString();    } else {      file = "-";    }    if (!jList3.isSelectionEmpty()) {      string = jList3.getSelectedValue().toString();    } else {      string = "-";    }    setTitle(dir);    jLabel1.setText(file);    jLabel2.setText(string);    jLabel3.setText(last);    //debug(string + " " + dir + "/" + file);    ////System.out.print("last = " + last);    //debug("");  }  private void updateDirs() {    updateDirs(dir);  }  private void updateDirs(String d) {    //System.out.print(d);  }  private void openFolder() {    //System.out.print("\topenFolder");    jLabel1.setText("");    String[] st = openFolder(dir);  }  @SuppressWarnings("unchecked")  private String[] openFolder(String dir) {    //System.out.print("\topenFolder(" + dir.toString());    String[] files = FilteredListing.getFilteredListing(dir, jTextField2      .getText());    ////System.out.print("files = " + files);    dlm = new DefaultListModel();    for (i = 0; i < files.length; i++) {      //System.out.print(i + " = " + files[i].toString());      dlm.add(i, files[i]);    }    jList2.setModel(dlm);    jList2.validate();    jLabel1.setText("");    return files;  }  private void addDir() {    addDir(jList1.getSelectedValue().toString());  }  @SuppressWarnings("unchecked")  private void addDir(String string) {    if (!jList1.isSelectionEmpty()) {      ////System.out.print("string = " + string);//      sow.append("// " + string + CRLF);      //sow.OpenIt();      jfc.setCurrentDirectory(new File(dir));      jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);      int reply = jfc.showOpenDialog(jlist);      //System.out.print("" + jfc.getSelectedFile().toString());      DefaultListModel dlm1 = new DefaultListModel();      dlm1.ensureCapacity(jList1.getModel().getSize() + 1);      for (i = 0; i < jList1.getModel().getSize(); i++) {        dlm1.add(i, jList1.getModel().getElementAt(i));      }      dlm1.add(0, jfc.getSelectedFile().toString());      jList1.setModel(dlm1);//      jList1.ensureIndexIsVisible(0);//      jList1.setSelectedIndex(0);      jList1.validate();      //System.out.print("dlm1.getSize() = " + dlm1.getSize());    }  }  private void removeDir() {    removeDir(jList1.getSelectedValue().toString());  }  @SuppressWarnings("unchecked")  private void removeDir(String toString) {    //System.out.print("\tremoveDir");    ListModel lm = jList1.getModel();    dlm = new DefaultListModel();    dlm.ensureCapacity(lm.getSize());    for (i = 0; i < lm.getSize(); i++) {      if (lm.getElementAt(i).toString().equals(toString)) {        //System.out.print("Found it @ " + i);        continue;      }      dlm.addElement(lm.getElementAt(i));    }    for (i = 0; i < dlm.getSize(); i++) {      //System.out.print("" + i + " = " + dlm.getElementAt(i));    }    jList1.setModel(dlm);    jList1.validate();    //System.out.print("dlm.getSize() = " + dlm.getSize());  }  private void createChapter() {    string = "";    string += createComment(6, "*");    string += createComment(4, "*");    string += createComment(2, " ");    string += createComment(0, " ");    string += createComment(2, " ");    string += createComment(4, "*");    string += createComment(6, "*");    //System.out.print(string);    sow.append(string);  }  private void createSection() {    string = "";    string += createComment(0, "-");    string += createComment(2, " ");    string += createComment(4, " ");    string += createComment(2, " ");    string += createComment(0, "-");    //System.out.print(string);    sow.append(string);  }  private void createBlock() {    string = "";    string += createComment(0, "=");    string += createComment(0, "-");    string += createComment(0, " ");    string += createComment(0, " ");    string += createComment(0, " ");    string += createComment(0, "-");    string += createComment(0, "=");    //System.out.print(string);    sow.append(string);  }  /**   <p>   @return name of class   */  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }}