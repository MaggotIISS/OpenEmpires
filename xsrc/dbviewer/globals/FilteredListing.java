/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package dbviewer.globals;import java.awt.Container;import java.awt.Rectangle;import java.io.File;import java.io.FilenameFilter;import javax.swing.DefaultListModel;import javax.swing.JList;import javax.swing.JScrollPane;/** <p> @author maggot.iiss */public class FilteredListing {  private static String path = "" + GlobalVariables.BMP + GlobalVariables.FS;//"D:\\Cyberboard\\";//;//;//  private static String ext = "gif";  private static String[] files;  private static JList<String> jlist1 = new JList<>();  private static Container contents;//  /**//   *//   */  /**   FilteredListing   */  public FilteredListing() {    String[] replys = null;    path = null;    ext = null;    String file = null;  }  /**   <p>   @param args strings to start   */  public static void main(String[] args) {    //  this just displays results    AFrame af = new AFrame();    Rectangle r = new Rectangle(0, 100, 300, 500);    af.setBounds(r);    contents = af.getContentPane();    files = getFilteredListing(path, ext);    for (int i = 0; i < files.length; i++) {      ////System.out.print("files[" + i + "] = " + files[i]);    }    DefaultListModel<String> dlm = new DefaultListModel<>();    for (int i = 0; i < files.length; i++) {      dlm.add(i, files[i]);    }    jlist1 = new JList<>(dlm);    JScrollPane jsp = new JScrollPane(jlist1);    contents.add(jsp);    af.setContentPane(contents);    af.validate();    af.setVisible(true);    af.pack();    checkVars();  }  private static void checkVars() {//    //System.out.print("BMP = " + GlobalVariables.BMP);//    //System.out.print("path = " + path);//    //System.out.print("path = " + getPath());//    //System.out.print("ext = " + ext);//    //System.out.print("dir = " + dir);  }  /**   <p>   @param path path of folder   @param ext  extension to filter   @return filtered files of type ext from folder path   */  public static String[] getFilteredListing(String path, final String ext) {    setPath(path);////System.out.print(path);    setExt(ext);////System.out.print(ext);    files = listFiltered();////System.out.print(files);    return files;  }  /**   <p>   @param apath path to set   */  public static void setPath(String apath) {    path = apath;//    //System.out.print(""+path);  }  /**   <p>   @return path in use   */  public static String getPath() {    return path;  }  private static void setExt(String aext) {    ext = aext;  }  /**   <p>   @return selected files of type name in folder dir   */  public static String[] listFiltered() {    final FilenameFilter aFilter = new FilenameFilter() {      @Override      public boolean accept(File dir, String name) {        return name.toLowerCase().endsWith(ext.toLowerCase());      }    };    ////System.out.print("path = " + path.toString());    File f = new File(path.toString());    return f.list(aFilter);  }  /**   <p>   @return name of class   */  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }}