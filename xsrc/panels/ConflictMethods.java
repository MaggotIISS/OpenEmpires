/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package panels;import dbviewer.globals.GlobalVariables;import java.awt.Color;import javax.swing.JPanel;/** <p> @author maggot */public class ConflictMethods {  static int i;  @SuppressWarnings("unchecked")  static void newGame() {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("e.toString()" + " = " + e.toString());    }//</editor-fold>    Panel4Conflict.dlm.clear();    for (i = 0; i < (int) Panel4Conflict.sides.getValue(); i++) {      Panel4Conflict.dlm.addElement("Side " + (i + 1));    }    Panel4Conflict.jList1.setModel(Panel4Conflict.dlm);    Panel4Conflict.factions = new Faction[Panel4Conflict.jList1.getModel()      .getSize()];    for (i = 0; i < Panel4Conflict.factions.length; i++) {      Panel4Conflict.factions[i] = new Faction();      Panel4Conflict.factions[i].setSide("Faction " + (i + 1));    }    Panel4Conflict.jList1.setSelectedIndex(0);    setSide2();  }  static void calcNumbers() {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("e.toString()" + " = " + e.toString());    }//</editor-fold>    if (Panel4Conflict.jList1.getSelectedIndex() != -1) {      int side = Panel4Conflict.jList1.getSelectedIndex();      Faction fac = Panel4Conflict.factions[side];      int men = Panel4Conflict.factions[side].getMen();      int mentypes = Panel4Conflict.factions[side].getMentypes();      int mengroups = Panel4Conflict.factions[side].getMengroups();      if (men == 0) {        mentypes = 0;        mengroups = 0;      }      if ((men > 0) & (mentypes == 0)) {        mentypes = 1;      }      if ((men > 0) & (mengroups == 0)) {        mengroups = 1;      }      if (mentypes > men) {        mentypes = men;      }      if (mengroups > men) {        mengroups = men;      }      int vehicles = Panel4Conflict.factions[side].getVehicles();      int vehicletypes = Panel4Conflict.factions[side].getVehicletypes();      int vehiclegroups = Panel4Conflict.factions[side].getVehiclegroups();//      int vehicles = (int) Panel4Conflict.vehicles.getValue();//      int vehicletypes = (int) Panel4Conflict.vehicletypes.getValue();//      int vehiclegroups = (int) Panel4Conflict.vehiclegroups.getValue();      if (vehicles == 0) {        vehicletypes = 0;        vehiclegroups = 0;      }      if (vehicletypes > vehicles) {        vehicletypes = vehicles;      }      if (vehiclegroups > vehicles) {        vehiclegroups = vehicles;      }      fac.setSide(Panel4Conflict.jList1.getSelectedValue().toString());      fac.setMen(men);      fac.setMentypes(mentypes);      fac.setMengroups(mengroups);      fac.setVehicles(vehicles);      fac.setVehicletypes(vehicletypes);      fac.setVehiclegroups(vehiclegroups);      Panel4Conflict.factions[side] = fac;//      update();      showIt();    }  }//  static void update() {//    //<editor-fold defaultstate="collapsed" desc="DEBUG">//    boolean DEBUG = false;//    if (DEBUG) { // true or false//      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());//      ////System.out.print("e.toString()" + " = " + e.toString());//    }//////</editor-fold>////    //<editor-fold defaultstate="collapsed" desc="comment">////    //    Panel4Conflict.jta.setText("");////    //    String updater;////    //    updater = ""////    //            + Panel4Conflict.jList1.getSelectedValue() + ","////    //            + (int) Panel4Conflict.men.getValue() + ","////    //            + (int) Panel4Conflict.mentypes.getValue() + ","////    //            + (int) Panel4Conflict.mengroups.getValue() + ","////    //            + (int) Panel4Conflict.vehicles.getValue() + ","////    //            + (int) Panel4Conflict.vehicletypes.getValue() + ","////    //            + (int) Panel4Conflict.vehiclegroups.getValue() + GlobalVariables.CRLF;////    //    Panel4Conflict.jta.append(updater);////    //</editor-fold>////    int side = Panel4Conflict.jList1.getSelectedIndex();////    Faction fac = Panel4Conflict.factions[side];////    fac.setSide(Panel4Conflict.jList1.getSelectedValue().toString());////    fac.setMen((int) Panel4Conflict.men.getValue());////    fac.setMentypes((int) Panel4Conflict.mentypes.getValue());////    fac.setMengroups((int) Panel4Conflict.mentypes.getValue());////    fac.setVehicles((int) Panel4Conflict.vehicles.getValue());////    fac.setVehicletypes((int) Panel4Conflict.vehicletypes.getValue());////    fac.setVehiclegroups((int) Panel4Conflict.vehicletypes.getValue());////    Panel4Conflict.factions[side] = fac;//  }//  static void saveIt() {////    //<editor-fold defaultstate="collapsed" desc="DEBUG">////    boolean DEBUG = false;////    if (DEBUG) { // true or false////      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());////      ////System.out.print("e.toString()" + " = " + e.toString());////    }//////</editor-fold>////    Panel4Conflict.num = Panel4Conflict.jList1.getSelectedIndex();////    Faction fac = Panel4Conflict.factions[Panel4Conflict.num];////    fac.setMen((int) Panel4Conflict.men.getValue());////    fac.setMentypes((int) Panel4Conflict.mentypes.getValue());////    fac.setMengroups((int) Panel4Conflict.mengroups.getValue());////    fac.setVehicles((int) Panel4Conflict.vehicles.getValue());////    fac.setVehicletypes((int) Panel4Conflict.vehicletypes.getValue());////    fac.setVehiclegroups((int) Panel4Conflict.vehiclegroups.getValue());////    Panel4Conflict.factions[Panel4Conflict.num] = fac;//  }  static void showIt() {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("e.toString()" + " = " + e.toString());    }    //</editor-fold>    int side = Panel4Conflict.jList1.getSelectedIndex();    Faction fac = Panel4Conflict.factions[side];    Panel4Conflict.factions[side] = fac;//    Panel4Conflict.men.setValue(fac.getMen());//    Panel4Conflict.mentypes.setValue(fac.getMentypes());//    Panel4Conflict.mengroups.setValue(fac.getMengroups());//    Panel4Conflict.vehicles.setValue(fac.getVehicles());//    Panel4Conflict.vehicletypes.setValue(fac.getVehicletypes());//    Panel4Conflict.vehiclegroups.setValue(fac.getVehiclegroups());//    //System.out.print("fac.getSide()" + " = " +fac.getSideName());//    //System.out.print("fac.getMen()" + " = " +fac.getMen());//    //System.out.print("fac.getMentypes()" + " = " +fac.getMentypes());//    //System.out.print("fac.getMengroups()" + " = " +fac.getMengroups());//    //System.out.print("fac.getVehicles()" + " = " +fac.getVehicles());//    //System.out.print("fac.getVehicletypes()" + " = " +fac.getVehicletypes());//    //System.out.print("fac.getVehiclegroups()" + " = " +fac.getVehiclegroups());  }  static void setColors() {    //    Color col = null;    Color[] cols = null;    JPanel panel = null;    switch (Panel4Conflict.jComboBox1.getSelectedItem().toString()) {      case "Space": //Navy        cols = GlobalVariables.service[0];        break;      case "Air": //Marine        cols = GlobalVariables.service[1];        break;      case "Land": //Army        cols = GlobalVariables.service[2];        break;      case "Sea": //Other        cols = GlobalVariables.service[4];        break;      case "Under": //Merchant        cols = GlobalVariables.service[5];        break;      case "Scout": //Scout        cols = GlobalVariables.service[3];    }    for (int number = 1; number < 9; number++) {      switch (number) {        case 0://          pan = p4c;//          pan = p4g;        case 1:          panel = Panel4Conflict.jPanel1;          break;        case 2:          panel = Panel4Conflict.jPanel2;          break;        case 3:          panel = Panel4Conflict.jPanel3;          break;        case 4:          panel = Panel4Conflict.jPanel4;          break;        case 5:          panel = Panel4Conflict.jPanel5;          break;        case 6:          panel = Panel4Conflict.jPanel6;          break;        case 7:          panel = Panel4Conflict.jPanel7;          break;        case 8:          panel = Panel4Conflict.jPanel8;          break;      }      dbviewer.globals.GlobalMethods.autoColor(panel, cols[0], cols[1]);      Panel4Conflict.maplabel.setBackground(cols[0]);    }  }  static void listChange() {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("e.toString()" + " = " + e.toString());    }//</editor-fold>  }  static void buttonClick(int i) {    //    switch (i) {      case 0:        showFactions();        break;      case 1:        break;      case 2:        break;      case 3:        break;    }  }  private static Faction getFaction(int num) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("e.toString()" + " = " + e.toString());    }//</editor-fold>    return Panel4Conflict.factions[num];  }  static void showFactions() {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("e.toString()" + " = " + e.toString());    }//</editor-fold>    int num = (int) Panel4Conflict.sides.getValue();    Panel4Conflict.factions = new Faction[num];    for (i = 0; i < num; i++) {      showFaction(i);    }  }  static void showFaction(int i) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("e.toString()" + " = " + e.toString());    }////</editor-fold>    //Faction fac = new Faction();    Faction fac = Panel4Conflict.factions[i];    //System.out.print("fac.getSide()" + " = " + fac.getSideName());    //System.out.print("fac.getMen()" + " = " + fac.getMen());    //System.out.print("fac.getMentypes()" + " = " + fac.getMentypes());    //System.out.print("fac.getMengroups()" + " = " + fac.getMengroups());    //System.out.print("fac.getVehicles()" + " = " + fac.getVehicles());    //System.out.print("fac.getVehicletypes()" + " = " + fac.getVehicletypes());    //System.out.print("fac.getVehiclegroups()" + " = " + fac.getVehiclegroups());    //System.out.print("");  }  static void setFaction(int i) {    //<editor-fold defaultstate="collapsed" desc="DEBUG">    boolean DEBUG = false;    if (DEBUG) { // true or false      //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      ////System.out.print("e.toString()" + " = " + e.toString());    }//</editor-fold>    Faction fac = Panel4Conflict.factions[i];    //System.out.print(fac.getSideName());    fac.setSide("Faction " + (i + 1));//    fac.setMen((int) Panel4Conflict.men.getValue());//    fac.setMentypes((int) Panel4Conflict.mentypes.getValue());//    fac.setMengroups((int) Panel4Conflict.mengroups.getValue());//    fac.setVehicles((int) Panel4Conflict.vehicles.getValue());//    fac.setVehicletypes((int) Panel4Conflict.vehicletypes.getValue());//    fac.setVehiclegroups((int) Panel4Conflict.vehiclegroups.getValue());    Panel4Conflict.factions[i] = fac;    showFaction(i);  }  static void setSide2() {    Faction fac = getFaction(1);    fac.setMen(2);    fac.setMentypes(2);    fac.setMengroups(2);    fac.setVehicles(2);    fac.setVehicletypes(2);    fac.setVehiclegroups(2);  }  static void saveSpinners() {    int side = Panel4Conflict.jList1.getSelectedIndex();    Faction fac = Panel4Conflict.factions[side];    fac.setSide(Panel4Conflict.jList1.getSelectedValue().toString());//    fac.setMen((int)Panel4Conflict.men.getValue());//    fac.setMentypes((int)Panel4Conflict.mentypes.getValue());//    fac.setMengroups((int)Panel4Conflict.mengroups.getValue());//    fac.setVehicles((int)Panel4Conflict.vehicles.getValue());//    fac.setVehicletypes((int)Panel4Conflict.vehicletypes.getValue());//    fac.setVehiclegroups((int)Panel4Conflict.vehiclegroups.getValue());    Panel4Conflict.factions[side] = fac;  }  static void saveMod() {    //int sides = Panel4Conflict.jList1.getModel().getSize();    int side = Panel4Conflict.jList1.getSelectedIndex();    Faction fac = Panel4Conflict.factions[side];    fac.setSide(Panel4Conflict.jList1.getSelectedValue().toString());//    fac.setMen((int) Panel4Conflict.men.getValue());//    fac.setMentypes((int) Panel4Conflict.mentypes.getValue());//    fac.setMengroups((int) Panel4Conflict.mengroups.getValue());//    fac.setVehicles((int) Panel4Conflict.vehicles.getValue());//    fac.setVehicletypes((int) Panel4Conflict.vehicletypes.getValue());//    fac.setVehiclegroups((int) Panel4Conflict.vehiclegroups.getValue());    Panel4Conflict.factions[side] = fac;  }}