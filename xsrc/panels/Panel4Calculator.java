/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package panels;import dbviewer.globals.GlobalMethods;import java.awt.BorderLayout;import java.awt.Button;import java.awt.Color;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.SwingConstants;/** A panel with calculator buttons and a result display. */public class Panel4Calculator extends Panel4 {  /**   <p>   @param args strings to start   */  public static void main(String[] args) {    JPanel jp = new Panel4Calculator();    JFrame jf = new Frame4(jp);  }  /**   Panel4Calculator   */  public Panel4Calculator() {    super();    setLayout(new BorderLayout());    result = 0;    lastCommand = "=";    start = true;    // add the display    display = new JLabel("0");    display.setOpaque(true);    display.setBackground(Color.white);    display.setHorizontalAlignment(SwingConstants.RIGHT);    add(display, BorderLayout.NORTH);    ActionListener insert = new InsertAction();    ActionListener command = new CommandAction();    // add the buttons in a 4 x 4 grid    panel = new JPanel();    panel.setLayout(new GridLayout(4, 4));    addButton("7", insert);    addButton("8", insert);    addButton("9", insert);    addButton("/", command);    addButton("4", insert);    addButton("5", insert);    addButton("6", insert);    addButton("*", command);    addButton("1", insert);    addButton("2", insert);    addButton("3", insert);    addButton("-", command);    addButton("0", insert);    addButton(".", insert);    addButton("=", command);    addButton("+", command);    add(panel, BorderLayout.CENTER);  }  /**   Adds a button to the center panel.   <p>   @param label    the button label   @param listener the button listener   */  private void addButton(String label, ActionListener listener) {    Button button = new Button(label);    button.addActionListener(listener);    panel.add(button);    GlobalMethods.autoColor(panel, Color.black, Color.LIGHT_GRAY);  }  /**   Carries out the pending calculation.   <p>   @param x the value to be accumulated with the prior result.   */  public void calculate(double x) {    switch (lastCommand) {      case "+":        result += x;        break;      case "-":        result -= x;        break;      case "*":        result *= x;        break;      case "/":        result /= x;        break;      case "=":        result = x;        break;    }    display.setText("" + result);  }  /**   This action inserts the button action string to the end of the display   text. //   */  private class InsertAction implements ActionListener {    @Override    public void actionPerformed(ActionEvent event) {      String input = event.getActionCommand();      if (start) {        display.setText("");        start = false;      }      display.setText(display.getText() + input);    }  }  /**   This action executes the command that the button action string denotes.   */  private class CommandAction implements ActionListener {    @Override    public void actionPerformed(ActionEvent evt) {      String command = evt.getActionCommand();      if (start) {        if (command.equals("-")) {          display.setText(command);          start = false;        } else {          lastCommand = command;        }      } else {        calculate(Double.parseDouble(display.getText()));        lastCommand = command;        start = true;      }    }  }  /**   <p>   @return name of class   */  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }  private JLabel display;  private JPanel panel;  private double result;  private String lastCommand;  private boolean start;}