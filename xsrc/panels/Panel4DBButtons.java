/* Copyright (C) 2014 Mark Ferguson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. */package panels;import dbviewer.DBViewer;import dbviewer.globals.GlobalMethods;import static dbviewer.globals.GlobalVariables.FS;import static dbviewer.globals.GlobalVariables.T5;import java.awt.Color;import java.awt.Component;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.io.BufferedReader;import java.io.FileReader;import java.io.IOException;import javax.swing.JButton;import javax.swing.JComboBox;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JTextField;/** <p> @author maggot.iiss */public class Panel4DBButtons extends Panel4 {  //<editor-fold defaultstate="collapsed" desc="variables">  private JTextField jtf = new JTextField("0", 4);  private int of = 0;  private JLabel ofl = new JLabel(" 0f ");  private JLabel oflab = new JLabel("" + of);  private JButton jbf = new JButton("<<");  private JButton jbp = new JButton("<");  private JButton jbn = new JButton(">");  private JButton jbl = new JButton(">>");  private JButton jbi = new JButton("Insert");  private FileReader file = null;  private BufferedReader buffer = null;  private static final long serialVersionUID = 1L;  private Frame4DBView f4dbv = null;  private Frame4ReflectionView f4rv = null;  private Frame4TextFileView f4tfv = null;  private Panel4Title p4info = null;  private Panel4DBButtons p4dbb = null;  private Panel4LabelComboButton p4lcb = null;  static JPanel jp;  static JFrame jf;  //</editor-fold>  /**   <p>   @param args strings to start   */  public static void main(String[] args) {    jp = new Panel4DBButtons();    jf = new Frame4(jp);  }  /**   Panel4DBButtons   */  public Panel4DBButtons() {    super();    //jtf.setText("1");//    setLayout(new BoxLayout(jp, BoxLayout.LINE_AXIS));    jtf.addActionListener(new ActionListenerImpl());    jtf.addMouseListener(new MouseAdapter() {      @Override      public void mouseClicked(MouseEvent e) {        //<editor-fold defaultstate="collapsed" desc="DEBUG">        boolean DEBUG = false;        if (DEBUG) { // true or false          //System.out.print("---------------------------");          //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());        }//</editor-fold>        //System.out.print("e.getClickCount() = " + e.getClickCount());      }    });    jbf.setVisible(true);    jbf.setToolTipText("First");    jbf.addActionListener(new ActionListenerImpl());    jbp.setVisible(true);    jbp.setToolTipText("Prev");    jbp.addActionListener(new ActionListenerImpl());    jbp.setEnabled(false);    jbn.setVisible(true);    jbn.setToolTipText("Next");    jbn.addActionListener(new ActionListenerImpl());    jbn.setEnabled(false);    jbl.setVisible(true);    jbl.setToolTipText("Last");    jbl.addActionListener(new ActionListenerImpl());    jbl.setEnabled(true);    jbf.doClick();    jbi.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        // Add New Entry        //System.out.print("Add New Entry");      }    });    jbi.setEnabled(true);//    setLayout(new BoxLayout(jp, BoxLayout.LINE_AXIS));    add(jtf);    add(ofl);    add(oflab);    add(jbf);    add(jbp);    add(jbn);    add(jbl);    add(jbi);    validate();    GlobalMethods.autoColor(this, Color.black, Color.LIGHT_GRAY);  }  private static String getTitle() {    try {      return DBViewer.getTitle();    } catch (Exception e) {      return T5 + FS + "imp-asl";    }    //return null;  }  /**   <p>   @return name of class   */  @Override  public String toString() {    return "" + getClass().getName() + "[]";  }  /**   ActionListenerImpl   */  public class ActionListenerImpl implements ActionListener {    /**     ActionListenerImpl     */    public ActionListenerImpl() {    }    /**     <p>     @param e ActionEvent     */    @Override    public void actionPerformed(ActionEvent e) {      //<editor-fold defaultstate="collapsed" desc="DEBUG">      boolean DEBUG = false;      if (DEBUG) { // true or false        //System.out.print("---------------------------");        //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      }//</editor-fold>      //System.out.print("public void actionPerformed(ActionEvent " + e + ")");      jbf.setEnabled(true);      jbp.setEnabled(true);      jbn.setEnabled(true);      jbl.setEnabled(true);      jbi.setEnabled(true);      loadData(Panel4DBButtons.getTitle());      Integer old = null;      //<editor-fold defaultstate="collapsed" desc="try number">      try {        old = Integer.parseInt(jtf.getText().toString());        if (old < 1) {          jtf.setText("1");        }        if (old > Integer.parseInt(oflab.getText())) {          jtf.setText(oflab.getText());        }      } catch (NumberFormatException x) {        //System.out.print(" = " + x.toString());        jtf.setText("1");      }      //</editor-fold>      //<editor-fold defaultstate="collapsed" desc="check value">      if (("<<".equals(e.getActionCommand()))) {        jtf.setText("" + 0);      }      if (("<".equals(e.getActionCommand()))) {        int val = old - 1;        if (val > 0) {          jtf.setText("" + val);        }      }      if ((">".equals(e.getActionCommand()))) {        int val = old + 1;        if (val <= Integer.parseInt(oflab.getText())) {          jtf.setText("" + val);        }      }      if ((">>".equals(e.getActionCommand()))) {        jtf.setText(oflab.getText());      }      try {        showLine(Integer.parseInt(jtf.getText()));      } catch (NumberFormatException x) {        //System.out.print("End of actionPerformed = " + x.toString());      }      old = Integer.parseInt(jtf.getText().toString());      if (jtf.getText().equals(oflab.getText())) {        jbi.setEnabled(true);      } else if (!jtf.getText().equals(oflab.getText())) {        jbi.setEnabled(false);      }      //</editor-fold>    }    /**     <p>     @param jl String     */    @SuppressWarnings("NestedAssignment")    public void loadData(String jl) {      //<editor-fold defaultstate="collapsed" desc="DEBUG">      boolean DEBUG = false;      if (DEBUG) { // true or false        //System.out.print("---------------------------");        //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      }//</editor-fold>      //System.out.print("\tpublic void loadData(String jl)");      try {        FileReader file = new FileReader(jl);        try (BufferedReader buffer = new BufferedReader(file)) {          String line = null;          int num = 0;          while ((line = buffer.readLine()) != null) {            num += 1;          }          oflab.setText("" + (num - 1));          //buffer.close();        }      } catch (IOException e) {        //System.out.print("\tloadData(" + jl + ")");        //System.out.print("IOException = " + e);      }    }    /**     <p>     @param num line number to show     */    @SuppressWarnings({"NestedAssignment", "unchecked"})    public void showLine(int num) {      //<editor-fold defaultstate="collapsed" desc="DEBUG">      boolean DEBUG = false;      if (DEBUG) { // true or false        //System.out.print("---------------------------");        //System.out.print("\t" + Thread.currentThread().getStackTrace()[1].getMethodName());      }//</editor-fold>      Component[] comps = Panel4LabelComboButton.getJpan().getComponents();      String jl = getTitle();      String[] vars;      try {        file = new FileReader(jl);        buffer = new BufferedReader(file);        String line;        int lnum = 0;        while ((line = buffer.readLine()) != null) {          if (lnum == num) {            int k = 0;            vars = line.split(",");            for (int i = 0; i < comps.length; i++) {              if (comps[i].getClass().getName().contains("JComboBox")) {                JComboBox j = (JComboBox) comps[i];                j.removeAllItems();                //System.out.print(" = " + vars[k]);                j.addItem(vars[k]);                k += 1;              }            }          }          lnum += 1;          //buffer.close();        }        buffer.close();      } catch (IOException e) {        //System.out.print("IOException = " + e);      }    }  }}